
ELB_Controller_V1-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004efc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800508c  0800508c  0001508c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005138  08005138  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  08005138  08005138  00015138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005140  08005140  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005140  08005140  00015140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005144  08005144  00015144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  08005148  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002015c  2**0
                  CONTENTS
 10 .bss          00000358  2000015c  2000015c  0002015c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004b4  200004b4  0002015c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c435  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c3d  00000000  00000000  0002c5c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a8  00000000  00000000  0002e200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000900  00000000  00000000  0002eba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f174  00000000  00000000  0002f4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bc17  00000000  00000000  0004e61c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000baee3  00000000  00000000  0005a233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00115116  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002af0  00000000  00000000  00115168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000015c 	.word	0x2000015c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005074 	.word	0x08005074

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000160 	.word	0x20000160
 80001cc:	08005074 	.word	0x08005074

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <EdgeLED_Color>:
  }
}
*/

void EdgeLED_Color(uint8_t Button_Number, uint8_t Green, uint8_t Red, uint8_t Blue, uint8_t *Packet)
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	4604      	mov	r4, r0
 800058c:	4608      	mov	r0, r1
 800058e:	4611      	mov	r1, r2
 8000590:	461a      	mov	r2, r3
 8000592:	4623      	mov	r3, r4
 8000594:	71fb      	strb	r3, [r7, #7]
 8000596:	4603      	mov	r3, r0
 8000598:	71bb      	strb	r3, [r7, #6]
 800059a:	460b      	mov	r3, r1
 800059c:	717b      	strb	r3, [r7, #5]
 800059e:	4613      	mov	r3, r2
 80005a0:	713b      	strb	r3, [r7, #4]
	//Packet[0]=Button_Number;
	Packet[0] = Button_Number;
 80005a2:	69bb      	ldr	r3, [r7, #24]
 80005a4:	79fa      	ldrb	r2, [r7, #7]
 80005a6:	701a      	strb	r2, [r3, #0]
	Packet[1] = Green;
 80005a8:	69bb      	ldr	r3, [r7, #24]
 80005aa:	3301      	adds	r3, #1
 80005ac:	79ba      	ldrb	r2, [r7, #6]
 80005ae:	701a      	strb	r2, [r3, #0]
	Packet[2] = Red;
 80005b0:	69bb      	ldr	r3, [r7, #24]
 80005b2:	3302      	adds	r3, #2
 80005b4:	797a      	ldrb	r2, [r7, #5]
 80005b6:	701a      	strb	r2, [r3, #0]
	Packet[3] = Blue;
 80005b8:	69bb      	ldr	r3, [r7, #24]
 80005ba:	3303      	adds	r3, #3
 80005bc:	793a      	ldrb	r2, [r7, #4]
 80005be:	701a      	strb	r2, [r3, #0]

	nRF24_Transmit(Sel_EL_Module, Packet, EdgeLED_Packet_Size);
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <EdgeLED_Color+0x60>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	69b9      	ldr	r1, [r7, #24]
 80005c8:	2005      	movs	r0, #5
 80005ca:	f003 ff8f 	bl	80044ec <nRF24_Transmit>
	nRF24_Transmit(Sel_EL_Module, Packet, EdgeLED_Packet_Size);
 80005ce:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <EdgeLED_Color+0x60>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	461a      	mov	r2, r3
 80005d4:	69b9      	ldr	r1, [r7, #24]
 80005d6:	2005      	movs	r0, #5
 80005d8:	f003 ff88 	bl	80044ec <nRF24_Transmit>
#ifdef Debug
	nRF24_Transmit_Report(Sel_EL_Module);
#endif
}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd90      	pop	{r4, r7, pc}
 80005e4:	20000099 	.word	0x20000099

080005e8 <HAL_GPIO_EXTI_Callback>:


//Interrupt handler to check which module has new packet
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	80fb      	strh	r3, [r7, #6]
	interrupt_time1 = HAL_GetTick();
 80005f2:	f001 f9a1 	bl	8001938 <HAL_GetTick>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a12      	ldr	r2, [pc, #72]	; (8000644 <HAL_GPIO_EXTI_Callback+0x5c>)
 80005fa:	6013      	str	r3, [r2, #0]
	if (GPIO_Pin == nRF_B_IRQ1_Pin)
 80005fc:	88fb      	ldrh	r3, [r7, #6]
 80005fe:	2b10      	cmp	r3, #16
 8000600:	d102      	bne.n	8000608 <HAL_GPIO_EXTI_Callback+0x20>
	{

#ifdef Debug
		HAL_UART_Transmit(&huart2, (uint8_t *)"Data received in Button module1\n\n",33, HAL_MAX_DELAY);
#endif
		Data_In_Module1 = 1;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <HAL_GPIO_EXTI_Callback+0x60>)
 8000604:	2201      	movs	r2, #1
 8000606:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == nRF_B_IRQ2_Pin)
 8000608:	88fb      	ldrh	r3, [r7, #6]
 800060a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800060e:	d102      	bne.n	8000616 <HAL_GPIO_EXTI_Callback+0x2e>
	{
#ifdef Debug
		HAL_UART_Transmit(&huart2, (uint8_t *)"Data received in Button module2\n\n",33, HAL_MAX_DELAY);
#endif
		Data_In_Module2 = 1;
 8000610:	4b0e      	ldr	r3, [pc, #56]	; (800064c <HAL_GPIO_EXTI_Callback+0x64>)
 8000612:	2201      	movs	r2, #1
 8000614:	701a      	strb	r2, [r3, #0]
	  }
	if (GPIO_Pin == nRF_B_IRQ3_Pin)
 8000616:	88fb      	ldrh	r3, [r7, #6]
 8000618:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800061c:	d102      	bne.n	8000624 <HAL_GPIO_EXTI_Callback+0x3c>
	{
#ifdef Debug
	    HAL_UART_Transmit(&huart2, (uint8_t *)"Data received in Button module3\n\n",33, HAL_MAX_DELAY);
#endif
		Data_In_Module3 = 1;
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <HAL_GPIO_EXTI_Callback+0x68>)
 8000620:	2201      	movs	r2, #1
 8000622:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == nRF_B_IRQ4_Pin)
 8000624:	88fb      	ldrh	r3, [r7, #6]
 8000626:	2b40      	cmp	r3, #64	; 0x40
 8000628:	d102      	bne.n	8000630 <HAL_GPIO_EXTI_Callback+0x48>
	{
#ifdef Debug
		HAL_UART_Transmit(&huart2, (uint8_t *)"Data received in Button module4\n\n",33, HAL_MAX_DELAY);
#endif
		Data_In_Module4 = 1;
 800062a:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <HAL_GPIO_EXTI_Callback+0x6c>)
 800062c:	2201      	movs	r2, #1
 800062e:	701a      	strb	r2, [r3, #0]
	}
	interrupt_time2 = HAL_GetTick();
 8000630:	f001 f982 	bl	8001938 <HAL_GetTick>
 8000634:	4603      	mov	r3, r0
 8000636:	4a08      	ldr	r2, [pc, #32]	; (8000658 <HAL_GPIO_EXTI_Callback+0x70>)
 8000638:	6013      	str	r3, [r2, #0]
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000470 	.word	0x20000470
 8000648:	20000466 	.word	0x20000466
 800064c:	20000467 	.word	0x20000467
 8000650:	20000468 	.word	0x20000468
 8000654:	20000469 	.word	0x20000469
 8000658:	20000474 	.word	0x20000474

0800065c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	; 0x28
 8000660:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000662:	f001 f903 	bl	800186c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000666:	f000 fc9b 	bl	8000fa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066a:	f000 fdc3 	bl	80011f4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800066e:	f000 fcf5 	bl	800105c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000672:	f000 fd29 	bl	80010c8 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000676:	f000 fd5d 	bl	8001134 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 800067a:	f000 fd91 	bl	80011a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //RF Modules address and frequency channel configuration
  TxAddr_B_Module1[0] = Config_table[0][0];
 800067e:	4bab      	ldr	r3, [pc, #684]	; (800092c <main+0x2d0>)
 8000680:	781a      	ldrb	r2, [r3, #0]
 8000682:	4bab      	ldr	r3, [pc, #684]	; (8000930 <main+0x2d4>)
 8000684:	701a      	strb	r2, [r3, #0]
  RxAddr_B_Module1[0] = Config_table[0][0];
 8000686:	4ba9      	ldr	r3, [pc, #676]	; (800092c <main+0x2d0>)
 8000688:	781a      	ldrb	r2, [r3, #0]
 800068a:	4baa      	ldr	r3, [pc, #680]	; (8000934 <main+0x2d8>)
 800068c:	701a      	strb	r2, [r3, #0]
  TxAddr_B_Module2[0] = Config_table[6][0];
 800068e:	4ba7      	ldr	r3, [pc, #668]	; (800092c <main+0x2d0>)
 8000690:	7e1a      	ldrb	r2, [r3, #24]
 8000692:	4ba9      	ldr	r3, [pc, #676]	; (8000938 <main+0x2dc>)
 8000694:	701a      	strb	r2, [r3, #0]
  RxAddr_B_Module2[0] = Config_table[6][0];
 8000696:	4ba5      	ldr	r3, [pc, #660]	; (800092c <main+0x2d0>)
 8000698:	7e1a      	ldrb	r2, [r3, #24]
 800069a:	4ba8      	ldr	r3, [pc, #672]	; (800093c <main+0x2e0>)
 800069c:	701a      	strb	r2, [r3, #0]
  TxAddr_B_Module3[0] = Config_table[12][0];
 800069e:	4ba3      	ldr	r3, [pc, #652]	; (800092c <main+0x2d0>)
 80006a0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80006a4:	4ba6      	ldr	r3, [pc, #664]	; (8000940 <main+0x2e4>)
 80006a6:	701a      	strb	r2, [r3, #0]
  RxAddr_B_Module3[0] = Config_table[12][0];
 80006a8:	4ba0      	ldr	r3, [pc, #640]	; (800092c <main+0x2d0>)
 80006aa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80006ae:	4ba5      	ldr	r3, [pc, #660]	; (8000944 <main+0x2e8>)
 80006b0:	701a      	strb	r2, [r3, #0]
  TxAddr_B_Module4[0] = Config_table[18][0];
 80006b2:	4b9e      	ldr	r3, [pc, #632]	; (800092c <main+0x2d0>)
 80006b4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80006b8:	4ba3      	ldr	r3, [pc, #652]	; (8000948 <main+0x2ec>)
 80006ba:	701a      	strb	r2, [r3, #0]
  RxAddr_B_Module4[0] = Config_table[18][0];
 80006bc:	4b9b      	ldr	r3, [pc, #620]	; (800092c <main+0x2d0>)
 80006be:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80006c2:	4ba2      	ldr	r3, [pc, #648]	; (800094c <main+0x2f0>)
 80006c4:	701a      	strb	r2, [r3, #0]
  RF_Channel_Module1 = Config_table[0][1];
 80006c6:	4b99      	ldr	r3, [pc, #612]	; (800092c <main+0x2d0>)
 80006c8:	785a      	ldrb	r2, [r3, #1]
 80006ca:	4ba1      	ldr	r3, [pc, #644]	; (8000950 <main+0x2f4>)
 80006cc:	701a      	strb	r2, [r3, #0]
  RF_Channel_Module2 = Config_table[6][1];
 80006ce:	4b97      	ldr	r3, [pc, #604]	; (800092c <main+0x2d0>)
 80006d0:	7e5a      	ldrb	r2, [r3, #25]
 80006d2:	4ba0      	ldr	r3, [pc, #640]	; (8000954 <main+0x2f8>)
 80006d4:	701a      	strb	r2, [r3, #0]
  RF_Channel_Module3 = Config_table[12][1];
 80006d6:	4b95      	ldr	r3, [pc, #596]	; (800092c <main+0x2d0>)
 80006d8:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80006dc:	4b9e      	ldr	r3, [pc, #632]	; (8000958 <main+0x2fc>)
 80006de:	701a      	strb	r2, [r3, #0]
  RF_Channel_Module4 = Config_table[18][1];
 80006e0:	4b92      	ldr	r3, [pc, #584]	; (800092c <main+0x2d0>)
 80006e2:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 80006e6:	4b9d      	ldr	r3, [pc, #628]	; (800095c <main+0x300>)
 80006e8:	701a      	strb	r2, [r3, #0]


  nRF24_Reset(Sel_B_Module1,nRF24_REG_STATUS);
 80006ea:	2107      	movs	r1, #7
 80006ec:	2001      	movs	r0, #1
 80006ee:	f003 fd8f 	bl	8004210 <nRF24_Reset>
  nRF24_Reset(Sel_B_Module2,nRF24_REG_STATUS);
 80006f2:	2107      	movs	r1, #7
 80006f4:	2002      	movs	r0, #2
 80006f6:	f003 fd8b 	bl	8004210 <nRF24_Reset>
  nRF24_Reset(Sel_B_Module3,nRF24_REG_STATUS);
 80006fa:	2107      	movs	r1, #7
 80006fc:	2003      	movs	r0, #3
 80006fe:	f003 fd87 	bl	8004210 <nRF24_Reset>
  nRF24_Reset(Sel_B_Module4,nRF24_REG_STATUS);
 8000702:	2107      	movs	r1, #7
 8000704:	2004      	movs	r0, #4
 8000706:	f003 fd83 	bl	8004210 <nRF24_Reset>
  nRF24_Reset(Sel_EL_Module,nRF24_REG_STATUS);
 800070a:	2107      	movs	r1, #7
 800070c:	2005      	movs	r0, #5
 800070e:	f003 fd7f 	bl	8004210 <nRF24_Reset>

  nRF24_Module_Setup(Sel_B_Module1, Receiver_Mode_noAA_noCRC,
 8000712:	4b8f      	ldr	r3, [pc, #572]	; (8000950 <main+0x2f4>)
 8000714:	781a      	ldrb	r2, [r3, #0]
 8000716:	4b92      	ldr	r3, [pc, #584]	; (8000960 <main+0x304>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	9302      	str	r3, [sp, #8]
 800071c:	2307      	movs	r3, #7
 800071e:	9301      	str	r3, [sp, #4]
 8000720:	4b84      	ldr	r3, [pc, #528]	; (8000934 <main+0x2d8>)
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	4b82      	ldr	r3, [pc, #520]	; (8000930 <main+0x2d4>)
 8000726:	2102      	movs	r1, #2
 8000728:	2001      	movs	r0, #1
 800072a:	f003 fd91 	bl	8004250 <nRF24_Module_Setup>
		  RF_Channel_Module1, TxAddr_B_Module1, RxAddr_B_Module1,
		  MBPS1_0dBm, Button_Packet_Size);
  nRF24_Power(Sel_B_Module1, Power_Up);
 800072e:	2101      	movs	r1, #1
 8000730:	2001      	movs	r0, #1
 8000732:	f003 ffd1 	bl	80046d8 <nRF24_Power>
  nRF24_CE_Enable(Sel_B_Module1);
 8000736:	2001      	movs	r0, #1
 8000738:	f003 fc2e 	bl	8003f98 <nRF24_CE_Enable>
  nRF24_Module_Setup(Sel_B_Module2, Receiver_Mode_noAA_noCRC,
 800073c:	4b85      	ldr	r3, [pc, #532]	; (8000954 <main+0x2f8>)
 800073e:	781a      	ldrb	r2, [r3, #0]
 8000740:	4b87      	ldr	r3, [pc, #540]	; (8000960 <main+0x304>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	9302      	str	r3, [sp, #8]
 8000746:	2307      	movs	r3, #7
 8000748:	9301      	str	r3, [sp, #4]
 800074a:	4b7c      	ldr	r3, [pc, #496]	; (800093c <main+0x2e0>)
 800074c:	9300      	str	r3, [sp, #0]
 800074e:	4b7a      	ldr	r3, [pc, #488]	; (8000938 <main+0x2dc>)
 8000750:	2102      	movs	r1, #2
 8000752:	2002      	movs	r0, #2
 8000754:	f003 fd7c 	bl	8004250 <nRF24_Module_Setup>
		  RF_Channel_Module2, TxAddr_B_Module2, RxAddr_B_Module2,
		  MBPS1_0dBm, Button_Packet_Size);
  nRF24_Power(Sel_B_Module2, Power_Up);
 8000758:	2101      	movs	r1, #1
 800075a:	2002      	movs	r0, #2
 800075c:	f003 ffbc 	bl	80046d8 <nRF24_Power>
  nRF24_CE_Enable(Sel_B_Module2);
 8000760:	2002      	movs	r0, #2
 8000762:	f003 fc19 	bl	8003f98 <nRF24_CE_Enable>
  nRF24_Module_Setup(Sel_B_Module3, Receiver_Mode_noAA_noCRC,
 8000766:	4b7c      	ldr	r3, [pc, #496]	; (8000958 <main+0x2fc>)
 8000768:	781a      	ldrb	r2, [r3, #0]
 800076a:	4b7d      	ldr	r3, [pc, #500]	; (8000960 <main+0x304>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	9302      	str	r3, [sp, #8]
 8000770:	2307      	movs	r3, #7
 8000772:	9301      	str	r3, [sp, #4]
 8000774:	4b73      	ldr	r3, [pc, #460]	; (8000944 <main+0x2e8>)
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	4b71      	ldr	r3, [pc, #452]	; (8000940 <main+0x2e4>)
 800077a:	2102      	movs	r1, #2
 800077c:	2003      	movs	r0, #3
 800077e:	f003 fd67 	bl	8004250 <nRF24_Module_Setup>
		  RF_Channel_Module3, TxAddr_B_Module3, RxAddr_B_Module3,
		  MBPS1_0dBm, Button_Packet_Size);
  nRF24_Power(Sel_B_Module3, Power_Up);
 8000782:	2101      	movs	r1, #1
 8000784:	2003      	movs	r0, #3
 8000786:	f003 ffa7 	bl	80046d8 <nRF24_Power>
  nRF24_CE_Enable(Sel_B_Module3);
 800078a:	2003      	movs	r0, #3
 800078c:	f003 fc04 	bl	8003f98 <nRF24_CE_Enable>
  nRF24_Module_Setup(Sel_B_Module4, Receiver_Mode_noAA_noCRC,
 8000790:	4b72      	ldr	r3, [pc, #456]	; (800095c <main+0x300>)
 8000792:	781a      	ldrb	r2, [r3, #0]
 8000794:	4b72      	ldr	r3, [pc, #456]	; (8000960 <main+0x304>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	9302      	str	r3, [sp, #8]
 800079a:	2307      	movs	r3, #7
 800079c:	9301      	str	r3, [sp, #4]
 800079e:	4b6b      	ldr	r3, [pc, #428]	; (800094c <main+0x2f0>)
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	4b69      	ldr	r3, [pc, #420]	; (8000948 <main+0x2ec>)
 80007a4:	2102      	movs	r1, #2
 80007a6:	2004      	movs	r0, #4
 80007a8:	f003 fd52 	bl	8004250 <nRF24_Module_Setup>
		  RF_Channel_Module4, TxAddr_B_Module4, RxAddr_B_Module4,
		  MBPS1_0dBm, Button_Packet_Size);
  nRF24_Power(Sel_B_Module4, Power_Up);
 80007ac:	2101      	movs	r1, #1
 80007ae:	2004      	movs	r0, #4
 80007b0:	f003 ff92 	bl	80046d8 <nRF24_Power>
  nRF24_CE_Enable(Sel_B_Module4);
 80007b4:	2004      	movs	r0, #4
 80007b6:	f003 fbef 	bl	8003f98 <nRF24_CE_Enable>
  nRF24_Module_Setup(Sel_EL_Module, Transmitter_Mode_noAA_noCRC,
 80007ba:	4b6a      	ldr	r3, [pc, #424]	; (8000964 <main+0x308>)
 80007bc:	781a      	ldrb	r2, [r3, #0]
 80007be:	4b6a      	ldr	r3, [pc, #424]	; (8000968 <main+0x30c>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	9302      	str	r3, [sp, #8]
 80007c4:	2307      	movs	r3, #7
 80007c6:	9301      	str	r3, [sp, #4]
 80007c8:	4b68      	ldr	r3, [pc, #416]	; (800096c <main+0x310>)
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	4b68      	ldr	r3, [pc, #416]	; (8000970 <main+0x314>)
 80007ce:	2105      	movs	r1, #5
 80007d0:	2005      	movs	r0, #5
 80007d2:	f003 fd3d 	bl	8004250 <nRF24_Module_Setup>
		  RF_Channel_EL_Module, TxAddr_EL_Module, RxAddr_EL_Module,
		  MBPS1_0dBm, EdgeLED_Packet_Size);
  nRF24_Power(Sel_EL_Module, Power_Up);
 80007d6:	2101      	movs	r1, #1
 80007d8:	2005      	movs	r0, #5
 80007da:	f003 ff7d 	bl	80046d8 <nRF24_Power>
  nRF24_CE_Enable(Sel_EL_Module);
 80007de:	2005      	movs	r0, #5
 80007e0:	f003 fbda 	bl	8003f98 <nRF24_CE_Enable>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  time1 = HAL_GetTick();
 80007e4:	f001 f8a8 	bl	8001938 <HAL_GetTick>
 80007e8:	4603      	mov	r3, r0
 80007ea:	4a62      	ldr	r2, [pc, #392]	; (8000974 <main+0x318>)
 80007ec:	6013      	str	r3, [r2, #0]
	  if(HAL_UART_Receive(&huart2, &Uart_Cmd, 1, 10) == HAL_OK)
 80007ee:	230a      	movs	r3, #10
 80007f0:	2201      	movs	r2, #1
 80007f2:	4961      	ldr	r1, [pc, #388]	; (8000978 <main+0x31c>)
 80007f4:	4861      	ldr	r0, [pc, #388]	; (800097c <main+0x320>)
 80007f6:	f002 ffce 	bl	8003796 <HAL_UART_Receive>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d147      	bne.n	8000890 <main+0x234>
	  {
		  if(Uart_Cmd == 'W')
 8000800:	4b5d      	ldr	r3, [pc, #372]	; (8000978 <main+0x31c>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b57      	cmp	r3, #87	; 0x57
 8000806:	d10d      	bne.n	8000824 <main+0x1c8>
		  {
			  EdgeLED_Color(1, 255, 255, 255, EdgeLED_Packet);
 8000808:	4b5d      	ldr	r3, [pc, #372]	; (8000980 <main+0x324>)
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	23ff      	movs	r3, #255	; 0xff
 800080e:	22ff      	movs	r2, #255	; 0xff
 8000810:	21ff      	movs	r1, #255	; 0xff
 8000812:	2001      	movs	r0, #1
 8000814:	f7ff feb6 	bl	8000584 <EdgeLED_Color>
			  HAL_UART_Transmit(&huart2, (uint8_t*)"\nWHITE\n",7, 10);
 8000818:	230a      	movs	r3, #10
 800081a:	2207      	movs	r2, #7
 800081c:	4959      	ldr	r1, [pc, #356]	; (8000984 <main+0x328>)
 800081e:	4857      	ldr	r0, [pc, #348]	; (800097c <main+0x320>)
 8000820:	f002 ff27 	bl	8003672 <HAL_UART_Transmit>
		  }
		  if(Uart_Cmd == 'R')
 8000824:	4b54      	ldr	r3, [pc, #336]	; (8000978 <main+0x31c>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b52      	cmp	r3, #82	; 0x52
 800082a:	d10d      	bne.n	8000848 <main+0x1ec>
		  {
			  EdgeLED_Color(1, 0, 255, 0, EdgeLED_Packet);
 800082c:	4b54      	ldr	r3, [pc, #336]	; (8000980 <main+0x324>)
 800082e:	9300      	str	r3, [sp, #0]
 8000830:	2300      	movs	r3, #0
 8000832:	22ff      	movs	r2, #255	; 0xff
 8000834:	2100      	movs	r1, #0
 8000836:	2001      	movs	r0, #1
 8000838:	f7ff fea4 	bl	8000584 <EdgeLED_Color>
			  HAL_UART_Transmit(&huart2, (uint8_t*)"\nRED\n",5, 10);
 800083c:	230a      	movs	r3, #10
 800083e:	2205      	movs	r2, #5
 8000840:	4951      	ldr	r1, [pc, #324]	; (8000988 <main+0x32c>)
 8000842:	484e      	ldr	r0, [pc, #312]	; (800097c <main+0x320>)
 8000844:	f002 ff15 	bl	8003672 <HAL_UART_Transmit>
		  }
		  if(Uart_Cmd == 'B')
 8000848:	4b4b      	ldr	r3, [pc, #300]	; (8000978 <main+0x31c>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b42      	cmp	r3, #66	; 0x42
 800084e:	d10d      	bne.n	800086c <main+0x210>
		  {
			  EdgeLED_Color(1, 0, 0, 255, EdgeLED_Packet);
 8000850:	4b4b      	ldr	r3, [pc, #300]	; (8000980 <main+0x324>)
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	23ff      	movs	r3, #255	; 0xff
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	2001      	movs	r0, #1
 800085c:	f7ff fe92 	bl	8000584 <EdgeLED_Color>
			  HAL_UART_Transmit(&huart2, (uint8_t*)"\nBLUE\n",6, 10);
 8000860:	230a      	movs	r3, #10
 8000862:	2206      	movs	r2, #6
 8000864:	4949      	ldr	r1, [pc, #292]	; (800098c <main+0x330>)
 8000866:	4845      	ldr	r0, [pc, #276]	; (800097c <main+0x320>)
 8000868:	f002 ff03 	bl	8003672 <HAL_UART_Transmit>
		  }
		  if(Uart_Cmd == 'G')
 800086c:	4b42      	ldr	r3, [pc, #264]	; (8000978 <main+0x31c>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b47      	cmp	r3, #71	; 0x47
 8000872:	d10d      	bne.n	8000890 <main+0x234>
		  {
			  EdgeLED_Color(1, 255, 0, 0, EdgeLED_Packet);
 8000874:	4b42      	ldr	r3, [pc, #264]	; (8000980 <main+0x324>)
 8000876:	9300      	str	r3, [sp, #0]
 8000878:	2300      	movs	r3, #0
 800087a:	2200      	movs	r2, #0
 800087c:	21ff      	movs	r1, #255	; 0xff
 800087e:	2001      	movs	r0, #1
 8000880:	f7ff fe80 	bl	8000584 <EdgeLED_Color>
			  HAL_UART_Transmit(&huart2, (uint8_t*)"\nGREEN\n",7, 10);
 8000884:	230a      	movs	r3, #10
 8000886:	2207      	movs	r2, #7
 8000888:	4941      	ldr	r1, [pc, #260]	; (8000990 <main+0x334>)
 800088a:	483c      	ldr	r0, [pc, #240]	; (800097c <main+0x320>)
 800088c:	f002 fef1 	bl	8003672 <HAL_UART_Transmit>
		  }
	  }
	  time2 = HAL_GetTick();
 8000890:	f001 f852 	bl	8001938 <HAL_GetTick>
 8000894:	4603      	mov	r3, r0
 8000896:	4a3f      	ldr	r2, [pc, #252]	; (8000994 <main+0x338>)
 8000898:	6013      	str	r3, [r2, #0]
	  if (__HAL_SPI_GET_FLAG(&ESP32_hspi3, SPI_FLAG_RXNE))
 800089a:	4b3f      	ldr	r3, [pc, #252]	; (8000998 <main+0x33c>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	f003 0301 	and.w	r3, r3, #1
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d107      	bne.n	80008b8 <main+0x25c>
	  {
	      // Read the received data from the SPI data register
		  HAL_SPI_Receive(&ESP32_hspi3, ESP32_Packet, ESP32_Packet_Size, 100);
 80008a8:	4b3c      	ldr	r3, [pc, #240]	; (800099c <main+0x340>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	2364      	movs	r3, #100	; 0x64
 80008b0:	493b      	ldr	r1, [pc, #236]	; (80009a0 <main+0x344>)
 80008b2:	4839      	ldr	r0, [pc, #228]	; (8000998 <main+0x33c>)
 80008b4:	f002 f98f 	bl	8002bd6 <HAL_SPI_Receive>
	  }
	  time3 = HAL_GetTick();
 80008b8:	f001 f83e 	bl	8001938 <HAL_GetTick>
 80008bc:	4603      	mov	r3, r0
 80008be:	4a39      	ldr	r2, [pc, #228]	; (80009a4 <main+0x348>)
 80008c0:	6013      	str	r3, [r2, #0]

	  if (Data_In_Module1 == 1)
 80008c2:	4b39      	ldr	r3, [pc, #228]	; (80009a8 <main+0x34c>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	f040 817b 	bne.w	8000bc2 <main+0x566>
	  {
		  key1_time1 = HAL_GetTick();
 80008cc:	f001 f834 	bl	8001938 <HAL_GetTick>
 80008d0:	4603      	mov	r3, r0
 80008d2:	4a36      	ldr	r2, [pc, #216]	; (80009ac <main+0x350>)
 80008d4:	6013      	str	r3, [r2, #0]
#ifdef Debug
		  nRF24_Receive_Report(Sel_B_Module1);
#endif
		  Module1_Packet_Count = 0;
 80008d6:	4b36      	ldr	r3, [pc, #216]	; (80009b0 <main+0x354>)
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]

		  uint8_t Data_In_RX_FIFO = 1;
 80008dc:	2301      	movs	r3, #1
 80008de:	75fb      	strb	r3, [r7, #23]
		  //Reading the received packet in FIFO
		  //Checking the status of first bit of FIFO_STATUS
		  while(Data_In_RX_FIFO == 1)
 80008e0:	e01e      	b.n	8000920 <main+0x2c4>
		  {
			  uint8_t FIFO_Reg = nRF24_ReadReg(Sel_B_Module1, nRF24_REG_FIFO_STATUS);
 80008e2:	2117      	movs	r1, #23
 80008e4:	2001      	movs	r0, #1
 80008e6:	f003 fc55 	bl	8004194 <nRF24_ReadReg>
 80008ea:	4603      	mov	r3, r0
 80008ec:	73fb      	strb	r3, [r7, #15]
			  if((FIFO_Reg & 1) == 0)
 80008ee:	7bfb      	ldrb	r3, [r7, #15]
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d111      	bne.n	800091c <main+0x2c0>
			  {
				  nRF24_Receive(Sel_B_Module1, Module1_Packet[Module1_Packet_Count], Button_Packet_Size);
 80008f8:	4b2d      	ldr	r3, [pc, #180]	; (80009b0 <main+0x354>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	011b      	lsls	r3, r3, #4
 80008fe:	4a2d      	ldr	r2, [pc, #180]	; (80009b4 <main+0x358>)
 8000900:	4413      	add	r3, r2
 8000902:	4a17      	ldr	r2, [pc, #92]	; (8000960 <main+0x304>)
 8000904:	7812      	ldrb	r2, [r2, #0]
 8000906:	4619      	mov	r1, r3
 8000908:	2001      	movs	r0, #1
 800090a:	f003 fe67 	bl	80045dc <nRF24_Receive>
				  Module1_Packet_Count++;
 800090e:	4b28      	ldr	r3, [pc, #160]	; (80009b0 <main+0x354>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	3301      	adds	r3, #1
 8000914:	b2da      	uxtb	r2, r3
 8000916:	4b26      	ldr	r3, [pc, #152]	; (80009b0 <main+0x354>)
 8000918:	701a      	strb	r2, [r3, #0]
 800091a:	e001      	b.n	8000920 <main+0x2c4>
			  }
			  else
			  {
				  Data_In_RX_FIFO = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	75fb      	strb	r3, [r7, #23]
		  while(Data_In_RX_FIFO == 1)
 8000920:	7dfb      	ldrb	r3, [r7, #23]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d0dd      	beq.n	80008e2 <main+0x286>
			  }
		  }
		  HAL_UART_Transmit(&huart2, (uint8_t*)"\n**********************\n\n",25, 100);
#endif

		  for (uint8_t i = 0; i < Module1_Packet_Count; i++)
 8000926:	2300      	movs	r3, #0
 8000928:	75bb      	strb	r3, [r7, #22]
 800092a:	e097      	b.n	8000a5c <main+0x400>
 800092c:	20000000 	.word	0x20000000
 8000930:	2000009c 	.word	0x2000009c
 8000934:	200000a4 	.word	0x200000a4
 8000938:	200000ac 	.word	0x200000ac
 800093c:	200000b4 	.word	0x200000b4
 8000940:	200000bc 	.word	0x200000bc
 8000944:	200000c4 	.word	0x200000c4
 8000948:	200000cc 	.word	0x200000cc
 800094c:	200000d4 	.word	0x200000d4
 8000950:	20000460 	.word	0x20000460
 8000954:	20000461 	.word	0x20000461
 8000958:	20000462 	.word	0x20000462
 800095c:	20000463 	.word	0x20000463
 8000960:	20000098 	.word	0x20000098
 8000964:	200000e9 	.word	0x200000e9
 8000968:	20000099 	.word	0x20000099
 800096c:	200000e4 	.word	0x200000e4
 8000970:	200000dc 	.word	0x200000dc
 8000974:	20000478 	.word	0x20000478
 8000978:	20000464 	.word	0x20000464
 800097c:	20000280 	.word	0x20000280
 8000980:	20000444 	.word	0x20000444
 8000984:	0800508c 	.word	0x0800508c
 8000988:	08005094 	.word	0x08005094
 800098c:	0800509c 	.word	0x0800509c
 8000990:	080050a4 	.word	0x080050a4
 8000994:	2000047c 	.word	0x2000047c
 8000998:	20000228 	.word	0x20000228
 800099c:	2000009a 	.word	0x2000009a
 80009a0:	20000458 	.word	0x20000458
 80009a4:	20000480 	.word	0x20000480
 80009a8:	20000466 	.word	0x20000466
 80009ac:	2000048c 	.word	0x2000048c
 80009b0:	2000046a 	.word	0x2000046a
 80009b4:	200002c4 	.word	0x200002c4
		  {
			  //Checking which Button has sent the data
			  Rec_Button_Number = Module1_Packet[i][0];
 80009b8:	7dbb      	ldrb	r3, [r7, #22]
 80009ba:	4aae      	ldr	r2, [pc, #696]	; (8000c74 <main+0x618>)
 80009bc:	011b      	lsls	r3, r3, #4
 80009be:	4413      	add	r3, r2
 80009c0:	781a      	ldrb	r2, [r3, #0]
 80009c2:	4bad      	ldr	r3, [pc, #692]	; (8000c78 <main+0x61c>)
 80009c4:	701a      	strb	r2, [r3, #0]

			  //Checking which key on the button has been pressed
			  Key_Pressed = Module1_Packet[i][1];
 80009c6:	7dbb      	ldrb	r3, [r7, #22]
 80009c8:	4aaa      	ldr	r2, [pc, #680]	; (8000c74 <main+0x618>)
 80009ca:	011b      	lsls	r3, r3, #4
 80009cc:	4413      	add	r3, r2
 80009ce:	3301      	adds	r3, #1
 80009d0:	781a      	ldrb	r2, [r3, #0]
 80009d2:	4baa      	ldr	r3, [pc, #680]	; (8000c7c <main+0x620>)
 80009d4:	701a      	strb	r2, [r3, #0]

		      //Sending Color to the specified EdgeLED based on the key pressed
			  switch(Key_Pressed)
 80009d6:	4ba9      	ldr	r3, [pc, #676]	; (8000c7c <main+0x620>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	3b01      	subs	r3, #1
 80009dc:	2b03      	cmp	r3, #3
 80009de:	d833      	bhi.n	8000a48 <main+0x3ec>
 80009e0:	a201      	add	r2, pc, #4	; (adr r2, 80009e8 <main+0x38c>)
 80009e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e6:	bf00      	nop
 80009e8:	080009f9 	.word	0x080009f9
 80009ec:	08000a0d 	.word	0x08000a0d
 80009f0:	08000a21 	.word	0x08000a21
 80009f4:	08000a35 	.word	0x08000a35
			  {
				case 1:
					EdgeLED_Color(Rec_Button_Number, 255, 255, 255, EdgeLED_Packet);
 80009f8:	4b9f      	ldr	r3, [pc, #636]	; (8000c78 <main+0x61c>)
 80009fa:	7818      	ldrb	r0, [r3, #0]
 80009fc:	4ba0      	ldr	r3, [pc, #640]	; (8000c80 <main+0x624>)
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	23ff      	movs	r3, #255	; 0xff
 8000a02:	22ff      	movs	r2, #255	; 0xff
 8000a04:	21ff      	movs	r1, #255	; 0xff
 8000a06:	f7ff fdbd 	bl	8000584 <EdgeLED_Color>
					break;
 8000a0a:	e01e      	b.n	8000a4a <main+0x3ee>
				case 2:
				    EdgeLED_Color(Rec_Button_Number, 255,   0,   0, EdgeLED_Packet);
 8000a0c:	4b9a      	ldr	r3, [pc, #616]	; (8000c78 <main+0x61c>)
 8000a0e:	7818      	ldrb	r0, [r3, #0]
 8000a10:	4b9b      	ldr	r3, [pc, #620]	; (8000c80 <main+0x624>)
 8000a12:	9300      	str	r3, [sp, #0]
 8000a14:	2300      	movs	r3, #0
 8000a16:	2200      	movs	r2, #0
 8000a18:	21ff      	movs	r1, #255	; 0xff
 8000a1a:	f7ff fdb3 	bl	8000584 <EdgeLED_Color>
					break;
 8000a1e:	e014      	b.n	8000a4a <main+0x3ee>
				case 3:
					EdgeLED_Color(Rec_Button_Number,   0, 255,   0, EdgeLED_Packet);
 8000a20:	4b95      	ldr	r3, [pc, #596]	; (8000c78 <main+0x61c>)
 8000a22:	7818      	ldrb	r0, [r3, #0]
 8000a24:	4b96      	ldr	r3, [pc, #600]	; (8000c80 <main+0x624>)
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	2300      	movs	r3, #0
 8000a2a:	22ff      	movs	r2, #255	; 0xff
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	f7ff fda9 	bl	8000584 <EdgeLED_Color>
					break;
 8000a32:	e00a      	b.n	8000a4a <main+0x3ee>
				case 4:
				    EdgeLED_Color(Rec_Button_Number,   0,   0, 255, EdgeLED_Packet);
 8000a34:	4b90      	ldr	r3, [pc, #576]	; (8000c78 <main+0x61c>)
 8000a36:	7818      	ldrb	r0, [r3, #0]
 8000a38:	4b91      	ldr	r3, [pc, #580]	; (8000c80 <main+0x624>)
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	23ff      	movs	r3, #255	; 0xff
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2100      	movs	r1, #0
 8000a42:	f7ff fd9f 	bl	8000584 <EdgeLED_Color>
					break;
 8000a46:	e000      	b.n	8000a4a <main+0x3ee>
				default:
				    break;
 8000a48:	bf00      	nop
			  }

			  Rec_Button_Number = 255;
 8000a4a:	4b8b      	ldr	r3, [pc, #556]	; (8000c78 <main+0x61c>)
 8000a4c:	22ff      	movs	r2, #255	; 0xff
 8000a4e:	701a      	strb	r2, [r3, #0]
			  Key_Pressed = 255;
 8000a50:	4b8a      	ldr	r3, [pc, #552]	; (8000c7c <main+0x620>)
 8000a52:	22ff      	movs	r2, #255	; 0xff
 8000a54:	701a      	strb	r2, [r3, #0]
		  for (uint8_t i = 0; i < Module1_Packet_Count; i++)
 8000a56:	7dbb      	ldrb	r3, [r7, #22]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	75bb      	strb	r3, [r7, #22]
 8000a5c:	4b89      	ldr	r3, [pc, #548]	; (8000c84 <main+0x628>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	7dba      	ldrb	r2, [r7, #22]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d3a8      	bcc.n	80009b8 <main+0x35c>
		  }

		  Data_In_Module1 = 0;
 8000a66:	4b88      	ldr	r3, [pc, #544]	; (8000c88 <main+0x62c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]
		  key1_time2 = HAL_GetTick();
 8000a6c:	f000 ff64 	bl	8001938 <HAL_GetTick>
 8000a70:	4603      	mov	r3, r0
 8000a72:	4a86      	ldr	r2, [pc, #536]	; (8000c8c <main+0x630>)
 8000a74:	6013      	str	r3, [r2, #0]

		  time_2_1 = time2 - time1;
 8000a76:	4b86      	ldr	r3, [pc, #536]	; (8000c90 <main+0x634>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	4b86      	ldr	r3, [pc, #536]	; (8000c94 <main+0x638>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	4a85      	ldr	r2, [pc, #532]	; (8000c98 <main+0x63c>)
 8000a82:	6013      	str	r3, [r2, #0]
		  time_3_2 = time3 - time2;
 8000a84:	4b85      	ldr	r3, [pc, #532]	; (8000c9c <main+0x640>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4b81      	ldr	r3, [pc, #516]	; (8000c90 <main+0x634>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	4a84      	ldr	r2, [pc, #528]	; (8000ca0 <main+0x644>)
 8000a90:	6013      	str	r3, [r2, #0]
		  interrupt_time = interrupt_time2 - interrupt_time1;
 8000a92:	4b84      	ldr	r3, [pc, #528]	; (8000ca4 <main+0x648>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	4b84      	ldr	r3, [pc, #528]	; (8000ca8 <main+0x64c>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	4a83      	ldr	r2, [pc, #524]	; (8000cac <main+0x650>)
 8000a9e:	6013      	str	r3, [r2, #0]
		  key1_time = key1_time2 - key1_time1;
 8000aa0:	4b7a      	ldr	r3, [pc, #488]	; (8000c8c <main+0x630>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b82      	ldr	r3, [pc, #520]	; (8000cb0 <main+0x654>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	4a82      	ldr	r2, [pc, #520]	; (8000cb4 <main+0x658>)
 8000aac:	6013      	str	r3, [r2, #0]
		  key1_time1 = 0;
 8000aae:	4b80      	ldr	r3, [pc, #512]	; (8000cb0 <main+0x654>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
		  key1_time2 = 0;
 8000ab4:	4b75      	ldr	r3, [pc, #468]	; (8000c8c <main+0x630>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]

		  char time_buffer[10];  // Buffer to hold the converted string

		  sprintf(time_buffer, "%d", time_2_1);  // Convert integer to string
 8000aba:	4b77      	ldr	r3, [pc, #476]	; (8000c98 <main+0x63c>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	463b      	mov	r3, r7
 8000ac0:	497d      	ldr	r1, [pc, #500]	; (8000cb8 <main+0x65c>)
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f003 fe68 	bl	8004798 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)"time_2_1: ", 10, 1000);
 8000ac8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000acc:	220a      	movs	r2, #10
 8000ace:	497b      	ldr	r1, [pc, #492]	; (8000cbc <main+0x660>)
 8000ad0:	487b      	ldr	r0, [pc, #492]	; (8000cc0 <main+0x664>)
 8000ad2:	f002 fdce 	bl	8003672 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, (uint8_t*)time_buffer, strlen(time_buffer), 1000);
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fb79 	bl	80001d0 <strlen>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	4639      	mov	r1, r7
 8000ae4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae8:	4875      	ldr	r0, [pc, #468]	; (8000cc0 <main+0x664>)
 8000aea:	f002 fdc2 	bl	8003672 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, (uint8_t*)"\n", 1, 1000);
 8000aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af2:	2201      	movs	r2, #1
 8000af4:	4973      	ldr	r1, [pc, #460]	; (8000cc4 <main+0x668>)
 8000af6:	4872      	ldr	r0, [pc, #456]	; (8000cc0 <main+0x664>)
 8000af8:	f002 fdbb 	bl	8003672 <HAL_UART_Transmit>

		  sprintf(time_buffer, "%d", time_3_2);  // Convert integer to string
 8000afc:	4b68      	ldr	r3, [pc, #416]	; (8000ca0 <main+0x644>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	463b      	mov	r3, r7
 8000b02:	496d      	ldr	r1, [pc, #436]	; (8000cb8 <main+0x65c>)
 8000b04:	4618      	mov	r0, r3
 8000b06:	f003 fe47 	bl	8004798 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)"time_3_2: ", 10, 1000);
 8000b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0e:	220a      	movs	r2, #10
 8000b10:	496d      	ldr	r1, [pc, #436]	; (8000cc8 <main+0x66c>)
 8000b12:	486b      	ldr	r0, [pc, #428]	; (8000cc0 <main+0x664>)
 8000b14:	f002 fdad 	bl	8003672 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, (uint8_t*)time_buffer, strlen(time_buffer), 1000);
 8000b18:	463b      	mov	r3, r7
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fb58 	bl	80001d0 <strlen>
 8000b20:	4603      	mov	r3, r0
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	4639      	mov	r1, r7
 8000b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2a:	4865      	ldr	r0, [pc, #404]	; (8000cc0 <main+0x664>)
 8000b2c:	f002 fda1 	bl	8003672 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, (uint8_t*)"\n", 1, 1000);
 8000b30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b34:	2201      	movs	r2, #1
 8000b36:	4963      	ldr	r1, [pc, #396]	; (8000cc4 <main+0x668>)
 8000b38:	4861      	ldr	r0, [pc, #388]	; (8000cc0 <main+0x664>)
 8000b3a:	f002 fd9a 	bl	8003672 <HAL_UART_Transmit>

		  sprintf(time_buffer, "%d", key1_time);  // Convert integer to string
 8000b3e:	4b5d      	ldr	r3, [pc, #372]	; (8000cb4 <main+0x658>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	463b      	mov	r3, r7
 8000b44:	495c      	ldr	r1, [pc, #368]	; (8000cb8 <main+0x65c>)
 8000b46:	4618      	mov	r0, r3
 8000b48:	f003 fe26 	bl	8004798 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)"key1_time: ", 11, 1000);
 8000b4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b50:	220b      	movs	r2, #11
 8000b52:	495e      	ldr	r1, [pc, #376]	; (8000ccc <main+0x670>)
 8000b54:	485a      	ldr	r0, [pc, #360]	; (8000cc0 <main+0x664>)
 8000b56:	f002 fd8c 	bl	8003672 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, (uint8_t*)time_buffer, strlen(time_buffer), 1000);
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff fb37 	bl	80001d0 <strlen>
 8000b62:	4603      	mov	r3, r0
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	4639      	mov	r1, r7
 8000b68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6c:	4854      	ldr	r0, [pc, #336]	; (8000cc0 <main+0x664>)
 8000b6e:	f002 fd80 	bl	8003672 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, (uint8_t*)"\n", 1, 1000);
 8000b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b76:	2201      	movs	r2, #1
 8000b78:	4952      	ldr	r1, [pc, #328]	; (8000cc4 <main+0x668>)
 8000b7a:	4851      	ldr	r0, [pc, #324]	; (8000cc0 <main+0x664>)
 8000b7c:	f002 fd79 	bl	8003672 <HAL_UART_Transmit>

		  sprintf(time_buffer, "%d", interrupt_time);  // Convert integer to string
 8000b80:	4b4a      	ldr	r3, [pc, #296]	; (8000cac <main+0x650>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	463b      	mov	r3, r7
 8000b86:	494c      	ldr	r1, [pc, #304]	; (8000cb8 <main+0x65c>)
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f003 fe05 	bl	8004798 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)"interrupt_time: ", 16, 1000);
 8000b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b92:	2210      	movs	r2, #16
 8000b94:	494e      	ldr	r1, [pc, #312]	; (8000cd0 <main+0x674>)
 8000b96:	484a      	ldr	r0, [pc, #296]	; (8000cc0 <main+0x664>)
 8000b98:	f002 fd6b 	bl	8003672 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, (uint8_t*)time_buffer, strlen(time_buffer), 1000);
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fb16 	bl	80001d0 <strlen>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	4639      	mov	r1, r7
 8000baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bae:	4844      	ldr	r0, [pc, #272]	; (8000cc0 <main+0x664>)
 8000bb0:	f002 fd5f 	bl	8003672 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, (uint8_t*)"\n", 1, 1000);
 8000bb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb8:	2201      	movs	r2, #1
 8000bba:	4942      	ldr	r1, [pc, #264]	; (8000cc4 <main+0x668>)
 8000bbc:	4840      	ldr	r0, [pc, #256]	; (8000cc0 <main+0x664>)
 8000bbe:	f002 fd58 	bl	8003672 <HAL_UART_Transmit>
	  }


	  if (Data_In_Module2 == 1)
 8000bc2:	4b44      	ldr	r3, [pc, #272]	; (8000cd4 <main+0x678>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	f040 80bd 	bne.w	8000d46 <main+0x6ea>
	  {
#ifdef Debug
		  nRF24_Receive_Report(Sel_B_Module2);
#endif
		  Module2_Packet_Count = 0;
 8000bcc:	4b42      	ldr	r3, [pc, #264]	; (8000cd8 <main+0x67c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]

		  uint8_t Data_In_RX_FIFO = 1;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	757b      	strb	r3, [r7, #21]
		  //Reading the received packet in FIFO
		  //Checking the status of first bit of FIFO_STATUS
		  while(Data_In_RX_FIFO == 1)
 8000bd6:	e01e      	b.n	8000c16 <main+0x5ba>
		  {
			  uint8_t FIFO_Reg = nRF24_ReadReg(Sel_B_Module2, nRF24_REG_FIFO_STATUS);
 8000bd8:	2117      	movs	r1, #23
 8000bda:	2002      	movs	r0, #2
 8000bdc:	f003 fada 	bl	8004194 <nRF24_ReadReg>
 8000be0:	4603      	mov	r3, r0
 8000be2:	73bb      	strb	r3, [r7, #14]
			  if((FIFO_Reg & 1) == 0)
 8000be4:	7bbb      	ldrb	r3, [r7, #14]
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d111      	bne.n	8000c12 <main+0x5b6>
			  {
				  nRF24_Receive(Sel_B_Module2, Module2_Packet[Module2_Packet_Count], Button_Packet_Size);
 8000bee:	4b3a      	ldr	r3, [pc, #232]	; (8000cd8 <main+0x67c>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	011b      	lsls	r3, r3, #4
 8000bf4:	4a39      	ldr	r2, [pc, #228]	; (8000cdc <main+0x680>)
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4a39      	ldr	r2, [pc, #228]	; (8000ce0 <main+0x684>)
 8000bfa:	7812      	ldrb	r2, [r2, #0]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	2002      	movs	r0, #2
 8000c00:	f003 fcec 	bl	80045dc <nRF24_Receive>
				  Module2_Packet_Count++;
 8000c04:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <main+0x67c>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	4b32      	ldr	r3, [pc, #200]	; (8000cd8 <main+0x67c>)
 8000c0e:	701a      	strb	r2, [r3, #0]
 8000c10:	e001      	b.n	8000c16 <main+0x5ba>
			  }
			  else
			  {
				  Data_In_RX_FIFO = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	757b      	strb	r3, [r7, #21]
		  while(Data_In_RX_FIFO == 1)
 8000c16:	7d7b      	ldrb	r3, [r7, #21]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d0dd      	beq.n	8000bd8 <main+0x57c>
			  }
		  }
		  HAL_UART_Transmit(&huart2, (uint8_t*)"\n**********************\n\n",25, 100);
#endif

		  for (uint8_t i = 0; i < Module2_Packet_Count; i++)
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	753b      	strb	r3, [r7, #20]
 8000c20:	e088      	b.n	8000d34 <main+0x6d8>
		  {
			  //Checking which Button has sent the data
			  Rec_Button_Number = Module2_Packet[i][0];
 8000c22:	7d3b      	ldrb	r3, [r7, #20]
 8000c24:	4a2d      	ldr	r2, [pc, #180]	; (8000cdc <main+0x680>)
 8000c26:	011b      	lsls	r3, r3, #4
 8000c28:	4413      	add	r3, r2
 8000c2a:	781a      	ldrb	r2, [r3, #0]
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <main+0x61c>)
 8000c2e:	701a      	strb	r2, [r3, #0]

			  //Checking which key on the button has been pressed
			  Key_Pressed = Module2_Packet[i][1];
 8000c30:	7d3b      	ldrb	r3, [r7, #20]
 8000c32:	4a2a      	ldr	r2, [pc, #168]	; (8000cdc <main+0x680>)
 8000c34:	011b      	lsls	r3, r3, #4
 8000c36:	4413      	add	r3, r2
 8000c38:	3301      	adds	r3, #1
 8000c3a:	781a      	ldrb	r2, [r3, #0]
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <main+0x620>)
 8000c3e:	701a      	strb	r2, [r3, #0]

		      //Sending Color to the specified EdgeLED based on the key pressed
			  switch(Key_Pressed)
 8000c40:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <main+0x620>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	3b01      	subs	r3, #1
 8000c46:	2b03      	cmp	r3, #3
 8000c48:	d86a      	bhi.n	8000d20 <main+0x6c4>
 8000c4a:	a201      	add	r2, pc, #4	; (adr r2, 8000c50 <main+0x5f4>)
 8000c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c50:	08000c61 	.word	0x08000c61
 8000c54:	08000ce5 	.word	0x08000ce5
 8000c58:	08000cf9 	.word	0x08000cf9
 8000c5c:	08000d0d 	.word	0x08000d0d
			  {
				case 1:
					EdgeLED_Color(Rec_Button_Number, 255, 255, 255, EdgeLED_Packet);
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <main+0x61c>)
 8000c62:	7818      	ldrb	r0, [r3, #0]
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <main+0x624>)
 8000c66:	9300      	str	r3, [sp, #0]
 8000c68:	23ff      	movs	r3, #255	; 0xff
 8000c6a:	22ff      	movs	r2, #255	; 0xff
 8000c6c:	21ff      	movs	r1, #255	; 0xff
 8000c6e:	f7ff fc89 	bl	8000584 <EdgeLED_Color>
					break;
 8000c72:	e056      	b.n	8000d22 <main+0x6c6>
 8000c74:	200002c4 	.word	0x200002c4
 8000c78:	200000ea 	.word	0x200000ea
 8000c7c:	20000465 	.word	0x20000465
 8000c80:	20000444 	.word	0x20000444
 8000c84:	2000046a 	.word	0x2000046a
 8000c88:	20000466 	.word	0x20000466
 8000c8c:	20000490 	.word	0x20000490
 8000c90:	2000047c 	.word	0x2000047c
 8000c94:	20000478 	.word	0x20000478
 8000c98:	20000484 	.word	0x20000484
 8000c9c:	20000480 	.word	0x20000480
 8000ca0:	20000488 	.word	0x20000488
 8000ca4:	20000474 	.word	0x20000474
 8000ca8:	20000470 	.word	0x20000470
 8000cac:	20000498 	.word	0x20000498
 8000cb0:	2000048c 	.word	0x2000048c
 8000cb4:	20000494 	.word	0x20000494
 8000cb8:	080050ac 	.word	0x080050ac
 8000cbc:	080050b0 	.word	0x080050b0
 8000cc0:	20000280 	.word	0x20000280
 8000cc4:	080050bc 	.word	0x080050bc
 8000cc8:	080050c0 	.word	0x080050c0
 8000ccc:	080050cc 	.word	0x080050cc
 8000cd0:	080050d8 	.word	0x080050d8
 8000cd4:	20000467 	.word	0x20000467
 8000cd8:	2000046b 	.word	0x2000046b
 8000cdc:	20000324 	.word	0x20000324
 8000ce0:	20000098 	.word	0x20000098
				case 2:
				    EdgeLED_Color(Rec_Button_Number, 255,   0,   0, EdgeLED_Packet);
 8000ce4:	4ba2      	ldr	r3, [pc, #648]	; (8000f70 <main+0x914>)
 8000ce6:	7818      	ldrb	r0, [r3, #0]
 8000ce8:	4ba2      	ldr	r3, [pc, #648]	; (8000f74 <main+0x918>)
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	2300      	movs	r3, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	21ff      	movs	r1, #255	; 0xff
 8000cf2:	f7ff fc47 	bl	8000584 <EdgeLED_Color>
					break;
 8000cf6:	e014      	b.n	8000d22 <main+0x6c6>
				case 3:
					EdgeLED_Color(Rec_Button_Number,   0, 255,   0, EdgeLED_Packet);
 8000cf8:	4b9d      	ldr	r3, [pc, #628]	; (8000f70 <main+0x914>)
 8000cfa:	7818      	ldrb	r0, [r3, #0]
 8000cfc:	4b9d      	ldr	r3, [pc, #628]	; (8000f74 <main+0x918>)
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	2300      	movs	r3, #0
 8000d02:	22ff      	movs	r2, #255	; 0xff
 8000d04:	2100      	movs	r1, #0
 8000d06:	f7ff fc3d 	bl	8000584 <EdgeLED_Color>
					break;
 8000d0a:	e00a      	b.n	8000d22 <main+0x6c6>
				case 4:
				    EdgeLED_Color(Rec_Button_Number,   0,   0, 255, EdgeLED_Packet);
 8000d0c:	4b98      	ldr	r3, [pc, #608]	; (8000f70 <main+0x914>)
 8000d0e:	7818      	ldrb	r0, [r3, #0]
 8000d10:	4b98      	ldr	r3, [pc, #608]	; (8000f74 <main+0x918>)
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	23ff      	movs	r3, #255	; 0xff
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	f7ff fc33 	bl	8000584 <EdgeLED_Color>
					break;
 8000d1e:	e000      	b.n	8000d22 <main+0x6c6>
				default:
				    break;
 8000d20:	bf00      	nop
			  }

			  Rec_Button_Number = 255;
 8000d22:	4b93      	ldr	r3, [pc, #588]	; (8000f70 <main+0x914>)
 8000d24:	22ff      	movs	r2, #255	; 0xff
 8000d26:	701a      	strb	r2, [r3, #0]
			  Key_Pressed = 255;
 8000d28:	4b93      	ldr	r3, [pc, #588]	; (8000f78 <main+0x91c>)
 8000d2a:	22ff      	movs	r2, #255	; 0xff
 8000d2c:	701a      	strb	r2, [r3, #0]
		  for (uint8_t i = 0; i < Module2_Packet_Count; i++)
 8000d2e:	7d3b      	ldrb	r3, [r7, #20]
 8000d30:	3301      	adds	r3, #1
 8000d32:	753b      	strb	r3, [r7, #20]
 8000d34:	4b91      	ldr	r3, [pc, #580]	; (8000f7c <main+0x920>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	7d3a      	ldrb	r2, [r7, #20]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f4ff af71 	bcc.w	8000c22 <main+0x5c6>
		  }

		  Data_In_Module2 = 0;
 8000d40:	4b8f      	ldr	r3, [pc, #572]	; (8000f80 <main+0x924>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	701a      	strb	r2, [r3, #0]

	  }
	  if (Data_In_Module3 == 1)
 8000d46:	4b8f      	ldr	r3, [pc, #572]	; (8000f84 <main+0x928>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	f040 8084 	bne.w	8000e58 <main+0x7fc>
	  {
#ifdef Debug
		  nRF24_Receive_Report(Sel_B_Module3);
#endif
		  Module3_Packet_Count = 0;
 8000d50:	4b8d      	ldr	r3, [pc, #564]	; (8000f88 <main+0x92c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]

		  uint8_t Data_In_RX_FIFO = 1;
 8000d56:	2301      	movs	r3, #1
 8000d58:	74fb      	strb	r3, [r7, #19]
		  //Reading the received packet in FIFO
		  //Checking the status of first bit of FIFO_STATUS
		  while(Data_In_RX_FIFO == 1)
 8000d5a:	e01e      	b.n	8000d9a <main+0x73e>
		  {
			  uint8_t FIFO_Reg = nRF24_ReadReg(Sel_B_Module3, nRF24_REG_FIFO_STATUS);
 8000d5c:	2117      	movs	r1, #23
 8000d5e:	2003      	movs	r0, #3
 8000d60:	f003 fa18 	bl	8004194 <nRF24_ReadReg>
 8000d64:	4603      	mov	r3, r0
 8000d66:	737b      	strb	r3, [r7, #13]
			  if((FIFO_Reg & 1) == 0)
 8000d68:	7b7b      	ldrb	r3, [r7, #13]
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d111      	bne.n	8000d96 <main+0x73a>
			  {
				  nRF24_Receive(Sel_B_Module3, Module3_Packet[Module3_Packet_Count], Button_Packet_Size);
 8000d72:	4b85      	ldr	r3, [pc, #532]	; (8000f88 <main+0x92c>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	011b      	lsls	r3, r3, #4
 8000d78:	4a84      	ldr	r2, [pc, #528]	; (8000f8c <main+0x930>)
 8000d7a:	4413      	add	r3, r2
 8000d7c:	4a84      	ldr	r2, [pc, #528]	; (8000f90 <main+0x934>)
 8000d7e:	7812      	ldrb	r2, [r2, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	2003      	movs	r0, #3
 8000d84:	f003 fc2a 	bl	80045dc <nRF24_Receive>
				  Module3_Packet_Count++;
 8000d88:	4b7f      	ldr	r3, [pc, #508]	; (8000f88 <main+0x92c>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	4b7d      	ldr	r3, [pc, #500]	; (8000f88 <main+0x92c>)
 8000d92:	701a      	strb	r2, [r3, #0]
 8000d94:	e001      	b.n	8000d9a <main+0x73e>
			  }
			  else
			  {
				  Data_In_RX_FIFO = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	74fb      	strb	r3, [r7, #19]
		  while(Data_In_RX_FIFO == 1)
 8000d9a:	7cfb      	ldrb	r3, [r7, #19]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d0dd      	beq.n	8000d5c <main+0x700>
			  }
		  }
		  HAL_UART_Transmit(&huart2, (uint8_t*)"\n**********************\n\n",25, 100);
#endif

		  for (uint8_t i = 0; i < Module3_Packet_Count; i++)
 8000da0:	2300      	movs	r3, #0
 8000da2:	74bb      	strb	r3, [r7, #18]
 8000da4:	e050      	b.n	8000e48 <main+0x7ec>
		  {
			  //Checking which Button has sent the data
			  Rec_Button_Number = Module3_Packet[i][0];
 8000da6:	7cbb      	ldrb	r3, [r7, #18]
 8000da8:	4a78      	ldr	r2, [pc, #480]	; (8000f8c <main+0x930>)
 8000daa:	011b      	lsls	r3, r3, #4
 8000dac:	4413      	add	r3, r2
 8000dae:	781a      	ldrb	r2, [r3, #0]
 8000db0:	4b6f      	ldr	r3, [pc, #444]	; (8000f70 <main+0x914>)
 8000db2:	701a      	strb	r2, [r3, #0]

			  //Checking which key on the button has been pressed
			  Key_Pressed = Module3_Packet[i][1];
 8000db4:	7cbb      	ldrb	r3, [r7, #18]
 8000db6:	4a75      	ldr	r2, [pc, #468]	; (8000f8c <main+0x930>)
 8000db8:	011b      	lsls	r3, r3, #4
 8000dba:	4413      	add	r3, r2
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	781a      	ldrb	r2, [r3, #0]
 8000dc0:	4b6d      	ldr	r3, [pc, #436]	; (8000f78 <main+0x91c>)
 8000dc2:	701a      	strb	r2, [r3, #0]

		      //Sending Color to the specified EdgeLED based on the key pressed
			  switch(Key_Pressed)
 8000dc4:	4b6c      	ldr	r3, [pc, #432]	; (8000f78 <main+0x91c>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	d832      	bhi.n	8000e34 <main+0x7d8>
 8000dce:	a201      	add	r2, pc, #4	; (adr r2, 8000dd4 <main+0x778>)
 8000dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd4:	08000de5 	.word	0x08000de5
 8000dd8:	08000df9 	.word	0x08000df9
 8000ddc:	08000e0d 	.word	0x08000e0d
 8000de0:	08000e21 	.word	0x08000e21
			  {
				case 1:
					EdgeLED_Color(Rec_Button_Number, 255, 255, 255, EdgeLED_Packet);
 8000de4:	4b62      	ldr	r3, [pc, #392]	; (8000f70 <main+0x914>)
 8000de6:	7818      	ldrb	r0, [r3, #0]
 8000de8:	4b62      	ldr	r3, [pc, #392]	; (8000f74 <main+0x918>)
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	23ff      	movs	r3, #255	; 0xff
 8000dee:	22ff      	movs	r2, #255	; 0xff
 8000df0:	21ff      	movs	r1, #255	; 0xff
 8000df2:	f7ff fbc7 	bl	8000584 <EdgeLED_Color>
					break;
 8000df6:	e01e      	b.n	8000e36 <main+0x7da>
				case 2:
				    EdgeLED_Color(Rec_Button_Number, 255,   0,   0, EdgeLED_Packet);
 8000df8:	4b5d      	ldr	r3, [pc, #372]	; (8000f70 <main+0x914>)
 8000dfa:	7818      	ldrb	r0, [r3, #0]
 8000dfc:	4b5d      	ldr	r3, [pc, #372]	; (8000f74 <main+0x918>)
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	2300      	movs	r3, #0
 8000e02:	2200      	movs	r2, #0
 8000e04:	21ff      	movs	r1, #255	; 0xff
 8000e06:	f7ff fbbd 	bl	8000584 <EdgeLED_Color>
					break;
 8000e0a:	e014      	b.n	8000e36 <main+0x7da>
				case 3:
					EdgeLED_Color(Rec_Button_Number,   0, 255,   0, EdgeLED_Packet);
 8000e0c:	4b58      	ldr	r3, [pc, #352]	; (8000f70 <main+0x914>)
 8000e0e:	7818      	ldrb	r0, [r3, #0]
 8000e10:	4b58      	ldr	r3, [pc, #352]	; (8000f74 <main+0x918>)
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	2300      	movs	r3, #0
 8000e16:	22ff      	movs	r2, #255	; 0xff
 8000e18:	2100      	movs	r1, #0
 8000e1a:	f7ff fbb3 	bl	8000584 <EdgeLED_Color>
					break;
 8000e1e:	e00a      	b.n	8000e36 <main+0x7da>
				case 4:
				    EdgeLED_Color(Rec_Button_Number,   0,   0, 255, EdgeLED_Packet);
 8000e20:	4b53      	ldr	r3, [pc, #332]	; (8000f70 <main+0x914>)
 8000e22:	7818      	ldrb	r0, [r3, #0]
 8000e24:	4b53      	ldr	r3, [pc, #332]	; (8000f74 <main+0x918>)
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	23ff      	movs	r3, #255	; 0xff
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	f7ff fba9 	bl	8000584 <EdgeLED_Color>
					break;
 8000e32:	e000      	b.n	8000e36 <main+0x7da>
				default:
				    break;
 8000e34:	bf00      	nop
			  }

			  Rec_Button_Number = 255;
 8000e36:	4b4e      	ldr	r3, [pc, #312]	; (8000f70 <main+0x914>)
 8000e38:	22ff      	movs	r2, #255	; 0xff
 8000e3a:	701a      	strb	r2, [r3, #0]
			  Key_Pressed = 255;
 8000e3c:	4b4e      	ldr	r3, [pc, #312]	; (8000f78 <main+0x91c>)
 8000e3e:	22ff      	movs	r2, #255	; 0xff
 8000e40:	701a      	strb	r2, [r3, #0]
		  for (uint8_t i = 0; i < Module3_Packet_Count; i++)
 8000e42:	7cbb      	ldrb	r3, [r7, #18]
 8000e44:	3301      	adds	r3, #1
 8000e46:	74bb      	strb	r3, [r7, #18]
 8000e48:	4b4f      	ldr	r3, [pc, #316]	; (8000f88 <main+0x92c>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	7cba      	ldrb	r2, [r7, #18]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d3a9      	bcc.n	8000da6 <main+0x74a>
		  }

		  Data_In_Module3 = 0;
 8000e52:	4b4c      	ldr	r3, [pc, #304]	; (8000f84 <main+0x928>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]

	  }
	  if (Data_In_Module4 == 1)
 8000e58:	4b4e      	ldr	r3, [pc, #312]	; (8000f94 <main+0x938>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	f47f acc1 	bne.w	80007e4 <main+0x188>
	  {
#ifdef Debug
		  nRF24_Receive_Report(Sel_B_Module4);
#endif
		  Module4_Packet_Count = 0;
 8000e62:	4b4d      	ldr	r3, [pc, #308]	; (8000f98 <main+0x93c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]

		  uint8_t Data_In_RX_FIFO = 1;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	747b      	strb	r3, [r7, #17]
		  //Reading the received packet in FIFO
		  //Checking the status of first bit of FIFO_STATUS
		  while(Data_In_RX_FIFO == 1)
 8000e6c:	e01e      	b.n	8000eac <main+0x850>
		  {
			  uint8_t FIFO_Reg = nRF24_ReadReg(Sel_B_Module4, nRF24_REG_FIFO_STATUS);
 8000e6e:	2117      	movs	r1, #23
 8000e70:	2004      	movs	r0, #4
 8000e72:	f003 f98f 	bl	8004194 <nRF24_ReadReg>
 8000e76:	4603      	mov	r3, r0
 8000e78:	733b      	strb	r3, [r7, #12]
			  if((FIFO_Reg & 1) == 0)
 8000e7a:	7b3b      	ldrb	r3, [r7, #12]
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d111      	bne.n	8000ea8 <main+0x84c>
			  {
				  nRF24_Receive(Sel_B_Module4, Module4_Packet[Module4_Packet_Count], Button_Packet_Size);
 8000e84:	4b44      	ldr	r3, [pc, #272]	; (8000f98 <main+0x93c>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	011b      	lsls	r3, r3, #4
 8000e8a:	4a44      	ldr	r2, [pc, #272]	; (8000f9c <main+0x940>)
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4a40      	ldr	r2, [pc, #256]	; (8000f90 <main+0x934>)
 8000e90:	7812      	ldrb	r2, [r2, #0]
 8000e92:	4619      	mov	r1, r3
 8000e94:	2004      	movs	r0, #4
 8000e96:	f003 fba1 	bl	80045dc <nRF24_Receive>
				  Module4_Packet_Count++;
 8000e9a:	4b3f      	ldr	r3, [pc, #252]	; (8000f98 <main+0x93c>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4b3d      	ldr	r3, [pc, #244]	; (8000f98 <main+0x93c>)
 8000ea4:	701a      	strb	r2, [r3, #0]
 8000ea6:	e001      	b.n	8000eac <main+0x850>
			  }
			  else
			  {
				  Data_In_RX_FIFO = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	747b      	strb	r3, [r7, #17]
		  while(Data_In_RX_FIFO == 1)
 8000eac:	7c7b      	ldrb	r3, [r7, #17]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d0dd      	beq.n	8000e6e <main+0x812>
			  }
		  }
		  HAL_UART_Transmit(&huart2, (uint8_t*)"\n**********************\n\n",25, 100);
#endif

		  for (uint8_t i = 0; i < Module4_Packet_Count; i++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	743b      	strb	r3, [r7, #16]
 8000eb6:	e051      	b.n	8000f5c <main+0x900>
		  {
			  //Checking which Button has sent the data
			  Rec_Button_Number = Module4_Packet[i][0];
 8000eb8:	7c3b      	ldrb	r3, [r7, #16]
 8000eba:	4a38      	ldr	r2, [pc, #224]	; (8000f9c <main+0x940>)
 8000ebc:	011b      	lsls	r3, r3, #4
 8000ebe:	4413      	add	r3, r2
 8000ec0:	781a      	ldrb	r2, [r3, #0]
 8000ec2:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <main+0x914>)
 8000ec4:	701a      	strb	r2, [r3, #0]

			  //Checking which key on the button has been pressed
			  Key_Pressed = Module4_Packet[i][1];
 8000ec6:	7c3b      	ldrb	r3, [r7, #16]
 8000ec8:	4a34      	ldr	r2, [pc, #208]	; (8000f9c <main+0x940>)
 8000eca:	011b      	lsls	r3, r3, #4
 8000ecc:	4413      	add	r3, r2
 8000ece:	3301      	adds	r3, #1
 8000ed0:	781a      	ldrb	r2, [r3, #0]
 8000ed2:	4b29      	ldr	r3, [pc, #164]	; (8000f78 <main+0x91c>)
 8000ed4:	701a      	strb	r2, [r3, #0]

		      //Sending Color to the specified EdgeLED based on the key pressed
			  switch(Key_Pressed)
 8000ed6:	4b28      	ldr	r3, [pc, #160]	; (8000f78 <main+0x91c>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	2b03      	cmp	r3, #3
 8000ede:	d833      	bhi.n	8000f48 <main+0x8ec>
 8000ee0:	a201      	add	r2, pc, #4	; (adr r2, 8000ee8 <main+0x88c>)
 8000ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee6:	bf00      	nop
 8000ee8:	08000ef9 	.word	0x08000ef9
 8000eec:	08000f0d 	.word	0x08000f0d
 8000ef0:	08000f21 	.word	0x08000f21
 8000ef4:	08000f35 	.word	0x08000f35
			  {
				case 1:
					EdgeLED_Color(Rec_Button_Number, 255, 255, 255, EdgeLED_Packet);
 8000ef8:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <main+0x914>)
 8000efa:	7818      	ldrb	r0, [r3, #0]
 8000efc:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <main+0x918>)
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	23ff      	movs	r3, #255	; 0xff
 8000f02:	22ff      	movs	r2, #255	; 0xff
 8000f04:	21ff      	movs	r1, #255	; 0xff
 8000f06:	f7ff fb3d 	bl	8000584 <EdgeLED_Color>
					break;
 8000f0a:	e01e      	b.n	8000f4a <main+0x8ee>
				case 2:
				    EdgeLED_Color(Rec_Button_Number, 255,   0,   0, EdgeLED_Packet);
 8000f0c:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <main+0x914>)
 8000f0e:	7818      	ldrb	r0, [r3, #0]
 8000f10:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <main+0x918>)
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2300      	movs	r3, #0
 8000f16:	2200      	movs	r2, #0
 8000f18:	21ff      	movs	r1, #255	; 0xff
 8000f1a:	f7ff fb33 	bl	8000584 <EdgeLED_Color>
					break;
 8000f1e:	e014      	b.n	8000f4a <main+0x8ee>
				case 3:
					EdgeLED_Color(Rec_Button_Number,   0, 255,   0, EdgeLED_Packet);
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <main+0x914>)
 8000f22:	7818      	ldrb	r0, [r3, #0]
 8000f24:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <main+0x918>)
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	22ff      	movs	r2, #255	; 0xff
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	f7ff fb29 	bl	8000584 <EdgeLED_Color>
					break;
 8000f32:	e00a      	b.n	8000f4a <main+0x8ee>
				case 4:
				    EdgeLED_Color(Rec_Button_Number,   0,   0, 255, EdgeLED_Packet);
 8000f34:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <main+0x914>)
 8000f36:	7818      	ldrb	r0, [r3, #0]
 8000f38:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <main+0x918>)
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	23ff      	movs	r3, #255	; 0xff
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2100      	movs	r1, #0
 8000f42:	f7ff fb1f 	bl	8000584 <EdgeLED_Color>
					break;
 8000f46:	e000      	b.n	8000f4a <main+0x8ee>
				default:
				    break;
 8000f48:	bf00      	nop
			  }

			  Rec_Button_Number = 255;
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <main+0x914>)
 8000f4c:	22ff      	movs	r2, #255	; 0xff
 8000f4e:	701a      	strb	r2, [r3, #0]
			  Key_Pressed = 255;
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <main+0x91c>)
 8000f52:	22ff      	movs	r2, #255	; 0xff
 8000f54:	701a      	strb	r2, [r3, #0]
		  for (uint8_t i = 0; i < Module4_Packet_Count; i++)
 8000f56:	7c3b      	ldrb	r3, [r7, #16]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	743b      	strb	r3, [r7, #16]
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <main+0x93c>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	7c3a      	ldrb	r2, [r7, #16]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d3a8      	bcc.n	8000eb8 <main+0x85c>
		  }

		  Data_In_Module4 = 0;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <main+0x938>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
	  time1 = HAL_GetTick();
 8000f6c:	e43a      	b.n	80007e4 <main+0x188>
 8000f6e:	bf00      	nop
 8000f70:	200000ea 	.word	0x200000ea
 8000f74:	20000444 	.word	0x20000444
 8000f78:	20000465 	.word	0x20000465
 8000f7c:	2000046b 	.word	0x2000046b
 8000f80:	20000467 	.word	0x20000467
 8000f84:	20000468 	.word	0x20000468
 8000f88:	2000046c 	.word	0x2000046c
 8000f8c:	20000384 	.word	0x20000384
 8000f90:	20000098 	.word	0x20000098
 8000f94:	20000469 	.word	0x20000469
 8000f98:	2000046d 	.word	0x2000046d
 8000f9c:	200003e4 	.word	0x200003e4

08000fa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b094      	sub	sp, #80	; 0x50
 8000fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa6:	f107 0320 	add.w	r3, r7, #32
 8000faa:	2230      	movs	r2, #48	; 0x30
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f003 fbea 	bl	8004788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	4b22      	ldr	r3, [pc, #136]	; (8001054 <SystemClock_Config+0xb4>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	4a21      	ldr	r2, [pc, #132]	; (8001054 <SystemClock_Config+0xb4>)
 8000fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <SystemClock_Config+0xb4>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <SystemClock_Config+0xb8>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a1b      	ldr	r2, [pc, #108]	; (8001058 <SystemClock_Config+0xb8>)
 8000fea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	4b19      	ldr	r3, [pc, #100]	; (8001058 <SystemClock_Config+0xb8>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001000:	2301      	movs	r3, #1
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001004:	2310      	movs	r3, #16
 8001006:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001008:	2300      	movs	r3, #0
 800100a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100c:	f107 0320 	add.w	r3, r7, #32
 8001010:	4618      	mov	r0, r3
 8001012:	f000 ffc3 	bl	8001f9c <HAL_RCC_OscConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800101c:	f000 fa0c 	bl	8001438 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001020:	230f      	movs	r3, #15
 8001022:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001024:	2300      	movs	r3, #0
 8001026:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f001 fa26 	bl	800248c <HAL_RCC_ClockConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001046:	f000 f9f7 	bl	8001438 <Error_Handler>
  }
}
 800104a:	bf00      	nop
 800104c:	3750      	adds	r7, #80	; 0x50
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800
 8001058:	40007000 	.word	0x40007000

0800105c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  Button_hspi1.Instance = SPI1;
 8001060:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001062:	4a18      	ldr	r2, [pc, #96]	; (80010c4 <MX_SPI1_Init+0x68>)
 8001064:	601a      	str	r2, [r3, #0]
  Button_hspi1.Init.Mode = SPI_MODE_MASTER;
 8001066:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001068:	f44f 7282 	mov.w	r2, #260	; 0x104
 800106c:	605a      	str	r2, [r3, #4]
  Button_hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  Button_hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  Button_hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_SPI1_Init+0x64>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  Button_hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001082:	2200      	movs	r2, #0
 8001084:	615a      	str	r2, [r3, #20]
  Button_hspi1.Init.NSS = SPI_NSS_SOFT;
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001088:	f44f 7200 	mov.w	r2, #512	; 0x200
 800108c:	619a      	str	r2, [r3, #24]
  Button_hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001090:	2200      	movs	r2, #0
 8001092:	61da      	str	r2, [r3, #28]
  Button_hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001094:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001096:	2200      	movs	r2, #0
 8001098:	621a      	str	r2, [r3, #32]
  Button_hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_SPI1_Init+0x64>)
 800109c:	2200      	movs	r2, #0
 800109e:	625a      	str	r2, [r3, #36]	; 0x24
  Button_hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <MX_SPI1_Init+0x64>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	629a      	str	r2, [r3, #40]	; 0x28
  Button_hspi1.Init.CRCPolynomial = 10;
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_SPI1_Init+0x64>)
 80010a8:	220a      	movs	r2, #10
 80010aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&Button_hspi1) != HAL_OK)
 80010ac:	4804      	ldr	r0, [pc, #16]	; (80010c0 <MX_SPI1_Init+0x64>)
 80010ae:	f001 fbcd 	bl	800284c <HAL_SPI_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010b8:	f000 f9be 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000178 	.word	0x20000178
 80010c4:	40013000 	.word	0x40013000

080010c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  EL_hspi2.Instance = SPI2;
 80010cc:	4b17      	ldr	r3, [pc, #92]	; (800112c <MX_SPI2_Init+0x64>)
 80010ce:	4a18      	ldr	r2, [pc, #96]	; (8001130 <MX_SPI2_Init+0x68>)
 80010d0:	601a      	str	r2, [r3, #0]
  EL_hspi2.Init.Mode = SPI_MODE_MASTER;
 80010d2:	4b16      	ldr	r3, [pc, #88]	; (800112c <MX_SPI2_Init+0x64>)
 80010d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010d8:	605a      	str	r2, [r3, #4]
  EL_hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010da:	4b14      	ldr	r3, [pc, #80]	; (800112c <MX_SPI2_Init+0x64>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  EL_hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <MX_SPI2_Init+0x64>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
  EL_hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <MX_SPI2_Init+0x64>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  EL_hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <MX_SPI2_Init+0x64>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	615a      	str	r2, [r3, #20]
  EL_hspi2.Init.NSS = SPI_NSS_SOFT;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <MX_SPI2_Init+0x64>)
 80010f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f8:	619a      	str	r2, [r3, #24]
  EL_hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MX_SPI2_Init+0x64>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	61da      	str	r2, [r3, #28]
  EL_hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <MX_SPI2_Init+0x64>)
 8001102:	2200      	movs	r2, #0
 8001104:	621a      	str	r2, [r3, #32]
  EL_hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_SPI2_Init+0x64>)
 8001108:	2200      	movs	r2, #0
 800110a:	625a      	str	r2, [r3, #36]	; 0x24
  EL_hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <MX_SPI2_Init+0x64>)
 800110e:	2200      	movs	r2, #0
 8001110:	629a      	str	r2, [r3, #40]	; 0x28
  EL_hspi2.Init.CRCPolynomial = 10;
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <MX_SPI2_Init+0x64>)
 8001114:	220a      	movs	r2, #10
 8001116:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&EL_hspi2) != HAL_OK)
 8001118:	4804      	ldr	r0, [pc, #16]	; (800112c <MX_SPI2_Init+0x64>)
 800111a:	f001 fb97 	bl	800284c <HAL_SPI_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001124:	f000 f988 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	200001d0 	.word	0x200001d0
 8001130:	40003800 	.word	0x40003800

08001134 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  ESP32_hspi3.Instance = SPI3;
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <MX_SPI3_Init+0x64>)
 800113a:	4a18      	ldr	r2, [pc, #96]	; (800119c <MX_SPI3_Init+0x68>)
 800113c:	601a      	str	r2, [r3, #0]
  ESP32_hspi3.Init.Mode = SPI_MODE_MASTER;
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_SPI3_Init+0x64>)
 8001140:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001144:	605a      	str	r2, [r3, #4]
  ESP32_hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_SPI3_Init+0x64>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  ESP32_hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <MX_SPI3_Init+0x64>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
  ESP32_hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_SPI3_Init+0x64>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  ESP32_hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_SPI3_Init+0x64>)
 800115a:	2200      	movs	r2, #0
 800115c:	615a      	str	r2, [r3, #20]
  ESP32_hspi3.Init.NSS = SPI_NSS_SOFT;
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <MX_SPI3_Init+0x64>)
 8001160:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001164:	619a      	str	r2, [r3, #24]
  ESP32_hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_SPI3_Init+0x64>)
 8001168:	2200      	movs	r2, #0
 800116a:	61da      	str	r2, [r3, #28]
  ESP32_hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <MX_SPI3_Init+0x64>)
 800116e:	2200      	movs	r2, #0
 8001170:	621a      	str	r2, [r3, #32]
  ESP32_hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_SPI3_Init+0x64>)
 8001174:	2200      	movs	r2, #0
 8001176:	625a      	str	r2, [r3, #36]	; 0x24
  ESP32_hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <MX_SPI3_Init+0x64>)
 800117a:	2200      	movs	r2, #0
 800117c:	629a      	str	r2, [r3, #40]	; 0x28
  ESP32_hspi3.Init.CRCPolynomial = 10;
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_SPI3_Init+0x64>)
 8001180:	220a      	movs	r2, #10
 8001182:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&ESP32_hspi3) != HAL_OK)
 8001184:	4804      	ldr	r0, [pc, #16]	; (8001198 <MX_SPI3_Init+0x64>)
 8001186:	f001 fb61 	bl	800284c <HAL_SPI_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001190:	f000 f952 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000228 	.word	0x20000228
 800119c:	40003c00 	.word	0x40003c00

080011a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011a6:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <MX_USART2_UART_Init+0x50>)
 80011a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011c6:	220c      	movs	r2, #12
 80011c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011d6:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011d8:	f002 f9fe 	bl	80035d8 <HAL_UART_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011e2:	f000 f929 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000280 	.word	0x20000280
 80011f0:	40004400 	.word	0x40004400

080011f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
 8001208:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	4b85      	ldr	r3, [pc, #532]	; (8001424 <MX_GPIO_Init+0x230>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a84      	ldr	r2, [pc, #528]	; (8001424 <MX_GPIO_Init+0x230>)
 8001214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b82      	ldr	r3, [pc, #520]	; (8001424 <MX_GPIO_Init+0x230>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	4b7e      	ldr	r3, [pc, #504]	; (8001424 <MX_GPIO_Init+0x230>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a7d      	ldr	r2, [pc, #500]	; (8001424 <MX_GPIO_Init+0x230>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b7b      	ldr	r3, [pc, #492]	; (8001424 <MX_GPIO_Init+0x230>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	4b77      	ldr	r3, [pc, #476]	; (8001424 <MX_GPIO_Init+0x230>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a76      	ldr	r2, [pc, #472]	; (8001424 <MX_GPIO_Init+0x230>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b74      	ldr	r3, [pc, #464]	; (8001424 <MX_GPIO_Init+0x230>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	4b70      	ldr	r3, [pc, #448]	; (8001424 <MX_GPIO_Init+0x230>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a6f      	ldr	r2, [pc, #444]	; (8001424 <MX_GPIO_Init+0x230>)
 8001268:	f043 0302 	orr.w	r3, r3, #2
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b6d      	ldr	r3, [pc, #436]	; (8001424 <MX_GPIO_Init+0x230>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	4b69      	ldr	r3, [pc, #420]	; (8001424 <MX_GPIO_Init+0x230>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a68      	ldr	r2, [pc, #416]	; (8001424 <MX_GPIO_Init+0x230>)
 8001284:	f043 0308 	orr.w	r3, r3, #8
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b66      	ldr	r3, [pc, #408]	; (8001424 <MX_GPIO_Init+0x230>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, nRF_EL_CSN_Pin|nRF_B_CSN1_Pin|nRF_B_CSN4_Pin, GPIO_PIN_SET);
 8001296:	2201      	movs	r2, #1
 8001298:	f240 1121 	movw	r1, #289	; 0x121
 800129c:	4862      	ldr	r0, [pc, #392]	; (8001428 <MX_GPIO_Init+0x234>)
 800129e:	f000 fe4b 	bl	8001f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nRF_EL_CE_Pin|T_LED1_Pin, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	f240 2101 	movw	r1, #513	; 0x201
 80012a8:	4860      	ldr	r0, [pc, #384]	; (800142c <MX_GPIO_Init+0x238>)
 80012aa:	f000 fe45 	bl	8001f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, nRF_B_CE1_Pin|nRF_B_CE2_Pin|nRF_B_CE3_Pin, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	f242 0105 	movw	r1, #8197	; 0x2005
 80012b4:	485e      	ldr	r0, [pc, #376]	; (8001430 <MX_GPIO_Init+0x23c>)
 80012b6:	f000 fe3f 	bl	8001f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, nRF_B_CSN2_Pin|nRF_B_CSN3_Pin, GPIO_PIN_SET);
 80012ba:	2201      	movs	r2, #1
 80012bc:	f640 0102 	movw	r1, #2050	; 0x802
 80012c0:	485b      	ldr	r0, [pc, #364]	; (8001430 <MX_GPIO_Init+0x23c>)
 80012c2:	f000 fe39 	bl	8001f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, nRF_B_CE4_Pin|T_LED2_Pin, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f44f 7120 	mov.w	r1, #640	; 0x280
 80012cc:	4856      	ldr	r0, [pc, #344]	; (8001428 <MX_GPIO_Init+0x234>)
 80012ce:	f000 fe33 	bl	8001f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_CS_GPIO_Port, ESP32_CS_Pin, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2104      	movs	r1, #4
 80012d6:	4857      	ldr	r0, [pc, #348]	; (8001434 <MX_GPIO_Init+0x240>)
 80012d8:	f000 fe2e 	bl	8001f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : nRF_EL_CSN_Pin nRF_B_CSN1_Pin nRF_B_CE4_Pin nRF_B_CSN4_Pin */
  GPIO_InitStruct.Pin = nRF_EL_CSN_Pin|nRF_B_CSN1_Pin|nRF_B_CE4_Pin|nRF_B_CSN4_Pin;
 80012dc:	f240 13a1 	movw	r3, #417	; 0x1a1
 80012e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ea:	2302      	movs	r3, #2
 80012ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	484c      	ldr	r0, [pc, #304]	; (8001428 <MX_GPIO_Init+0x234>)
 80012f6:	f000 fc83 	bl	8001c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : nRF_EL_IRQ_Pin nRF_B_IRQ1_Pin nRF_B_IRQ4_Pin */
  GPIO_InitStruct.Pin = nRF_EL_IRQ_Pin|nRF_B_IRQ1_Pin|nRF_B_IRQ4_Pin;
 80012fa:	2352      	movs	r3, #82	; 0x52
 80012fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012fe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	4619      	mov	r1, r3
 800130e:	4846      	ldr	r0, [pc, #280]	; (8001428 <MX_GPIO_Init+0x234>)
 8001310:	f000 fc76 	bl	8001c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : nRF_EL_CE_Pin */
  GPIO_InitStruct.Pin = nRF_EL_CE_Pin;
 8001314:	2301      	movs	r3, #1
 8001316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001318:	2301      	movs	r3, #1
 800131a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001320:	2302      	movs	r3, #2
 8001322:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nRF_EL_CE_GPIO_Port, &GPIO_InitStruct);
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4619      	mov	r1, r3
 800132a:	4840      	ldr	r0, [pc, #256]	; (800142c <MX_GPIO_Init+0x238>)
 800132c:	f000 fc68 	bl	8001c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : nRF_B_CE1_Pin nRF_B_CSN2_Pin nRF_B_CE2_Pin nRF_B_CSN3_Pin
                           nRF_B_CE3_Pin */
  GPIO_InitStruct.Pin = nRF_B_CE1_Pin|nRF_B_CSN2_Pin|nRF_B_CE2_Pin|nRF_B_CSN3_Pin
 8001330:	f642 0307 	movw	r3, #10247	; 0x2807
 8001334:	617b      	str	r3, [r7, #20]
                          |nRF_B_CE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001336:	2301      	movs	r3, #1
 8001338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800133e:	2302      	movs	r3, #2
 8001340:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	4619      	mov	r1, r3
 8001348:	4839      	ldr	r0, [pc, #228]	; (8001430 <MX_GPIO_Init+0x23c>)
 800134a:	f000 fc59 	bl	8001c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : nRF_B_IRQ2_Pin nRF_B_IRQ3_Pin */
  GPIO_InitStruct.Pin = nRF_B_IRQ2_Pin|nRF_B_IRQ3_Pin;
 800134e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001354:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	4832      	ldr	r0, [pc, #200]	; (8001430 <MX_GPIO_Init+0x23c>)
 8001366:	f000 fc4b 	bl	8001c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_LED2_Pin */
  GPIO_InitStruct.Pin = T_LED2_Pin;
 800136a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800136e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(T_LED2_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	4829      	ldr	r0, [pc, #164]	; (8001428 <MX_GPIO_Init+0x234>)
 8001384:	f000 fc3c 	bl	8001c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_Key2_Pin T_Key1_Pin */
  GPIO_InitStruct.Pin = T_Key2_Pin|T_Key1_Pin;
 8001388:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001392:	2302      	movs	r3, #2
 8001394:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4619      	mov	r1, r3
 800139c:	4823      	ldr	r0, [pc, #140]	; (800142c <MX_GPIO_Init+0x238>)
 800139e:	f000 fc2f 	bl	8001c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_LED1_Pin */
  GPIO_InitStruct.Pin = T_LED1_Pin;
 80013a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(T_LED1_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	4619      	mov	r1, r3
 80013ba:	481c      	ldr	r0, [pc, #112]	; (800142c <MX_GPIO_Init+0x238>)
 80013bc:	f000 fc20 	bl	8001c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP32_CS_Pin */
  GPIO_InitStruct.Pin = ESP32_CS_Pin;
 80013c0:	2304      	movs	r3, #4
 80013c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013cc:	2302      	movs	r3, #2
 80013ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESP32_CS_GPIO_Port, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	4817      	ldr	r0, [pc, #92]	; (8001434 <MX_GPIO_Init+0x240>)
 80013d8:	f000 fc12 	bl	8001c00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80013dc:	2200      	movs	r2, #0
 80013de:	2100      	movs	r1, #0
 80013e0:	2007      	movs	r0, #7
 80013e2:	f000 fbb4 	bl	8001b4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80013e6:	2007      	movs	r0, #7
 80013e8:	f000 fbcd 	bl	8001b86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2100      	movs	r1, #0
 80013f0:	200a      	movs	r0, #10
 80013f2:	f000 fbac 	bl	8001b4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80013f6:	200a      	movs	r0, #10
 80013f8:	f000 fbc5 	bl	8001b86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2100      	movs	r1, #0
 8001400:	2017      	movs	r0, #23
 8001402:	f000 fba4 	bl	8001b4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001406:	2017      	movs	r0, #23
 8001408:	f000 fbbd 	bl	8001b86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800140c:	2200      	movs	r2, #0
 800140e:	2100      	movs	r1, #0
 8001410:	2028      	movs	r0, #40	; 0x28
 8001412:	f000 fb9c 	bl	8001b4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001416:	2028      	movs	r0, #40	; 0x28
 8001418:	f000 fbb5 	bl	8001b86 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800141c:	bf00      	nop
 800141e:	3728      	adds	r7, #40	; 0x28
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40023800 	.word	0x40023800
 8001428:	40020800 	.word	0x40020800
 800142c:	40020000 	.word	0x40020000
 8001430:	40020400 	.word	0x40020400
 8001434:	40020c00 	.word	0x40020c00

08001438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800143c:	b672      	cpsid	i
}
 800143e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001440:	e7fe      	b.n	8001440 <Error_Handler+0x8>
	...

08001444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	4b10      	ldr	r3, [pc, #64]	; (8001490 <HAL_MspInit+0x4c>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	4a0f      	ldr	r2, [pc, #60]	; (8001490 <HAL_MspInit+0x4c>)
 8001454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001458:	6453      	str	r3, [r2, #68]	; 0x44
 800145a:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <HAL_MspInit+0x4c>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	603b      	str	r3, [r7, #0]
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <HAL_MspInit+0x4c>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	4a08      	ldr	r2, [pc, #32]	; (8001490 <HAL_MspInit+0x4c>)
 8001470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001474:	6413      	str	r3, [r2, #64]	; 0x40
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_MspInit+0x4c>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800

08001494 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08e      	sub	sp, #56	; 0x38
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a5f      	ldr	r2, [pc, #380]	; (8001630 <HAL_SPI_MspInit+0x19c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d12c      	bne.n	8001510 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	623b      	str	r3, [r7, #32]
 80014ba:	4b5e      	ldr	r3, [pc, #376]	; (8001634 <HAL_SPI_MspInit+0x1a0>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	4a5d      	ldr	r2, [pc, #372]	; (8001634 <HAL_SPI_MspInit+0x1a0>)
 80014c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014c4:	6453      	str	r3, [r2, #68]	; 0x44
 80014c6:	4b5b      	ldr	r3, [pc, #364]	; (8001634 <HAL_SPI_MspInit+0x1a0>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ce:	623b      	str	r3, [r7, #32]
 80014d0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
 80014d6:	4b57      	ldr	r3, [pc, #348]	; (8001634 <HAL_SPI_MspInit+0x1a0>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a56      	ldr	r2, [pc, #344]	; (8001634 <HAL_SPI_MspInit+0x1a0>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b54      	ldr	r3, [pc, #336]	; (8001634 <HAL_SPI_MspInit+0x1a0>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	61fb      	str	r3, [r7, #28]
 80014ec:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = nRF_B_SCK_Pin|nRF_B_MISO_Pin|nRF_B_MOSI_Pin;
 80014ee:	23e0      	movs	r3, #224	; 0xe0
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fa:	2303      	movs	r3, #3
 80014fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014fe:	2305      	movs	r3, #5
 8001500:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001506:	4619      	mov	r1, r3
 8001508:	484b      	ldr	r0, [pc, #300]	; (8001638 <HAL_SPI_MspInit+0x1a4>)
 800150a:	f000 fb79 	bl	8001c00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800150e:	e08a      	b.n	8001626 <HAL_SPI_MspInit+0x192>
  else if(hspi->Instance==SPI2)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a49      	ldr	r2, [pc, #292]	; (800163c <HAL_SPI_MspInit+0x1a8>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d14b      	bne.n	80015b2 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	61bb      	str	r3, [r7, #24]
 800151e:	4b45      	ldr	r3, [pc, #276]	; (8001634 <HAL_SPI_MspInit+0x1a0>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	4a44      	ldr	r2, [pc, #272]	; (8001634 <HAL_SPI_MspInit+0x1a0>)
 8001524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001528:	6413      	str	r3, [r2, #64]	; 0x40
 800152a:	4b42      	ldr	r3, [pc, #264]	; (8001634 <HAL_SPI_MspInit+0x1a0>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001532:	61bb      	str	r3, [r7, #24]
 8001534:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	4b3e      	ldr	r3, [pc, #248]	; (8001634 <HAL_SPI_MspInit+0x1a0>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a3d      	ldr	r2, [pc, #244]	; (8001634 <HAL_SPI_MspInit+0x1a0>)
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b3b      	ldr	r3, [pc, #236]	; (8001634 <HAL_SPI_MspInit+0x1a0>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	4b37      	ldr	r3, [pc, #220]	; (8001634 <HAL_SPI_MspInit+0x1a0>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a36      	ldr	r2, [pc, #216]	; (8001634 <HAL_SPI_MspInit+0x1a0>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b34      	ldr	r3, [pc, #208]	; (8001634 <HAL_SPI_MspInit+0x1a0>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = nRF_EL_MISO_Pin|nRF_EL_MOSI_Pin;
 800156e:	230c      	movs	r3, #12
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157a:	2303      	movs	r3, #3
 800157c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800157e:	2305      	movs	r3, #5
 8001580:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001586:	4619      	mov	r1, r3
 8001588:	482d      	ldr	r0, [pc, #180]	; (8001640 <HAL_SPI_MspInit+0x1ac>)
 800158a:	f000 fb39 	bl	8001c00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = nRF_EL_SCK_Pin;
 800158e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159c:	2303      	movs	r3, #3
 800159e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015a0:	2305      	movs	r3, #5
 80015a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(nRF_EL_SCK_GPIO_Port, &GPIO_InitStruct);
 80015a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a8:	4619      	mov	r1, r3
 80015aa:	4826      	ldr	r0, [pc, #152]	; (8001644 <HAL_SPI_MspInit+0x1b0>)
 80015ac:	f000 fb28 	bl	8001c00 <HAL_GPIO_Init>
}
 80015b0:	e039      	b.n	8001626 <HAL_SPI_MspInit+0x192>
  else if(hspi->Instance==SPI3)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a24      	ldr	r2, [pc, #144]	; (8001648 <HAL_SPI_MspInit+0x1b4>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d134      	bne.n	8001626 <HAL_SPI_MspInit+0x192>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <HAL_SPI_MspInit+0x1a0>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	4a1b      	ldr	r2, [pc, #108]	; (8001634 <HAL_SPI_MspInit+0x1a0>)
 80015c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ca:	6413      	str	r3, [r2, #64]	; 0x40
 80015cc:	4b19      	ldr	r3, [pc, #100]	; (8001634 <HAL_SPI_MspInit+0x1a0>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d8:	2300      	movs	r3, #0
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	4b15      	ldr	r3, [pc, #84]	; (8001634 <HAL_SPI_MspInit+0x1a0>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	4a14      	ldr	r2, [pc, #80]	; (8001634 <HAL_SPI_MspInit+0x1a0>)
 80015e2:	f043 0304 	orr.w	r3, r3, #4
 80015e6:	6313      	str	r3, [r2, #48]	; 0x30
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_SPI_MspInit+0x1a0>)
 80015ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ESP32_SCK_Pin|ESP32_MISO_Pin|ESP32_MOSI_Pin;
 80015f4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001602:	2303      	movs	r3, #3
 8001604:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001606:	2306      	movs	r3, #6
 8001608:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800160a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160e:	4619      	mov	r1, r3
 8001610:	480b      	ldr	r0, [pc, #44]	; (8001640 <HAL_SPI_MspInit+0x1ac>)
 8001612:	f000 faf5 	bl	8001c00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	2033      	movs	r0, #51	; 0x33
 800161c:	f000 fa97 	bl	8001b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001620:	2033      	movs	r0, #51	; 0x33
 8001622:	f000 fab0 	bl	8001b86 <HAL_NVIC_EnableIRQ>
}
 8001626:	bf00      	nop
 8001628:	3738      	adds	r7, #56	; 0x38
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40013000 	.word	0x40013000
 8001634:	40023800 	.word	0x40023800
 8001638:	40020000 	.word	0x40020000
 800163c:	40003800 	.word	0x40003800
 8001640:	40020800 	.word	0x40020800
 8001644:	40020400 	.word	0x40020400
 8001648:	40003c00 	.word	0x40003c00

0800164c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	; 0x28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a19      	ldr	r2, [pc, #100]	; (80016d0 <HAL_UART_MspInit+0x84>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d12b      	bne.n	80016c6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <HAL_UART_MspInit+0x88>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a17      	ldr	r2, [pc, #92]	; (80016d4 <HAL_UART_MspInit+0x88>)
 8001678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800167c:	6413      	str	r3, [r2, #64]	; 0x40
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_UART_MspInit+0x88>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_UART_MspInit+0x88>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a10      	ldr	r2, [pc, #64]	; (80016d4 <HAL_UART_MspInit+0x88>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <HAL_UART_MspInit+0x88>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016a6:	230c      	movs	r3, #12
 80016a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b2:	2303      	movs	r3, #3
 80016b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016b6:	2307      	movs	r3, #7
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4619      	mov	r1, r3
 80016c0:	4805      	ldr	r0, [pc, #20]	; (80016d8 <HAL_UART_MspInit+0x8c>)
 80016c2:	f000 fa9d 	bl	8001c00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016c6:	bf00      	nop
 80016c8:	3728      	adds	r7, #40	; 0x28
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40004400 	.word	0x40004400
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40020000 	.word	0x40020000

080016dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <NMI_Handler+0x4>

080016e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e6:	e7fe      	b.n	80016e6 <HardFault_Handler+0x4>

080016e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <MemManage_Handler+0x4>

080016ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <BusFault_Handler+0x4>

080016f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <UsageFault_Handler+0x4>

080016fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001728:	f000 f8f2 	bl	8001910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}

08001730 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nRF_EL_IRQ_Pin);
 8001734:	2002      	movs	r0, #2
 8001736:	f000 fc19 	bl	8001f6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}

0800173e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nRF_B_IRQ1_Pin);
 8001742:	2010      	movs	r0, #16
 8001744:	f000 fc12 	bl	8001f6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}

0800174c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nRF_B_IRQ4_Pin);
 8001750:	2040      	movs	r0, #64	; 0x40
 8001752:	f000 fc0b 	bl	8001f6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}

0800175a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nRF_B_IRQ2_Pin);
 800175e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001762:	f000 fc03 	bl	8001f6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(nRF_B_IRQ3_Pin);
 8001766:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800176a:	f000 fbff 	bl	8001f6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&ESP32_hspi3);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <SPI3_IRQHandler+0x10>)
 800177a:	f001 fcdf 	bl	800313c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000228 	.word	0x20000228

08001788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001790:	4a14      	ldr	r2, [pc, #80]	; (80017e4 <_sbrk+0x5c>)
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <_sbrk+0x60>)
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <_sbrk+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d102      	bne.n	80017aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <_sbrk+0x64>)
 80017a6:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <_sbrk+0x68>)
 80017a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d207      	bcs.n	80017c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b8:	f002 ffbc 	bl	8004734 <__errno>
 80017bc:	4603      	mov	r3, r0
 80017be:	220c      	movs	r2, #12
 80017c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295
 80017c6:	e009      	b.n	80017dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <_sbrk+0x64>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ce:	4b07      	ldr	r3, [pc, #28]	; (80017ec <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	4a05      	ldr	r2, [pc, #20]	; (80017ec <_sbrk+0x64>)
 80017d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017da:	68fb      	ldr	r3, [r7, #12]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20020000 	.word	0x20020000
 80017e8:	00000400 	.word	0x00000400
 80017ec:	2000049c 	.word	0x2000049c
 80017f0:	200004b8 	.word	0x200004b8

080017f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <SystemInit+0x20>)
 80017fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017fe:	4a05      	ldr	r2, [pc, #20]	; (8001814 <SystemInit+0x20>)
 8001800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001818:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001850 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800181c:	480d      	ldr	r0, [pc, #52]	; (8001854 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800181e:	490e      	ldr	r1, [pc, #56]	; (8001858 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001820:	4a0e      	ldr	r2, [pc, #56]	; (800185c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001824:	e002      	b.n	800182c <LoopCopyDataInit>

08001826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182a:	3304      	adds	r3, #4

0800182c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800182c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001830:	d3f9      	bcc.n	8001826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001832:	4a0b      	ldr	r2, [pc, #44]	; (8001860 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001834:	4c0b      	ldr	r4, [pc, #44]	; (8001864 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001838:	e001      	b.n	800183e <LoopFillZerobss>

0800183a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800183c:	3204      	adds	r2, #4

0800183e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001840:	d3fb      	bcc.n	800183a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001842:	f7ff ffd7 	bl	80017f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001846:	f002 ff7b 	bl	8004740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800184a:	f7fe ff07 	bl	800065c <main>
  bx  lr    
 800184e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001850:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001858:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 800185c:	08005148 	.word	0x08005148
  ldr r2, =_sbss
 8001860:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8001864:	200004b4 	.word	0x200004b4

08001868 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001868:	e7fe      	b.n	8001868 <ADC_IRQHandler>
	...

0800186c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001870:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <HAL_Init+0x40>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0d      	ldr	r2, [pc, #52]	; (80018ac <HAL_Init+0x40>)
 8001876:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800187a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_Init+0x40>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <HAL_Init+0x40>)
 8001882:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001886:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <HAL_Init+0x40>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a07      	ldr	r2, [pc, #28]	; (80018ac <HAL_Init+0x40>)
 800188e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001892:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001894:	2003      	movs	r0, #3
 8001896:	f000 f94f 	bl	8001b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800189a:	200f      	movs	r0, #15
 800189c:	f000 f808 	bl	80018b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a0:	f7ff fdd0 	bl	8001444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023c00 	.word	0x40023c00

080018b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_InitTick+0x54>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_InitTick+0x58>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 f967 	bl	8001ba2 <HAL_SYSTICK_Config>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e00e      	b.n	80018fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b0f      	cmp	r3, #15
 80018e2:	d80a      	bhi.n	80018fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e4:	2200      	movs	r2, #0
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ec:	f000 f92f 	bl	8001b4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f0:	4a06      	ldr	r2, [pc, #24]	; (800190c <HAL_InitTick+0x5c>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e000      	b.n	80018fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	200000ec 	.word	0x200000ec
 8001908:	200000f4 	.word	0x200000f4
 800190c:	200000f0 	.word	0x200000f0

08001910 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_IncTick+0x20>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_IncTick+0x24>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4413      	add	r3, r2
 8001920:	4a04      	ldr	r2, [pc, #16]	; (8001934 <HAL_IncTick+0x24>)
 8001922:	6013      	str	r3, [r2, #0]
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	200000f4 	.word	0x200000f4
 8001934:	200004a0 	.word	0x200004a0

08001938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return uwTick;
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <HAL_GetTick+0x14>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	200004a0 	.word	0x200004a0

08001950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001958:	f7ff ffee 	bl	8001938 <HAL_GetTick>
 800195c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001968:	d005      	beq.n	8001976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800196a:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <HAL_Delay+0x44>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4413      	add	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001976:	bf00      	nop
 8001978:	f7ff ffde 	bl	8001938 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	429a      	cmp	r2, r3
 8001986:	d8f7      	bhi.n	8001978 <HAL_Delay+0x28>
  {
  }
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200000f4 	.word	0x200000f4

08001998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019b4:	4013      	ands	r3, r2
 80019b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ca:	4a04      	ldr	r2, [pc, #16]	; (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	60d3      	str	r3, [r2, #12]
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e4:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <__NVIC_GetPriorityGrouping+0x18>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	0a1b      	lsrs	r3, r3, #8
 80019ea:	f003 0307 	and.w	r3, r3, #7
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	db0b      	blt.n	8001a26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	f003 021f 	and.w	r2, r3, #31
 8001a14:	4907      	ldr	r1, [pc, #28]	; (8001a34 <__NVIC_EnableIRQ+0x38>)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	095b      	lsrs	r3, r3, #5
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000e100 	.word	0xe000e100

08001a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	6039      	str	r1, [r7, #0]
 8001a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	db0a      	blt.n	8001a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	490c      	ldr	r1, [pc, #48]	; (8001a84 <__NVIC_SetPriority+0x4c>)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	0112      	lsls	r2, r2, #4
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a60:	e00a      	b.n	8001a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4908      	ldr	r1, [pc, #32]	; (8001a88 <__NVIC_SetPriority+0x50>)
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	3b04      	subs	r3, #4
 8001a70:	0112      	lsls	r2, r2, #4
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	440b      	add	r3, r1
 8001a76:	761a      	strb	r2, [r3, #24]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000e100 	.word	0xe000e100
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	; 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f1c3 0307 	rsb	r3, r3, #7
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	bf28      	it	cs
 8001aaa:	2304      	movcs	r3, #4
 8001aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	2b06      	cmp	r3, #6
 8001ab4:	d902      	bls.n	8001abc <NVIC_EncodePriority+0x30>
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3b03      	subs	r3, #3
 8001aba:	e000      	b.n	8001abe <NVIC_EncodePriority+0x32>
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43da      	mvns	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	401a      	ands	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	43d9      	mvns	r1, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	4313      	orrs	r3, r2
         );
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3724      	adds	r7, #36	; 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b04:	d301      	bcc.n	8001b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b06:	2301      	movs	r3, #1
 8001b08:	e00f      	b.n	8001b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <SysTick_Config+0x40>)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b12:	210f      	movs	r1, #15
 8001b14:	f04f 30ff 	mov.w	r0, #4294967295
 8001b18:	f7ff ff8e 	bl	8001a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <SysTick_Config+0x40>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b22:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <SysTick_Config+0x40>)
 8001b24:	2207      	movs	r2, #7
 8001b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	e000e010 	.word	0xe000e010

08001b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff ff29 	bl	8001998 <__NVIC_SetPriorityGrouping>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b60:	f7ff ff3e 	bl	80019e0 <__NVIC_GetPriorityGrouping>
 8001b64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	6978      	ldr	r0, [r7, #20]
 8001b6c:	f7ff ff8e 	bl	8001a8c <NVIC_EncodePriority>
 8001b70:	4602      	mov	r2, r0
 8001b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b76:	4611      	mov	r1, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff5d 	bl	8001a38 <__NVIC_SetPriority>
}
 8001b7e:	bf00      	nop
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff31 	bl	80019fc <__NVIC_EnableIRQ>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ffa2 	bl	8001af4 <SysTick_Config>
 8001bb0:	4603      	mov	r3, r0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d004      	beq.n	8001bd8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2280      	movs	r2, #128	; 0x80
 8001bd2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e00c      	b.n	8001bf2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2205      	movs	r2, #5
 8001bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 0201 	bic.w	r2, r2, #1
 8001bee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b089      	sub	sp, #36	; 0x24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
 8001c1a:	e16b      	b.n	8001ef4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	f040 815a 	bne.w	8001eee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d005      	beq.n	8001c52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d130      	bne.n	8001cb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	68da      	ldr	r2, [r3, #12]
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c88:	2201      	movs	r2, #1
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	091b      	lsrs	r3, r3, #4
 8001c9e:	f003 0201 	and.w	r2, r3, #1
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	d017      	beq.n	8001cf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	2203      	movs	r2, #3
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d123      	bne.n	8001d44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	08da      	lsrs	r2, r3, #3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3208      	adds	r2, #8
 8001d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	220f      	movs	r2, #15
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	691a      	ldr	r2, [r3, #16]
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	08da      	lsrs	r2, r3, #3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	3208      	adds	r2, #8
 8001d3e:	69b9      	ldr	r1, [r7, #24]
 8001d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	2203      	movs	r2, #3
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0203 	and.w	r2, r3, #3
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 80b4 	beq.w	8001eee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	4b60      	ldr	r3, [pc, #384]	; (8001f0c <HAL_GPIO_Init+0x30c>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	4a5f      	ldr	r2, [pc, #380]	; (8001f0c <HAL_GPIO_Init+0x30c>)
 8001d90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d94:	6453      	str	r3, [r2, #68]	; 0x44
 8001d96:	4b5d      	ldr	r3, [pc, #372]	; (8001f0c <HAL_GPIO_Init+0x30c>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001da2:	4a5b      	ldr	r2, [pc, #364]	; (8001f10 <HAL_GPIO_Init+0x310>)
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	089b      	lsrs	r3, r3, #2
 8001da8:	3302      	adds	r3, #2
 8001daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	220f      	movs	r2, #15
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a52      	ldr	r2, [pc, #328]	; (8001f14 <HAL_GPIO_Init+0x314>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d02b      	beq.n	8001e26 <HAL_GPIO_Init+0x226>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a51      	ldr	r2, [pc, #324]	; (8001f18 <HAL_GPIO_Init+0x318>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d025      	beq.n	8001e22 <HAL_GPIO_Init+0x222>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a50      	ldr	r2, [pc, #320]	; (8001f1c <HAL_GPIO_Init+0x31c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d01f      	beq.n	8001e1e <HAL_GPIO_Init+0x21e>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a4f      	ldr	r2, [pc, #316]	; (8001f20 <HAL_GPIO_Init+0x320>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d019      	beq.n	8001e1a <HAL_GPIO_Init+0x21a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a4e      	ldr	r2, [pc, #312]	; (8001f24 <HAL_GPIO_Init+0x324>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d013      	beq.n	8001e16 <HAL_GPIO_Init+0x216>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a4d      	ldr	r2, [pc, #308]	; (8001f28 <HAL_GPIO_Init+0x328>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d00d      	beq.n	8001e12 <HAL_GPIO_Init+0x212>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a4c      	ldr	r2, [pc, #304]	; (8001f2c <HAL_GPIO_Init+0x32c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d007      	beq.n	8001e0e <HAL_GPIO_Init+0x20e>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a4b      	ldr	r2, [pc, #300]	; (8001f30 <HAL_GPIO_Init+0x330>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d101      	bne.n	8001e0a <HAL_GPIO_Init+0x20a>
 8001e06:	2307      	movs	r3, #7
 8001e08:	e00e      	b.n	8001e28 <HAL_GPIO_Init+0x228>
 8001e0a:	2308      	movs	r3, #8
 8001e0c:	e00c      	b.n	8001e28 <HAL_GPIO_Init+0x228>
 8001e0e:	2306      	movs	r3, #6
 8001e10:	e00a      	b.n	8001e28 <HAL_GPIO_Init+0x228>
 8001e12:	2305      	movs	r3, #5
 8001e14:	e008      	b.n	8001e28 <HAL_GPIO_Init+0x228>
 8001e16:	2304      	movs	r3, #4
 8001e18:	e006      	b.n	8001e28 <HAL_GPIO_Init+0x228>
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e004      	b.n	8001e28 <HAL_GPIO_Init+0x228>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e002      	b.n	8001e28 <HAL_GPIO_Init+0x228>
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <HAL_GPIO_Init+0x228>
 8001e26:	2300      	movs	r3, #0
 8001e28:	69fa      	ldr	r2, [r7, #28]
 8001e2a:	f002 0203 	and.w	r2, r2, #3
 8001e2e:	0092      	lsls	r2, r2, #2
 8001e30:	4093      	lsls	r3, r2
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e38:	4935      	ldr	r1, [pc, #212]	; (8001f10 <HAL_GPIO_Init+0x310>)
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	089b      	lsrs	r3, r3, #2
 8001e3e:	3302      	adds	r3, #2
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e46:	4b3b      	ldr	r3, [pc, #236]	; (8001f34 <HAL_GPIO_Init+0x334>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4013      	ands	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e6a:	4a32      	ldr	r2, [pc, #200]	; (8001f34 <HAL_GPIO_Init+0x334>)
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e70:	4b30      	ldr	r3, [pc, #192]	; (8001f34 <HAL_GPIO_Init+0x334>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e94:	4a27      	ldr	r2, [pc, #156]	; (8001f34 <HAL_GPIO_Init+0x334>)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e9a:	4b26      	ldr	r3, [pc, #152]	; (8001f34 <HAL_GPIO_Init+0x334>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ebe:	4a1d      	ldr	r2, [pc, #116]	; (8001f34 <HAL_GPIO_Init+0x334>)
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ec4:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <HAL_GPIO_Init+0x334>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ee8:	4a12      	ldr	r2, [pc, #72]	; (8001f34 <HAL_GPIO_Init+0x334>)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	61fb      	str	r3, [r7, #28]
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	2b0f      	cmp	r3, #15
 8001ef8:	f67f ae90 	bls.w	8001c1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001efc:	bf00      	nop
 8001efe:	bf00      	nop
 8001f00:	3724      	adds	r7, #36	; 0x24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40013800 	.word	0x40013800
 8001f14:	40020000 	.word	0x40020000
 8001f18:	40020400 	.word	0x40020400
 8001f1c:	40020800 	.word	0x40020800
 8001f20:	40020c00 	.word	0x40020c00
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40021400 	.word	0x40021400
 8001f2c:	40021800 	.word	0x40021800
 8001f30:	40021c00 	.word	0x40021c00
 8001f34:	40013c00 	.word	0x40013c00

08001f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	807b      	strh	r3, [r7, #2]
 8001f44:	4613      	mov	r3, r2
 8001f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f48:	787b      	ldrb	r3, [r7, #1]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f4e:	887a      	ldrh	r2, [r7, #2]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f54:	e003      	b.n	8001f5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f56:	887b      	ldrh	r3, [r7, #2]
 8001f58:	041a      	lsls	r2, r3, #16
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	619a      	str	r2, [r3, #24]
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
	...

08001f6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f76:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d006      	beq.n	8001f90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f82:	4a05      	ldr	r2, [pc, #20]	; (8001f98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f88:	88fb      	ldrh	r3, [r7, #6]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fb2c 	bl	80005e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40013c00 	.word	0x40013c00

08001f9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e267      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d075      	beq.n	80020a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fba:	4b88      	ldr	r3, [pc, #544]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d00c      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fc6:	4b85      	ldr	r3, [pc, #532]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d112      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fd2:	4b82      	ldr	r3, [pc, #520]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fde:	d10b      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe0:	4b7e      	ldr	r3, [pc, #504]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d05b      	beq.n	80020a4 <HAL_RCC_OscConfig+0x108>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d157      	bne.n	80020a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e242      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002000:	d106      	bne.n	8002010 <HAL_RCC_OscConfig+0x74>
 8002002:	4b76      	ldr	r3, [pc, #472]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a75      	ldr	r2, [pc, #468]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	e01d      	b.n	800204c <HAL_RCC_OscConfig+0xb0>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002018:	d10c      	bne.n	8002034 <HAL_RCC_OscConfig+0x98>
 800201a:	4b70      	ldr	r3, [pc, #448]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a6f      	ldr	r2, [pc, #444]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	4b6d      	ldr	r3, [pc, #436]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a6c      	ldr	r2, [pc, #432]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 800202c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	e00b      	b.n	800204c <HAL_RCC_OscConfig+0xb0>
 8002034:	4b69      	ldr	r3, [pc, #420]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a68      	ldr	r2, [pc, #416]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 800203a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	4b66      	ldr	r3, [pc, #408]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a65      	ldr	r2, [pc, #404]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800204a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d013      	beq.n	800207c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7ff fc70 	bl	8001938 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800205c:	f7ff fc6c 	bl	8001938 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b64      	cmp	r3, #100	; 0x64
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e207      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206e:	4b5b      	ldr	r3, [pc, #364]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0xc0>
 800207a:	e014      	b.n	80020a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207c:	f7ff fc5c 	bl	8001938 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002084:	f7ff fc58 	bl	8001938 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b64      	cmp	r3, #100	; 0x64
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e1f3      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002096:	4b51      	ldr	r3, [pc, #324]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0xe8>
 80020a2:	e000      	b.n	80020a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d063      	beq.n	800217a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020b2:	4b4a      	ldr	r3, [pc, #296]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00b      	beq.n	80020d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020be:	4b47      	ldr	r3, [pc, #284]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d11c      	bne.n	8002104 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ca:	4b44      	ldr	r3, [pc, #272]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d116      	bne.n	8002104 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d6:	4b41      	ldr	r3, [pc, #260]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d005      	beq.n	80020ee <HAL_RCC_OscConfig+0x152>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d001      	beq.n	80020ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e1c7      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ee:	4b3b      	ldr	r3, [pc, #236]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	4937      	ldr	r1, [pc, #220]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002102:	e03a      	b.n	800217a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d020      	beq.n	800214e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800210c:	4b34      	ldr	r3, [pc, #208]	; (80021e0 <HAL_RCC_OscConfig+0x244>)
 800210e:	2201      	movs	r2, #1
 8002110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002112:	f7ff fc11 	bl	8001938 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800211a:	f7ff fc0d 	bl	8001938 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e1a8      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002138:	4b28      	ldr	r3, [pc, #160]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	4925      	ldr	r1, [pc, #148]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002148:	4313      	orrs	r3, r2
 800214a:	600b      	str	r3, [r1, #0]
 800214c:	e015      	b.n	800217a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800214e:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <HAL_RCC_OscConfig+0x244>)
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002154:	f7ff fbf0 	bl	8001938 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800215c:	f7ff fbec 	bl	8001938 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e187      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800216e:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d036      	beq.n	80021f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d016      	beq.n	80021bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800218e:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <HAL_RCC_OscConfig+0x248>)
 8002190:	2201      	movs	r2, #1
 8002192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002194:	f7ff fbd0 	bl	8001938 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800219c:	f7ff fbcc 	bl	8001938 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e167      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ae:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 80021b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x200>
 80021ba:	e01b      	b.n	80021f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021bc:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <HAL_RCC_OscConfig+0x248>)
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c2:	f7ff fbb9 	bl	8001938 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c8:	e00e      	b.n	80021e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ca:	f7ff fbb5 	bl	8001938 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d907      	bls.n	80021e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e150      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
 80021dc:	40023800 	.word	0x40023800
 80021e0:	42470000 	.word	0x42470000
 80021e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e8:	4b88      	ldr	r3, [pc, #544]	; (800240c <HAL_RCC_OscConfig+0x470>)
 80021ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1ea      	bne.n	80021ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 8097 	beq.w	8002330 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002202:	2300      	movs	r3, #0
 8002204:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002206:	4b81      	ldr	r3, [pc, #516]	; (800240c <HAL_RCC_OscConfig+0x470>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10f      	bne.n	8002232 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	4b7d      	ldr	r3, [pc, #500]	; (800240c <HAL_RCC_OscConfig+0x470>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	4a7c      	ldr	r2, [pc, #496]	; (800240c <HAL_RCC_OscConfig+0x470>)
 800221c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002220:	6413      	str	r3, [r2, #64]	; 0x40
 8002222:	4b7a      	ldr	r3, [pc, #488]	; (800240c <HAL_RCC_OscConfig+0x470>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800222e:	2301      	movs	r3, #1
 8002230:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002232:	4b77      	ldr	r3, [pc, #476]	; (8002410 <HAL_RCC_OscConfig+0x474>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223a:	2b00      	cmp	r3, #0
 800223c:	d118      	bne.n	8002270 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800223e:	4b74      	ldr	r3, [pc, #464]	; (8002410 <HAL_RCC_OscConfig+0x474>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a73      	ldr	r2, [pc, #460]	; (8002410 <HAL_RCC_OscConfig+0x474>)
 8002244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002248:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800224a:	f7ff fb75 	bl	8001938 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002252:	f7ff fb71 	bl	8001938 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e10c      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002264:	4b6a      	ldr	r3, [pc, #424]	; (8002410 <HAL_RCC_OscConfig+0x474>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0f0      	beq.n	8002252 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d106      	bne.n	8002286 <HAL_RCC_OscConfig+0x2ea>
 8002278:	4b64      	ldr	r3, [pc, #400]	; (800240c <HAL_RCC_OscConfig+0x470>)
 800227a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227c:	4a63      	ldr	r2, [pc, #396]	; (800240c <HAL_RCC_OscConfig+0x470>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	6713      	str	r3, [r2, #112]	; 0x70
 8002284:	e01c      	b.n	80022c0 <HAL_RCC_OscConfig+0x324>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	2b05      	cmp	r3, #5
 800228c:	d10c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x30c>
 800228e:	4b5f      	ldr	r3, [pc, #380]	; (800240c <HAL_RCC_OscConfig+0x470>)
 8002290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002292:	4a5e      	ldr	r2, [pc, #376]	; (800240c <HAL_RCC_OscConfig+0x470>)
 8002294:	f043 0304 	orr.w	r3, r3, #4
 8002298:	6713      	str	r3, [r2, #112]	; 0x70
 800229a:	4b5c      	ldr	r3, [pc, #368]	; (800240c <HAL_RCC_OscConfig+0x470>)
 800229c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229e:	4a5b      	ldr	r2, [pc, #364]	; (800240c <HAL_RCC_OscConfig+0x470>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6713      	str	r3, [r2, #112]	; 0x70
 80022a6:	e00b      	b.n	80022c0 <HAL_RCC_OscConfig+0x324>
 80022a8:	4b58      	ldr	r3, [pc, #352]	; (800240c <HAL_RCC_OscConfig+0x470>)
 80022aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ac:	4a57      	ldr	r2, [pc, #348]	; (800240c <HAL_RCC_OscConfig+0x470>)
 80022ae:	f023 0301 	bic.w	r3, r3, #1
 80022b2:	6713      	str	r3, [r2, #112]	; 0x70
 80022b4:	4b55      	ldr	r3, [pc, #340]	; (800240c <HAL_RCC_OscConfig+0x470>)
 80022b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b8:	4a54      	ldr	r2, [pc, #336]	; (800240c <HAL_RCC_OscConfig+0x470>)
 80022ba:	f023 0304 	bic.w	r3, r3, #4
 80022be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d015      	beq.n	80022f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c8:	f7ff fb36 	bl	8001938 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ce:	e00a      	b.n	80022e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d0:	f7ff fb32 	bl	8001938 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	f241 3288 	movw	r2, #5000	; 0x1388
 80022de:	4293      	cmp	r3, r2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e0cb      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e6:	4b49      	ldr	r3, [pc, #292]	; (800240c <HAL_RCC_OscConfig+0x470>)
 80022e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0ee      	beq.n	80022d0 <HAL_RCC_OscConfig+0x334>
 80022f2:	e014      	b.n	800231e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f4:	f7ff fb20 	bl	8001938 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022fa:	e00a      	b.n	8002312 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022fc:	f7ff fb1c 	bl	8001938 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	f241 3288 	movw	r2, #5000	; 0x1388
 800230a:	4293      	cmp	r3, r2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e0b5      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002312:	4b3e      	ldr	r3, [pc, #248]	; (800240c <HAL_RCC_OscConfig+0x470>)
 8002314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1ee      	bne.n	80022fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800231e:	7dfb      	ldrb	r3, [r7, #23]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d105      	bne.n	8002330 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002324:	4b39      	ldr	r3, [pc, #228]	; (800240c <HAL_RCC_OscConfig+0x470>)
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	4a38      	ldr	r2, [pc, #224]	; (800240c <HAL_RCC_OscConfig+0x470>)
 800232a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800232e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 80a1 	beq.w	800247c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800233a:	4b34      	ldr	r3, [pc, #208]	; (800240c <HAL_RCC_OscConfig+0x470>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b08      	cmp	r3, #8
 8002344:	d05c      	beq.n	8002400 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	2b02      	cmp	r3, #2
 800234c:	d141      	bne.n	80023d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234e:	4b31      	ldr	r3, [pc, #196]	; (8002414 <HAL_RCC_OscConfig+0x478>)
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002354:	f7ff faf0 	bl	8001938 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800235c:	f7ff faec 	bl	8001938 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e087      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800236e:	4b27      	ldr	r3, [pc, #156]	; (800240c <HAL_RCC_OscConfig+0x470>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69da      	ldr	r2, [r3, #28]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	019b      	lsls	r3, r3, #6
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	085b      	lsrs	r3, r3, #1
 8002392:	3b01      	subs	r3, #1
 8002394:	041b      	lsls	r3, r3, #16
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239c:	061b      	lsls	r3, r3, #24
 800239e:	491b      	ldr	r1, [pc, #108]	; (800240c <HAL_RCC_OscConfig+0x470>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023a4:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <HAL_RCC_OscConfig+0x478>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023aa:	f7ff fac5 	bl	8001938 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b2:	f7ff fac1 	bl	8001938 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e05c      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c4:	4b11      	ldr	r3, [pc, #68]	; (800240c <HAL_RCC_OscConfig+0x470>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x416>
 80023d0:	e054      	b.n	800247c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <HAL_RCC_OscConfig+0x478>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d8:	f7ff faae 	bl	8001938 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023e0:	f7ff faaa 	bl	8001938 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e045      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <HAL_RCC_OscConfig+0x470>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x444>
 80023fe:	e03d      	b.n	800247c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d107      	bne.n	8002418 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e038      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
 800240c:	40023800 	.word	0x40023800
 8002410:	40007000 	.word	0x40007000
 8002414:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002418:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <HAL_RCC_OscConfig+0x4ec>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d028      	beq.n	8002478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002430:	429a      	cmp	r2, r3
 8002432:	d121      	bne.n	8002478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243e:	429a      	cmp	r2, r3
 8002440:	d11a      	bne.n	8002478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002448:	4013      	ands	r3, r2
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800244e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002450:	4293      	cmp	r3, r2
 8002452:	d111      	bne.n	8002478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245e:	085b      	lsrs	r3, r3, #1
 8002460:	3b01      	subs	r3, #1
 8002462:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002464:	429a      	cmp	r2, r3
 8002466:	d107      	bne.n	8002478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002472:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002474:	429a      	cmp	r2, r3
 8002476:	d001      	beq.n	800247c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3718      	adds	r7, #24
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40023800 	.word	0x40023800

0800248c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e0cc      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024a0:	4b68      	ldr	r3, [pc, #416]	; (8002644 <HAL_RCC_ClockConfig+0x1b8>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d90c      	bls.n	80024c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ae:	4b65      	ldr	r3, [pc, #404]	; (8002644 <HAL_RCC_ClockConfig+0x1b8>)
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b6:	4b63      	ldr	r3, [pc, #396]	; (8002644 <HAL_RCC_ClockConfig+0x1b8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0b8      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d020      	beq.n	8002516 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024e0:	4b59      	ldr	r3, [pc, #356]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	4a58      	ldr	r2, [pc, #352]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024f8:	4b53      	ldr	r3, [pc, #332]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	4a52      	ldr	r2, [pc, #328]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002502:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002504:	4b50      	ldr	r3, [pc, #320]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	494d      	ldr	r1, [pc, #308]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	4313      	orrs	r3, r2
 8002514:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d044      	beq.n	80025ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d107      	bne.n	800253a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252a:	4b47      	ldr	r3, [pc, #284]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d119      	bne.n	800256a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e07f      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d003      	beq.n	800254a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002546:	2b03      	cmp	r3, #3
 8002548:	d107      	bne.n	800255a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800254a:	4b3f      	ldr	r3, [pc, #252]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d109      	bne.n	800256a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e06f      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255a:	4b3b      	ldr	r3, [pc, #236]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e067      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800256a:	4b37      	ldr	r3, [pc, #220]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f023 0203 	bic.w	r2, r3, #3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	4934      	ldr	r1, [pc, #208]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 8002578:	4313      	orrs	r3, r2
 800257a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800257c:	f7ff f9dc 	bl	8001938 <HAL_GetTick>
 8002580:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002582:	e00a      	b.n	800259a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002584:	f7ff f9d8 	bl	8001938 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002592:	4293      	cmp	r3, r2
 8002594:	d901      	bls.n	800259a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e04f      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259a:	4b2b      	ldr	r3, [pc, #172]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 020c 	and.w	r2, r3, #12
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d1eb      	bne.n	8002584 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025ac:	4b25      	ldr	r3, [pc, #148]	; (8002644 <HAL_RCC_ClockConfig+0x1b8>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d20c      	bcs.n	80025d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ba:	4b22      	ldr	r3, [pc, #136]	; (8002644 <HAL_RCC_ClockConfig+0x1b8>)
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c2:	4b20      	ldr	r3, [pc, #128]	; (8002644 <HAL_RCC_ClockConfig+0x1b8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d001      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e032      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d008      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025e0:	4b19      	ldr	r3, [pc, #100]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	4916      	ldr	r1, [pc, #88]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d009      	beq.n	8002612 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025fe:	4b12      	ldr	r3, [pc, #72]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	490e      	ldr	r1, [pc, #56]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	4313      	orrs	r3, r2
 8002610:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002612:	f000 f821 	bl	8002658 <HAL_RCC_GetSysClockFreq>
 8002616:	4602      	mov	r2, r0
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	091b      	lsrs	r3, r3, #4
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	490a      	ldr	r1, [pc, #40]	; (800264c <HAL_RCC_ClockConfig+0x1c0>)
 8002624:	5ccb      	ldrb	r3, [r1, r3]
 8002626:	fa22 f303 	lsr.w	r3, r2, r3
 800262a:	4a09      	ldr	r2, [pc, #36]	; (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 800262c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800262e:	4b09      	ldr	r3, [pc, #36]	; (8002654 <HAL_RCC_ClockConfig+0x1c8>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff f93c 	bl	80018b0 <HAL_InitTick>

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40023c00 	.word	0x40023c00
 8002648:	40023800 	.word	0x40023800
 800264c:	080050ec 	.word	0x080050ec
 8002650:	200000ec 	.word	0x200000ec
 8002654:	200000f0 	.word	0x200000f0

08002658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800265c:	b090      	sub	sp, #64	; 0x40
 800265e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	637b      	str	r3, [r7, #52]	; 0x34
 8002664:	2300      	movs	r3, #0
 8002666:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002668:	2300      	movs	r3, #0
 800266a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002670:	4b59      	ldr	r3, [pc, #356]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 030c 	and.w	r3, r3, #12
 8002678:	2b08      	cmp	r3, #8
 800267a:	d00d      	beq.n	8002698 <HAL_RCC_GetSysClockFreq+0x40>
 800267c:	2b08      	cmp	r3, #8
 800267e:	f200 80a1 	bhi.w	80027c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <HAL_RCC_GetSysClockFreq+0x34>
 8002686:	2b04      	cmp	r3, #4
 8002688:	d003      	beq.n	8002692 <HAL_RCC_GetSysClockFreq+0x3a>
 800268a:	e09b      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800268c:	4b53      	ldr	r3, [pc, #332]	; (80027dc <HAL_RCC_GetSysClockFreq+0x184>)
 800268e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002690:	e09b      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002692:	4b53      	ldr	r3, [pc, #332]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002694:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002696:	e098      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002698:	4b4f      	ldr	r3, [pc, #316]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026a2:	4b4d      	ldr	r3, [pc, #308]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d028      	beq.n	8002700 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ae:	4b4a      	ldr	r3, [pc, #296]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	099b      	lsrs	r3, r3, #6
 80026b4:	2200      	movs	r2, #0
 80026b6:	623b      	str	r3, [r7, #32]
 80026b8:	627a      	str	r2, [r7, #36]	; 0x24
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80026c0:	2100      	movs	r1, #0
 80026c2:	4b47      	ldr	r3, [pc, #284]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80026c4:	fb03 f201 	mul.w	r2, r3, r1
 80026c8:	2300      	movs	r3, #0
 80026ca:	fb00 f303 	mul.w	r3, r0, r3
 80026ce:	4413      	add	r3, r2
 80026d0:	4a43      	ldr	r2, [pc, #268]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80026d2:	fba0 1202 	umull	r1, r2, r0, r2
 80026d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026d8:	460a      	mov	r2, r1
 80026da:	62ba      	str	r2, [r7, #40]	; 0x28
 80026dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026de:	4413      	add	r3, r2
 80026e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e4:	2200      	movs	r2, #0
 80026e6:	61bb      	str	r3, [r7, #24]
 80026e8:	61fa      	str	r2, [r7, #28]
 80026ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80026f2:	f7fd fdc5 	bl	8000280 <__aeabi_uldivmod>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4613      	mov	r3, r2
 80026fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026fe:	e053      	b.n	80027a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002700:	4b35      	ldr	r3, [pc, #212]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	099b      	lsrs	r3, r3, #6
 8002706:	2200      	movs	r2, #0
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	617a      	str	r2, [r7, #20]
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002712:	f04f 0b00 	mov.w	fp, #0
 8002716:	4652      	mov	r2, sl
 8002718:	465b      	mov	r3, fp
 800271a:	f04f 0000 	mov.w	r0, #0
 800271e:	f04f 0100 	mov.w	r1, #0
 8002722:	0159      	lsls	r1, r3, #5
 8002724:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002728:	0150      	lsls	r0, r2, #5
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	ebb2 080a 	subs.w	r8, r2, sl
 8002732:	eb63 090b 	sbc.w	r9, r3, fp
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	f04f 0300 	mov.w	r3, #0
 800273e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002742:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002746:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800274a:	ebb2 0408 	subs.w	r4, r2, r8
 800274e:	eb63 0509 	sbc.w	r5, r3, r9
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	f04f 0300 	mov.w	r3, #0
 800275a:	00eb      	lsls	r3, r5, #3
 800275c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002760:	00e2      	lsls	r2, r4, #3
 8002762:	4614      	mov	r4, r2
 8002764:	461d      	mov	r5, r3
 8002766:	eb14 030a 	adds.w	r3, r4, sl
 800276a:	603b      	str	r3, [r7, #0]
 800276c:	eb45 030b 	adc.w	r3, r5, fp
 8002770:	607b      	str	r3, [r7, #4]
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	f04f 0300 	mov.w	r3, #0
 800277a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800277e:	4629      	mov	r1, r5
 8002780:	028b      	lsls	r3, r1, #10
 8002782:	4621      	mov	r1, r4
 8002784:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002788:	4621      	mov	r1, r4
 800278a:	028a      	lsls	r2, r1, #10
 800278c:	4610      	mov	r0, r2
 800278e:	4619      	mov	r1, r3
 8002790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002792:	2200      	movs	r2, #0
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	60fa      	str	r2, [r7, #12]
 8002798:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800279c:	f7fd fd70 	bl	8000280 <__aeabi_uldivmod>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4613      	mov	r3, r2
 80027a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	0c1b      	lsrs	r3, r3, #16
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	3301      	adds	r3, #1
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80027b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027c2:	e002      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027c4:	4b05      	ldr	r3, [pc, #20]	; (80027dc <HAL_RCC_GetSysClockFreq+0x184>)
 80027c6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3740      	adds	r7, #64	; 0x40
 80027d0:	46bd      	mov	sp, r7
 80027d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800
 80027dc:	00f42400 	.word	0x00f42400
 80027e0:	017d7840 	.word	0x017d7840

080027e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027e8:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027ea:	681b      	ldr	r3, [r3, #0]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	200000ec 	.word	0x200000ec

080027fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002800:	f7ff fff0 	bl	80027e4 <HAL_RCC_GetHCLKFreq>
 8002804:	4602      	mov	r2, r0
 8002806:	4b05      	ldr	r3, [pc, #20]	; (800281c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	0a9b      	lsrs	r3, r3, #10
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	4903      	ldr	r1, [pc, #12]	; (8002820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002812:	5ccb      	ldrb	r3, [r1, r3]
 8002814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002818:	4618      	mov	r0, r3
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40023800 	.word	0x40023800
 8002820:	080050fc 	.word	0x080050fc

08002824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002828:	f7ff ffdc 	bl	80027e4 <HAL_RCC_GetHCLKFreq>
 800282c:	4602      	mov	r2, r0
 800282e:	4b05      	ldr	r3, [pc, #20]	; (8002844 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	0b5b      	lsrs	r3, r3, #13
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	4903      	ldr	r1, [pc, #12]	; (8002848 <HAL_RCC_GetPCLK2Freq+0x24>)
 800283a:	5ccb      	ldrb	r3, [r1, r3]
 800283c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002840:	4618      	mov	r0, r3
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40023800 	.word	0x40023800
 8002848:	080050fc 	.word	0x080050fc

0800284c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e07b      	b.n	8002956 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	2b00      	cmp	r3, #0
 8002864:	d108      	bne.n	8002878 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800286e:	d009      	beq.n	8002884 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	61da      	str	r2, [r3, #28]
 8002876:	e005      	b.n	8002884 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d106      	bne.n	80028a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7fe fdf8 	bl	8001494 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2202      	movs	r2, #2
 80028a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80028cc:	431a      	orrs	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002908:	ea42 0103 	orr.w	r1, r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002910:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	0c1b      	lsrs	r3, r3, #16
 8002922:	f003 0104 	and.w	r1, r3, #4
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	f003 0210 	and.w	r2, r3, #16
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	69da      	ldr	r2, [r3, #28]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002944:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b088      	sub	sp, #32
 8002962:	af00      	add	r7, sp, #0
 8002964:	60f8      	str	r0, [r7, #12]
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	603b      	str	r3, [r7, #0]
 800296a:	4613      	mov	r3, r2
 800296c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002978:	2b01      	cmp	r3, #1
 800297a:	d101      	bne.n	8002980 <HAL_SPI_Transmit+0x22>
 800297c:	2302      	movs	r3, #2
 800297e:	e126      	b.n	8002bce <HAL_SPI_Transmit+0x270>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002988:	f7fe ffd6 	bl	8001938 <HAL_GetTick>
 800298c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800298e:	88fb      	ldrh	r3, [r7, #6]
 8002990:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b01      	cmp	r3, #1
 800299c:	d002      	beq.n	80029a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800299e:	2302      	movs	r3, #2
 80029a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029a2:	e10b      	b.n	8002bbc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <HAL_SPI_Transmit+0x52>
 80029aa:	88fb      	ldrh	r3, [r7, #6]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d102      	bne.n	80029b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029b4:	e102      	b.n	8002bbc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2203      	movs	r2, #3
 80029ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	88fa      	ldrh	r2, [r7, #6]
 80029ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	88fa      	ldrh	r2, [r7, #6]
 80029d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029fc:	d10f      	bne.n	8002a1e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a28:	2b40      	cmp	r3, #64	; 0x40
 8002a2a:	d007      	beq.n	8002a3c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a44:	d14b      	bne.n	8002ade <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <HAL_SPI_Transmit+0xf6>
 8002a4e:	8afb      	ldrh	r3, [r7, #22]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d13e      	bne.n	8002ad2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a58:	881a      	ldrh	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	1c9a      	adds	r2, r3, #2
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	3b01      	subs	r3, #1
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a78:	e02b      	b.n	8002ad2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d112      	bne.n	8002aae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	881a      	ldrh	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a98:	1c9a      	adds	r2, r3, #2
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	86da      	strh	r2, [r3, #54]	; 0x36
 8002aac:	e011      	b.n	8002ad2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002aae:	f7fe ff43 	bl	8001938 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d803      	bhi.n	8002ac6 <HAL_SPI_Transmit+0x168>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac4:	d102      	bne.n	8002acc <HAL_SPI_Transmit+0x16e>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d102      	bne.n	8002ad2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ad0:	e074      	b.n	8002bbc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1ce      	bne.n	8002a7a <HAL_SPI_Transmit+0x11c>
 8002adc:	e04c      	b.n	8002b78 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <HAL_SPI_Transmit+0x18e>
 8002ae6:	8afb      	ldrh	r3, [r7, #22]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d140      	bne.n	8002b6e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	330c      	adds	r3, #12
 8002af6:	7812      	ldrb	r2, [r2, #0]
 8002af8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	1c5a      	adds	r2, r3, #1
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002b12:	e02c      	b.n	8002b6e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d113      	bne.n	8002b4a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	330c      	adds	r3, #12
 8002b2c:	7812      	ldrb	r2, [r2, #0]
 8002b2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b48:	e011      	b.n	8002b6e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b4a:	f7fe fef5 	bl	8001938 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d803      	bhi.n	8002b62 <HAL_SPI_Transmit+0x204>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b60:	d102      	bne.n	8002b68 <HAL_SPI_Transmit+0x20a>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d102      	bne.n	8002b6e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b6c:	e026      	b.n	8002bbc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1cd      	bne.n	8002b14 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	6839      	ldr	r1, [r7, #0]
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 fce9 	bl	8003554 <SPI_EndRxTxTransaction>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d002      	beq.n	8002b8e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10a      	bne.n	8002bac <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b96:	2300      	movs	r3, #0
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	613b      	str	r3, [r7, #16]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d002      	beq.n	8002bba <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	77fb      	strb	r3, [r7, #31]
 8002bb8:	e000      	b.n	8002bbc <HAL_SPI_Transmit+0x25e>
  }

error:
 8002bba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002bcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3720      	adds	r7, #32
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b088      	sub	sp, #32
 8002bda:	af02      	add	r7, sp, #8
 8002bdc:	60f8      	str	r0, [r7, #12]
 8002bde:	60b9      	str	r1, [r7, #8]
 8002be0:	603b      	str	r3, [r7, #0]
 8002be2:	4613      	mov	r3, r2
 8002be4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bf2:	d112      	bne.n	8002c1a <HAL_SPI_Receive+0x44>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10e      	bne.n	8002c1a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2204      	movs	r2, #4
 8002c00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002c04:	88fa      	ldrh	r2, [r7, #6]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	68b9      	ldr	r1, [r7, #8]
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f000 f8f1 	bl	8002df8 <HAL_SPI_TransmitReceive>
 8002c16:	4603      	mov	r3, r0
 8002c18:	e0ea      	b.n	8002df0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_SPI_Receive+0x52>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e0e3      	b.n	8002df0 <HAL_SPI_Receive+0x21a>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c30:	f7fe fe82 	bl	8001938 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d002      	beq.n	8002c48 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002c42:	2302      	movs	r3, #2
 8002c44:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c46:	e0ca      	b.n	8002dde <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d002      	beq.n	8002c54 <HAL_SPI_Receive+0x7e>
 8002c4e:	88fb      	ldrh	r3, [r7, #6]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d102      	bne.n	8002c5a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c58:	e0c1      	b.n	8002dde <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2204      	movs	r2, #4
 8002c5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	88fa      	ldrh	r2, [r7, #6]
 8002c72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	88fa      	ldrh	r2, [r7, #6]
 8002c78:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ca0:	d10f      	bne.n	8002cc2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cb0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002cc0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ccc:	2b40      	cmp	r3, #64	; 0x40
 8002cce:	d007      	beq.n	8002ce0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cde:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d162      	bne.n	8002dae <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ce8:	e02e      	b.n	8002d48 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d115      	bne.n	8002d24 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f103 020c 	add.w	r2, r3, #12
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d04:	7812      	ldrb	r2, [r2, #0]
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d22:	e011      	b.n	8002d48 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d24:	f7fe fe08 	bl	8001938 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d803      	bhi.n	8002d3c <HAL_SPI_Receive+0x166>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3a:	d102      	bne.n	8002d42 <HAL_SPI_Receive+0x16c>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d102      	bne.n	8002d48 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002d46:	e04a      	b.n	8002dde <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1cb      	bne.n	8002cea <HAL_SPI_Receive+0x114>
 8002d52:	e031      	b.n	8002db8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d113      	bne.n	8002d8a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6c:	b292      	uxth	r2, r2
 8002d6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d74:	1c9a      	adds	r2, r3, #2
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d88:	e011      	b.n	8002dae <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d8a:	f7fe fdd5 	bl	8001938 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d803      	bhi.n	8002da2 <HAL_SPI_Receive+0x1cc>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da0:	d102      	bne.n	8002da8 <HAL_SPI_Receive+0x1d2>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d102      	bne.n	8002dae <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002dac:	e017      	b.n	8002dde <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1cd      	bne.n	8002d54 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	6839      	ldr	r1, [r7, #0]
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 fb63 	bl	8003488 <SPI_EndRxTransaction>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	75fb      	strb	r3, [r7, #23]
 8002dda:	e000      	b.n	8002dde <HAL_SPI_Receive+0x208>
  }

error :
 8002ddc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08c      	sub	sp, #48	; 0x30
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e06:	2301      	movs	r3, #1
 8002e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d101      	bne.n	8002e1e <HAL_SPI_TransmitReceive+0x26>
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	e18a      	b.n	8003134 <HAL_SPI_TransmitReceive+0x33c>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e26:	f7fe fd87 	bl	8001938 <HAL_GetTick>
 8002e2a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002e3c:	887b      	ldrh	r3, [r7, #2]
 8002e3e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d00f      	beq.n	8002e68 <HAL_SPI_TransmitReceive+0x70>
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e4e:	d107      	bne.n	8002e60 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d103      	bne.n	8002e60 <HAL_SPI_TransmitReceive+0x68>
 8002e58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d003      	beq.n	8002e68 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002e60:	2302      	movs	r3, #2
 8002e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e66:	e15b      	b.n	8003120 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d005      	beq.n	8002e7a <HAL_SPI_TransmitReceive+0x82>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d002      	beq.n	8002e7a <HAL_SPI_TransmitReceive+0x82>
 8002e74:	887b      	ldrh	r3, [r7, #2]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d103      	bne.n	8002e82 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e80:	e14e      	b.n	8003120 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d003      	beq.n	8002e96 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2205      	movs	r2, #5
 8002e92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	887a      	ldrh	r2, [r7, #2]
 8002ea6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	887a      	ldrh	r2, [r7, #2]
 8002eac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	887a      	ldrh	r2, [r7, #2]
 8002eb8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	887a      	ldrh	r2, [r7, #2]
 8002ebe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed6:	2b40      	cmp	r3, #64	; 0x40
 8002ed8:	d007      	beq.n	8002eea <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ee8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ef2:	d178      	bne.n	8002fe6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d002      	beq.n	8002f02 <HAL_SPI_TransmitReceive+0x10a>
 8002efc:	8b7b      	ldrh	r3, [r7, #26]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d166      	bne.n	8002fd0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	881a      	ldrh	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	1c9a      	adds	r2, r3, #2
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f26:	e053      	b.n	8002fd0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d11b      	bne.n	8002f6e <HAL_SPI_TransmitReceive+0x176>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d016      	beq.n	8002f6e <HAL_SPI_TransmitReceive+0x176>
 8002f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d113      	bne.n	8002f6e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	881a      	ldrh	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	1c9a      	adds	r2, r3, #2
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d119      	bne.n	8002fb0 <HAL_SPI_TransmitReceive+0x1b8>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d014      	beq.n	8002fb0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f90:	b292      	uxth	r2, r2
 8002f92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f98:	1c9a      	adds	r2, r3, #2
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fac:	2301      	movs	r3, #1
 8002fae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002fb0:	f7fe fcc2 	bl	8001938 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d807      	bhi.n	8002fd0 <HAL_SPI_TransmitReceive+0x1d8>
 8002fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc6:	d003      	beq.n	8002fd0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002fce:	e0a7      	b.n	8003120 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1a6      	bne.n	8002f28 <HAL_SPI_TransmitReceive+0x130>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1a1      	bne.n	8002f28 <HAL_SPI_TransmitReceive+0x130>
 8002fe4:	e07c      	b.n	80030e0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d002      	beq.n	8002ff4 <HAL_SPI_TransmitReceive+0x1fc>
 8002fee:	8b7b      	ldrh	r3, [r7, #26]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d16b      	bne.n	80030cc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	330c      	adds	r3, #12
 8002ffe:	7812      	ldrb	r2, [r2, #0]
 8003000:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	1c5a      	adds	r2, r3, #1
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003010:	b29b      	uxth	r3, r3
 8003012:	3b01      	subs	r3, #1
 8003014:	b29a      	uxth	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800301a:	e057      	b.n	80030cc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b02      	cmp	r3, #2
 8003028:	d11c      	bne.n	8003064 <HAL_SPI_TransmitReceive+0x26c>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800302e:	b29b      	uxth	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d017      	beq.n	8003064 <HAL_SPI_TransmitReceive+0x26c>
 8003034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003036:	2b01      	cmp	r3, #1
 8003038:	d114      	bne.n	8003064 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	330c      	adds	r3, #12
 8003044:	7812      	ldrb	r2, [r2, #0]
 8003046:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003056:	b29b      	uxth	r3, r3
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b01      	cmp	r3, #1
 8003070:	d119      	bne.n	80030a6 <HAL_SPI_TransmitReceive+0x2ae>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003076:	b29b      	uxth	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	d014      	beq.n	80030a6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003098:	b29b      	uxth	r3, r3
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030a2:	2301      	movs	r3, #1
 80030a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80030a6:	f7fe fc47 	bl	8001938 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d803      	bhi.n	80030be <HAL_SPI_TransmitReceive+0x2c6>
 80030b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030bc:	d102      	bne.n	80030c4 <HAL_SPI_TransmitReceive+0x2cc>
 80030be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d103      	bne.n	80030cc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80030ca:	e029      	b.n	8003120 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1a2      	bne.n	800301c <HAL_SPI_TransmitReceive+0x224>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030da:	b29b      	uxth	r3, r3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d19d      	bne.n	800301c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 fa35 	bl	8003554 <SPI_EndRxTxTransaction>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d006      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2220      	movs	r2, #32
 80030fa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80030fc:	e010      	b.n	8003120 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10b      	bne.n	800311e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	e000      	b.n	8003120 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800311e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003130:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003134:	4618      	mov	r0, r3
 8003136:	3730      	adds	r7, #48	; 0x30
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	099b      	lsrs	r3, r3, #6
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10f      	bne.n	8003180 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	099b      	lsrs	r3, r3, #6
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d004      	beq.n	8003180 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	4798      	blx	r3
    return;
 800317e:	e0d7      	b.n	8003330 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	085b      	lsrs	r3, r3, #1
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00a      	beq.n	80031a2 <HAL_SPI_IRQHandler+0x66>
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	09db      	lsrs	r3, r3, #7
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b00      	cmp	r3, #0
 8003196:	d004      	beq.n	80031a2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	4798      	blx	r3
    return;
 80031a0:	e0c6      	b.n	8003330 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	095b      	lsrs	r3, r3, #5
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10c      	bne.n	80031c8 <HAL_SPI_IRQHandler+0x8c>
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	099b      	lsrs	r3, r3, #6
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	0a1b      	lsrs	r3, r3, #8
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 80b4 	beq.w	8003330 <HAL_SPI_IRQHandler+0x1f4>
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 80ad 	beq.w	8003330 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	099b      	lsrs	r3, r3, #6
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d023      	beq.n	800322a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d011      	beq.n	8003212 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f2:	f043 0204 	orr.w	r2, r3, #4
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	617b      	str	r3, [r7, #20]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	e00b      	b.n	800322a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003212:	2300      	movs	r3, #0
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	613b      	str	r3, [r7, #16]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	613b      	str	r3, [r7, #16]
 8003226:	693b      	ldr	r3, [r7, #16]
        return;
 8003228:	e082      	b.n	8003330 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	095b      	lsrs	r3, r3, #5
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d014      	beq.n	8003260 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323a:	f043 0201 	orr.w	r2, r3, #1
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	0a1b      	lsrs	r3, r3, #8
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00c      	beq.n	8003286 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003270:	f043 0208 	orr.w	r2, r3, #8
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003278:	2300      	movs	r3, #0
 800327a:	60bb      	str	r3, [r7, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	60bb      	str	r3, [r7, #8]
 8003284:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328a:	2b00      	cmp	r3, #0
 800328c:	d04f      	beq.n	800332e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800329c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d104      	bne.n	80032ba <HAL_SPI_IRQHandler+0x17e>
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d034      	beq.n	8003324 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0203 	bic.w	r2, r2, #3
 80032c8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d011      	beq.n	80032f6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d6:	4a18      	ldr	r2, [pc, #96]	; (8003338 <HAL_SPI_IRQHandler+0x1fc>)
 80032d8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fe fc6b 	bl	8001bba <HAL_DMA_Abort_IT>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d005      	beq.n	80032f6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d016      	beq.n	800332c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003302:	4a0d      	ldr	r2, [pc, #52]	; (8003338 <HAL_SPI_IRQHandler+0x1fc>)
 8003304:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800330a:	4618      	mov	r0, r3
 800330c:	f7fe fc55 	bl	8001bba <HAL_DMA_Abort_IT>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003322:	e003      	b.n	800332c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f809 	bl	800333c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800332a:	e000      	b.n	800332e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800332c:	bf00      	nop
    return;
 800332e:	bf00      	nop
  }
}
 8003330:	3720      	adds	r7, #32
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	08003351 	.word	0x08003351

0800333c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f7ff ffe6 	bl	800333c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003370:	bf00      	nop
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	4613      	mov	r3, r2
 8003386:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003388:	f7fe fad6 	bl	8001938 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	4413      	add	r3, r2
 8003396:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003398:	f7fe face 	bl	8001938 <HAL_GetTick>
 800339c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800339e:	4b39      	ldr	r3, [pc, #228]	; (8003484 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	015b      	lsls	r3, r3, #5
 80033a4:	0d1b      	lsrs	r3, r3, #20
 80033a6:	69fa      	ldr	r2, [r7, #28]
 80033a8:	fb02 f303 	mul.w	r3, r2, r3
 80033ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033ae:	e054      	b.n	800345a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b6:	d050      	beq.n	800345a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033b8:	f7fe fabe 	bl	8001938 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	69fa      	ldr	r2, [r7, #28]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d902      	bls.n	80033ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d13d      	bne.n	800344a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033e6:	d111      	bne.n	800340c <SPI_WaitFlagStateUntilTimeout+0x94>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033f0:	d004      	beq.n	80033fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033fa:	d107      	bne.n	800340c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800340a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003410:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003414:	d10f      	bne.n	8003436 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003434:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e017      	b.n	800347a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003450:	2300      	movs	r3, #0
 8003452:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	3b01      	subs	r3, #1
 8003458:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4013      	ands	r3, r2
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	429a      	cmp	r2, r3
 8003468:	bf0c      	ite	eq
 800346a:	2301      	moveq	r3, #1
 800346c:	2300      	movne	r3, #0
 800346e:	b2db      	uxtb	r3, r3
 8003470:	461a      	mov	r2, r3
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	429a      	cmp	r2, r3
 8003476:	d19b      	bne.n	80033b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3720      	adds	r7, #32
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	200000ec 	.word	0x200000ec

08003488 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af02      	add	r7, sp, #8
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800349c:	d111      	bne.n	80034c2 <SPI_EndRxTransaction+0x3a>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034a6:	d004      	beq.n	80034b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b0:	d107      	bne.n	80034c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034c0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ca:	d12a      	bne.n	8003522 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d4:	d012      	beq.n	80034fc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	2200      	movs	r2, #0
 80034de:	2180      	movs	r1, #128	; 0x80
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f7ff ff49 	bl	8003378 <SPI_WaitFlagStateUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d02d      	beq.n	8003548 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f0:	f043 0220 	orr.w	r2, r3, #32
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e026      	b.n	800354a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2200      	movs	r2, #0
 8003504:	2101      	movs	r1, #1
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f7ff ff36 	bl	8003378 <SPI_WaitFlagStateUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d01a      	beq.n	8003548 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003516:	f043 0220 	orr.w	r2, r3, #32
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e013      	b.n	800354a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2200      	movs	r2, #0
 800352a:	2101      	movs	r1, #1
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f7ff ff23 	bl	8003378 <SPI_WaitFlagStateUntilTimeout>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d007      	beq.n	8003548 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353c:	f043 0220 	orr.w	r2, r3, #32
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e000      	b.n	800354a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af02      	add	r7, sp, #8
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003560:	4b1b      	ldr	r3, [pc, #108]	; (80035d0 <SPI_EndRxTxTransaction+0x7c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a1b      	ldr	r2, [pc, #108]	; (80035d4 <SPI_EndRxTxTransaction+0x80>)
 8003566:	fba2 2303 	umull	r2, r3, r2, r3
 800356a:	0d5b      	lsrs	r3, r3, #21
 800356c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003570:	fb02 f303 	mul.w	r3, r2, r3
 8003574:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800357e:	d112      	bne.n	80035a6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2200      	movs	r2, #0
 8003588:	2180      	movs	r1, #128	; 0x80
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f7ff fef4 	bl	8003378 <SPI_WaitFlagStateUntilTimeout>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d016      	beq.n	80035c4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359a:	f043 0220 	orr.w	r2, r3, #32
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e00f      	b.n	80035c6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035bc:	2b80      	cmp	r3, #128	; 0x80
 80035be:	d0f2      	beq.n	80035a6 <SPI_EndRxTxTransaction+0x52>
 80035c0:	e000      	b.n	80035c4 <SPI_EndRxTxTransaction+0x70>
        break;
 80035c2:	bf00      	nop
  }

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	200000ec 	.word	0x200000ec
 80035d4:	165e9f81 	.word	0x165e9f81

080035d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e03f      	b.n	800366a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d106      	bne.n	8003604 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7fe f824 	bl	800164c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2224      	movs	r2, #36	; 0x24
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800361a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f9cb 	bl	80039b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003630:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695a      	ldr	r2, [r3, #20]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003640:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68da      	ldr	r2, [r3, #12]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003650:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b08a      	sub	sp, #40	; 0x28
 8003676:	af02      	add	r7, sp, #8
 8003678:	60f8      	str	r0, [r7, #12]
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	603b      	str	r3, [r7, #0]
 800367e:	4613      	mov	r3, r2
 8003680:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003682:	2300      	movs	r3, #0
 8003684:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b20      	cmp	r3, #32
 8003690:	d17c      	bne.n	800378c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d002      	beq.n	800369e <HAL_UART_Transmit+0x2c>
 8003698:	88fb      	ldrh	r3, [r7, #6]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e075      	b.n	800378e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <HAL_UART_Transmit+0x3e>
 80036ac:	2302      	movs	r3, #2
 80036ae:	e06e      	b.n	800378e <HAL_UART_Transmit+0x11c>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2221      	movs	r2, #33	; 0x21
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036c6:	f7fe f937 	bl	8001938 <HAL_GetTick>
 80036ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	88fa      	ldrh	r2, [r7, #6]
 80036d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	88fa      	ldrh	r2, [r7, #6]
 80036d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e0:	d108      	bne.n	80036f4 <HAL_UART_Transmit+0x82>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d104      	bne.n	80036f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	61bb      	str	r3, [r7, #24]
 80036f2:	e003      	b.n	80036fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036f8:	2300      	movs	r3, #0
 80036fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003704:	e02a      	b.n	800375c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	2200      	movs	r2, #0
 800370e:	2180      	movs	r1, #128	; 0x80
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 f8e2 	bl	80038da <UART_WaitOnFlagUntilTimeout>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e036      	b.n	800378e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10b      	bne.n	800373e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	461a      	mov	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003734:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	3302      	adds	r3, #2
 800373a:	61bb      	str	r3, [r7, #24]
 800373c:	e007      	b.n	800374e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	781a      	ldrb	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	3301      	adds	r3, #1
 800374c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003760:	b29b      	uxth	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1cf      	bne.n	8003706 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2200      	movs	r2, #0
 800376e:	2140      	movs	r1, #64	; 0x40
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 f8b2 	bl	80038da <UART_WaitOnFlagUntilTimeout>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e006      	b.n	800378e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	e000      	b.n	800378e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800378c:	2302      	movs	r3, #2
  }
}
 800378e:	4618      	mov	r0, r3
 8003790:	3720      	adds	r7, #32
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b08a      	sub	sp, #40	; 0x28
 800379a:	af02      	add	r7, sp, #8
 800379c:	60f8      	str	r0, [r7, #12]
 800379e:	60b9      	str	r1, [r7, #8]
 80037a0:	603b      	str	r3, [r7, #0]
 80037a2:	4613      	mov	r3, r2
 80037a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b20      	cmp	r3, #32
 80037b4:	f040 808c 	bne.w	80038d0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <HAL_UART_Receive+0x2e>
 80037be:	88fb      	ldrh	r3, [r7, #6]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e084      	b.n	80038d2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d101      	bne.n	80037d6 <HAL_UART_Receive+0x40>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e07d      	b.n	80038d2 <HAL_UART_Receive+0x13c>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2222      	movs	r2, #34	; 0x22
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037f2:	f7fe f8a1 	bl	8001938 <HAL_GetTick>
 80037f6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	88fa      	ldrh	r2, [r7, #6]
 80037fc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	88fa      	ldrh	r2, [r7, #6]
 8003802:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800380c:	d108      	bne.n	8003820 <HAL_UART_Receive+0x8a>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d104      	bne.n	8003820 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003816:	2300      	movs	r3, #0
 8003818:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	61bb      	str	r3, [r7, #24]
 800381e:	e003      	b.n	8003828 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003824:	2300      	movs	r3, #0
 8003826:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003830:	e043      	b.n	80038ba <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2200      	movs	r2, #0
 800383a:	2120      	movs	r1, #32
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 f84c 	bl	80038da <UART_WaitOnFlagUntilTimeout>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e042      	b.n	80038d2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10c      	bne.n	800386c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	b29b      	uxth	r3, r3
 800385a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800385e:	b29a      	uxth	r2, r3
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	3302      	adds	r3, #2
 8003868:	61bb      	str	r3, [r7, #24]
 800386a:	e01f      	b.n	80038ac <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003874:	d007      	beq.n	8003886 <HAL_UART_Receive+0xf0>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10a      	bne.n	8003894 <HAL_UART_Receive+0xfe>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d106      	bne.n	8003894 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	b2da      	uxtb	r2, r3
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	701a      	strb	r2, [r3, #0]
 8003892:	e008      	b.n	80038a6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	b2db      	uxtb	r3, r3
 800389c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	3301      	adds	r3, #1
 80038aa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	3b01      	subs	r3, #1
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038be:	b29b      	uxth	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1b6      	bne.n	8003832 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	e000      	b.n	80038d2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80038d0:	2302      	movs	r3, #2
  }
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3720      	adds	r7, #32
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b090      	sub	sp, #64	; 0x40
 80038de:	af00      	add	r7, sp, #0
 80038e0:	60f8      	str	r0, [r7, #12]
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	603b      	str	r3, [r7, #0]
 80038e6:	4613      	mov	r3, r2
 80038e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ea:	e050      	b.n	800398e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f2:	d04c      	beq.n	800398e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d007      	beq.n	800390a <UART_WaitOnFlagUntilTimeout+0x30>
 80038fa:	f7fe f81d 	bl	8001938 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003906:	429a      	cmp	r2, r3
 8003908:	d241      	bcs.n	800398e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	330c      	adds	r3, #12
 8003910:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003914:	e853 3f00 	ldrex	r3, [r3]
 8003918:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003920:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	330c      	adds	r3, #12
 8003928:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800392a:	637a      	str	r2, [r7, #52]	; 0x34
 800392c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003930:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003932:	e841 2300 	strex	r3, r2, [r1]
 8003936:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1e5      	bne.n	800390a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	3314      	adds	r3, #20
 8003944:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	e853 3f00 	ldrex	r3, [r3]
 800394c:	613b      	str	r3, [r7, #16]
   return(result);
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	f023 0301 	bic.w	r3, r3, #1
 8003954:	63bb      	str	r3, [r7, #56]	; 0x38
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	3314      	adds	r3, #20
 800395c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800395e:	623a      	str	r2, [r7, #32]
 8003960:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003962:	69f9      	ldr	r1, [r7, #28]
 8003964:	6a3a      	ldr	r2, [r7, #32]
 8003966:	e841 2300 	strex	r3, r2, [r1]
 800396a:	61bb      	str	r3, [r7, #24]
   return(result);
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1e5      	bne.n	800393e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e00f      	b.n	80039ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	4013      	ands	r3, r2
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	429a      	cmp	r2, r3
 800399c:	bf0c      	ite	eq
 800399e:	2301      	moveq	r3, #1
 80039a0:	2300      	movne	r3, #0
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	461a      	mov	r2, r3
 80039a6:	79fb      	ldrb	r3, [r7, #7]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d09f      	beq.n	80038ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3740      	adds	r7, #64	; 0x40
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
	...

080039b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039bc:	b0c0      	sub	sp, #256	; 0x100
 80039be:	af00      	add	r7, sp, #0
 80039c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80039d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d4:	68d9      	ldr	r1, [r3, #12]
 80039d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	ea40 0301 	orr.w	r3, r0, r1
 80039e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	431a      	orrs	r2, r3
 80039f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	431a      	orrs	r2, r3
 80039f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a10:	f021 010c 	bic.w	r1, r1, #12
 8003a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a1e:	430b      	orrs	r3, r1
 8003a20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a32:	6999      	ldr	r1, [r3, #24]
 8003a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	ea40 0301 	orr.w	r3, r0, r1
 8003a3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	4b8f      	ldr	r3, [pc, #572]	; (8003c84 <UART_SetConfig+0x2cc>)
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d005      	beq.n	8003a58 <UART_SetConfig+0xa0>
 8003a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	4b8d      	ldr	r3, [pc, #564]	; (8003c88 <UART_SetConfig+0x2d0>)
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d104      	bne.n	8003a62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a58:	f7fe fee4 	bl	8002824 <HAL_RCC_GetPCLK2Freq>
 8003a5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003a60:	e003      	b.n	8003a6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a62:	f7fe fecb 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 8003a66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a74:	f040 810c 	bne.w	8003c90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a8a:	4622      	mov	r2, r4
 8003a8c:	462b      	mov	r3, r5
 8003a8e:	1891      	adds	r1, r2, r2
 8003a90:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a92:	415b      	adcs	r3, r3
 8003a94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a9a:	4621      	mov	r1, r4
 8003a9c:	eb12 0801 	adds.w	r8, r2, r1
 8003aa0:	4629      	mov	r1, r5
 8003aa2:	eb43 0901 	adc.w	r9, r3, r1
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ab2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ab6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003aba:	4690      	mov	r8, r2
 8003abc:	4699      	mov	r9, r3
 8003abe:	4623      	mov	r3, r4
 8003ac0:	eb18 0303 	adds.w	r3, r8, r3
 8003ac4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ac8:	462b      	mov	r3, r5
 8003aca:	eb49 0303 	adc.w	r3, r9, r3
 8003ace:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ade:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003ae2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	18db      	adds	r3, r3, r3
 8003aea:	653b      	str	r3, [r7, #80]	; 0x50
 8003aec:	4613      	mov	r3, r2
 8003aee:	eb42 0303 	adc.w	r3, r2, r3
 8003af2:	657b      	str	r3, [r7, #84]	; 0x54
 8003af4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003af8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003afc:	f7fc fbc0 	bl	8000280 <__aeabi_uldivmod>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4b61      	ldr	r3, [pc, #388]	; (8003c8c <UART_SetConfig+0x2d4>)
 8003b06:	fba3 2302 	umull	r2, r3, r3, r2
 8003b0a:	095b      	lsrs	r3, r3, #5
 8003b0c:	011c      	lsls	r4, r3, #4
 8003b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b12:	2200      	movs	r2, #0
 8003b14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003b1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003b20:	4642      	mov	r2, r8
 8003b22:	464b      	mov	r3, r9
 8003b24:	1891      	adds	r1, r2, r2
 8003b26:	64b9      	str	r1, [r7, #72]	; 0x48
 8003b28:	415b      	adcs	r3, r3
 8003b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b30:	4641      	mov	r1, r8
 8003b32:	eb12 0a01 	adds.w	sl, r2, r1
 8003b36:	4649      	mov	r1, r9
 8003b38:	eb43 0b01 	adc.w	fp, r3, r1
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b50:	4692      	mov	sl, r2
 8003b52:	469b      	mov	fp, r3
 8003b54:	4643      	mov	r3, r8
 8003b56:	eb1a 0303 	adds.w	r3, sl, r3
 8003b5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b5e:	464b      	mov	r3, r9
 8003b60:	eb4b 0303 	adc.w	r3, fp, r3
 8003b64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	18db      	adds	r3, r3, r3
 8003b80:	643b      	str	r3, [r7, #64]	; 0x40
 8003b82:	4613      	mov	r3, r2
 8003b84:	eb42 0303 	adc.w	r3, r2, r3
 8003b88:	647b      	str	r3, [r7, #68]	; 0x44
 8003b8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b92:	f7fc fb75 	bl	8000280 <__aeabi_uldivmod>
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	4b3b      	ldr	r3, [pc, #236]	; (8003c8c <UART_SetConfig+0x2d4>)
 8003b9e:	fba3 2301 	umull	r2, r3, r3, r1
 8003ba2:	095b      	lsrs	r3, r3, #5
 8003ba4:	2264      	movs	r2, #100	; 0x64
 8003ba6:	fb02 f303 	mul.w	r3, r2, r3
 8003baa:	1acb      	subs	r3, r1, r3
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003bb2:	4b36      	ldr	r3, [pc, #216]	; (8003c8c <UART_SetConfig+0x2d4>)
 8003bb4:	fba3 2302 	umull	r2, r3, r3, r2
 8003bb8:	095b      	lsrs	r3, r3, #5
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bc0:	441c      	add	r4, r3
 8003bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003bcc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003bd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003bd4:	4642      	mov	r2, r8
 8003bd6:	464b      	mov	r3, r9
 8003bd8:	1891      	adds	r1, r2, r2
 8003bda:	63b9      	str	r1, [r7, #56]	; 0x38
 8003bdc:	415b      	adcs	r3, r3
 8003bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003be0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003be4:	4641      	mov	r1, r8
 8003be6:	1851      	adds	r1, r2, r1
 8003be8:	6339      	str	r1, [r7, #48]	; 0x30
 8003bea:	4649      	mov	r1, r9
 8003bec:	414b      	adcs	r3, r1
 8003bee:	637b      	str	r3, [r7, #52]	; 0x34
 8003bf0:	f04f 0200 	mov.w	r2, #0
 8003bf4:	f04f 0300 	mov.w	r3, #0
 8003bf8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003bfc:	4659      	mov	r1, fp
 8003bfe:	00cb      	lsls	r3, r1, #3
 8003c00:	4651      	mov	r1, sl
 8003c02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c06:	4651      	mov	r1, sl
 8003c08:	00ca      	lsls	r2, r1, #3
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4603      	mov	r3, r0
 8003c10:	4642      	mov	r2, r8
 8003c12:	189b      	adds	r3, r3, r2
 8003c14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c18:	464b      	mov	r3, r9
 8003c1a:	460a      	mov	r2, r1
 8003c1c:	eb42 0303 	adc.w	r3, r2, r3
 8003c20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003c34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c38:	460b      	mov	r3, r1
 8003c3a:	18db      	adds	r3, r3, r3
 8003c3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c3e:	4613      	mov	r3, r2
 8003c40:	eb42 0303 	adc.w	r3, r2, r3
 8003c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003c4e:	f7fc fb17 	bl	8000280 <__aeabi_uldivmod>
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4b0d      	ldr	r3, [pc, #52]	; (8003c8c <UART_SetConfig+0x2d4>)
 8003c58:	fba3 1302 	umull	r1, r3, r3, r2
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	2164      	movs	r1, #100	; 0x64
 8003c60:	fb01 f303 	mul.w	r3, r1, r3
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	3332      	adds	r3, #50	; 0x32
 8003c6a:	4a08      	ldr	r2, [pc, #32]	; (8003c8c <UART_SetConfig+0x2d4>)
 8003c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	f003 0207 	and.w	r2, r3, #7
 8003c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4422      	add	r2, r4
 8003c7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c80:	e105      	b.n	8003e8e <UART_SetConfig+0x4d6>
 8003c82:	bf00      	nop
 8003c84:	40011000 	.word	0x40011000
 8003c88:	40011400 	.word	0x40011400
 8003c8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c94:	2200      	movs	r2, #0
 8003c96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003ca2:	4642      	mov	r2, r8
 8003ca4:	464b      	mov	r3, r9
 8003ca6:	1891      	adds	r1, r2, r2
 8003ca8:	6239      	str	r1, [r7, #32]
 8003caa:	415b      	adcs	r3, r3
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
 8003cae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cb2:	4641      	mov	r1, r8
 8003cb4:	1854      	adds	r4, r2, r1
 8003cb6:	4649      	mov	r1, r9
 8003cb8:	eb43 0501 	adc.w	r5, r3, r1
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	f04f 0300 	mov.w	r3, #0
 8003cc4:	00eb      	lsls	r3, r5, #3
 8003cc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cca:	00e2      	lsls	r2, r4, #3
 8003ccc:	4614      	mov	r4, r2
 8003cce:	461d      	mov	r5, r3
 8003cd0:	4643      	mov	r3, r8
 8003cd2:	18e3      	adds	r3, r4, r3
 8003cd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003cd8:	464b      	mov	r3, r9
 8003cda:	eb45 0303 	adc.w	r3, r5, r3
 8003cde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003cee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003cf2:	f04f 0200 	mov.w	r2, #0
 8003cf6:	f04f 0300 	mov.w	r3, #0
 8003cfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003cfe:	4629      	mov	r1, r5
 8003d00:	008b      	lsls	r3, r1, #2
 8003d02:	4621      	mov	r1, r4
 8003d04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d08:	4621      	mov	r1, r4
 8003d0a:	008a      	lsls	r2, r1, #2
 8003d0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003d10:	f7fc fab6 	bl	8000280 <__aeabi_uldivmod>
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	4b60      	ldr	r3, [pc, #384]	; (8003e9c <UART_SetConfig+0x4e4>)
 8003d1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	011c      	lsls	r4, r3, #4
 8003d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d26:	2200      	movs	r2, #0
 8003d28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003d34:	4642      	mov	r2, r8
 8003d36:	464b      	mov	r3, r9
 8003d38:	1891      	adds	r1, r2, r2
 8003d3a:	61b9      	str	r1, [r7, #24]
 8003d3c:	415b      	adcs	r3, r3
 8003d3e:	61fb      	str	r3, [r7, #28]
 8003d40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d44:	4641      	mov	r1, r8
 8003d46:	1851      	adds	r1, r2, r1
 8003d48:	6139      	str	r1, [r7, #16]
 8003d4a:	4649      	mov	r1, r9
 8003d4c:	414b      	adcs	r3, r1
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	f04f 0200 	mov.w	r2, #0
 8003d54:	f04f 0300 	mov.w	r3, #0
 8003d58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d5c:	4659      	mov	r1, fp
 8003d5e:	00cb      	lsls	r3, r1, #3
 8003d60:	4651      	mov	r1, sl
 8003d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d66:	4651      	mov	r1, sl
 8003d68:	00ca      	lsls	r2, r1, #3
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4603      	mov	r3, r0
 8003d70:	4642      	mov	r2, r8
 8003d72:	189b      	adds	r3, r3, r2
 8003d74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d78:	464b      	mov	r3, r9
 8003d7a:	460a      	mov	r2, r1
 8003d7c:	eb42 0303 	adc.w	r3, r2, r3
 8003d80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d9c:	4649      	mov	r1, r9
 8003d9e:	008b      	lsls	r3, r1, #2
 8003da0:	4641      	mov	r1, r8
 8003da2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003da6:	4641      	mov	r1, r8
 8003da8:	008a      	lsls	r2, r1, #2
 8003daa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003dae:	f7fc fa67 	bl	8000280 <__aeabi_uldivmod>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	4b39      	ldr	r3, [pc, #228]	; (8003e9c <UART_SetConfig+0x4e4>)
 8003db8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dbc:	095b      	lsrs	r3, r3, #5
 8003dbe:	2164      	movs	r1, #100	; 0x64
 8003dc0:	fb01 f303 	mul.w	r3, r1, r3
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	3332      	adds	r3, #50	; 0x32
 8003dca:	4a34      	ldr	r2, [pc, #208]	; (8003e9c <UART_SetConfig+0x4e4>)
 8003dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd0:	095b      	lsrs	r3, r3, #5
 8003dd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dd6:	441c      	add	r4, r3
 8003dd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ddc:	2200      	movs	r2, #0
 8003dde:	673b      	str	r3, [r7, #112]	; 0x70
 8003de0:	677a      	str	r2, [r7, #116]	; 0x74
 8003de2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003de6:	4642      	mov	r2, r8
 8003de8:	464b      	mov	r3, r9
 8003dea:	1891      	adds	r1, r2, r2
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	415b      	adcs	r3, r3
 8003df0:	60fb      	str	r3, [r7, #12]
 8003df2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003df6:	4641      	mov	r1, r8
 8003df8:	1851      	adds	r1, r2, r1
 8003dfa:	6039      	str	r1, [r7, #0]
 8003dfc:	4649      	mov	r1, r9
 8003dfe:	414b      	adcs	r3, r1
 8003e00:	607b      	str	r3, [r7, #4]
 8003e02:	f04f 0200 	mov.w	r2, #0
 8003e06:	f04f 0300 	mov.w	r3, #0
 8003e0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e0e:	4659      	mov	r1, fp
 8003e10:	00cb      	lsls	r3, r1, #3
 8003e12:	4651      	mov	r1, sl
 8003e14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e18:	4651      	mov	r1, sl
 8003e1a:	00ca      	lsls	r2, r1, #3
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4603      	mov	r3, r0
 8003e22:	4642      	mov	r2, r8
 8003e24:	189b      	adds	r3, r3, r2
 8003e26:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e28:	464b      	mov	r3, r9
 8003e2a:	460a      	mov	r2, r1
 8003e2c:	eb42 0303 	adc.w	r3, r2, r3
 8003e30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	663b      	str	r3, [r7, #96]	; 0x60
 8003e3c:	667a      	str	r2, [r7, #100]	; 0x64
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	f04f 0300 	mov.w	r3, #0
 8003e46:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003e4a:	4649      	mov	r1, r9
 8003e4c:	008b      	lsls	r3, r1, #2
 8003e4e:	4641      	mov	r1, r8
 8003e50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e54:	4641      	mov	r1, r8
 8003e56:	008a      	lsls	r2, r1, #2
 8003e58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e5c:	f7fc fa10 	bl	8000280 <__aeabi_uldivmod>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	4b0d      	ldr	r3, [pc, #52]	; (8003e9c <UART_SetConfig+0x4e4>)
 8003e66:	fba3 1302 	umull	r1, r3, r3, r2
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	2164      	movs	r1, #100	; 0x64
 8003e6e:	fb01 f303 	mul.w	r3, r1, r3
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	3332      	adds	r3, #50	; 0x32
 8003e78:	4a08      	ldr	r2, [pc, #32]	; (8003e9c <UART_SetConfig+0x4e4>)
 8003e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	f003 020f 	and.w	r2, r3, #15
 8003e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4422      	add	r2, r4
 8003e8c:	609a      	str	r2, [r3, #8]
}
 8003e8e:	bf00      	nop
 8003e90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e94:	46bd      	mov	sp, r7
 8003e96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e9a:	bf00      	nop
 8003e9c:	51eb851f 	.word	0x51eb851f

08003ea0 <nRF24_CSN_Select>:
#include "main.h"

#define ELBC

void nRF24_CSN_Select(uint16_t Sel_CSN_Pin)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	80fb      	strh	r3, [r7, #6]
	switch (Sel_CSN_Pin)
 8003eaa:	88fb      	ldrh	r3, [r7, #6]
 8003eac:	3b01      	subs	r3, #1
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d82c      	bhi.n	8003f0c <nRF24_CSN_Select+0x6c>
 8003eb2:	a201      	add	r2, pc, #4	; (adr r2, 8003eb8 <nRF24_CSN_Select+0x18>)
 8003eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb8:	08003ed9 	.word	0x08003ed9
 8003ebc:	08003ee5 	.word	0x08003ee5
 8003ec0:	08003ef1 	.word	0x08003ef1
 8003ec4:	08003eff 	.word	0x08003eff
 8003ec8:	08003ecd 	.word	0x08003ecd
	{
		case Sel_EL_Module:
			HAL_GPIO_WritePin(GPIOC, nRF_EL_CSN_Pin, GPIO_PIN_RESET);
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2101      	movs	r1, #1
 8003ed0:	4810      	ldr	r0, [pc, #64]	; (8003f14 <nRF24_CSN_Select+0x74>)
 8003ed2:	f7fe f831 	bl	8001f38 <HAL_GPIO_WritePin>
			break;
 8003ed6:	e019      	b.n	8003f0c <nRF24_CSN_Select+0x6c>
		case Sel_B_Module1:
			HAL_GPIO_WritePin(GPIOC, nRF_B_CSN1_Pin, GPIO_PIN_RESET);
 8003ed8:	2200      	movs	r2, #0
 8003eda:	2120      	movs	r1, #32
 8003edc:	480d      	ldr	r0, [pc, #52]	; (8003f14 <nRF24_CSN_Select+0x74>)
 8003ede:	f7fe f82b 	bl	8001f38 <HAL_GPIO_WritePin>
			break;
 8003ee2:	e013      	b.n	8003f0c <nRF24_CSN_Select+0x6c>
		case Sel_B_Module2:
			HAL_GPIO_WritePin(GPIOB, nRF_B_CSN2_Pin, GPIO_PIN_RESET);
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2102      	movs	r1, #2
 8003ee8:	480b      	ldr	r0, [pc, #44]	; (8003f18 <nRF24_CSN_Select+0x78>)
 8003eea:	f7fe f825 	bl	8001f38 <HAL_GPIO_WritePin>
			break;
 8003eee:	e00d      	b.n	8003f0c <nRF24_CSN_Select+0x6c>
		case Sel_B_Module3:
			HAL_GPIO_WritePin(GPIOB, nRF_B_CSN3_Pin, GPIO_PIN_RESET);
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ef6:	4808      	ldr	r0, [pc, #32]	; (8003f18 <nRF24_CSN_Select+0x78>)
 8003ef8:	f7fe f81e 	bl	8001f38 <HAL_GPIO_WritePin>
			break;
 8003efc:	e006      	b.n	8003f0c <nRF24_CSN_Select+0x6c>
		case Sel_B_Module4:
			HAL_GPIO_WritePin(GPIOC, nRF_B_CSN4_Pin, GPIO_PIN_RESET);
 8003efe:	2200      	movs	r2, #0
 8003f00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f04:	4803      	ldr	r0, [pc, #12]	; (8003f14 <nRF24_CSN_Select+0x74>)
 8003f06:	f7fe f817 	bl	8001f38 <HAL_GPIO_WritePin>
			break;
 8003f0a:	bf00      	nop
	}
}
 8003f0c:	bf00      	nop
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	40020800 	.word	0x40020800
 8003f18:	40020400 	.word	0x40020400

08003f1c <nRF24_CSN_UnSelect>:

void nRF24_CSN_UnSelect(uint16_t Sel_CSN_Pin)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	80fb      	strh	r3, [r7, #6]
	switch (Sel_CSN_Pin)
 8003f26:	88fb      	ldrh	r3, [r7, #6]
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d82c      	bhi.n	8003f88 <nRF24_CSN_UnSelect+0x6c>
 8003f2e:	a201      	add	r2, pc, #4	; (adr r2, 8003f34 <nRF24_CSN_UnSelect+0x18>)
 8003f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f34:	08003f55 	.word	0x08003f55
 8003f38:	08003f61 	.word	0x08003f61
 8003f3c:	08003f6d 	.word	0x08003f6d
 8003f40:	08003f7b 	.word	0x08003f7b
 8003f44:	08003f49 	.word	0x08003f49
	{
		case Sel_EL_Module:
			HAL_GPIO_WritePin(GPIOC, nRF_EL_CSN_Pin, GPIO_PIN_SET);
 8003f48:	2201      	movs	r2, #1
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	4810      	ldr	r0, [pc, #64]	; (8003f90 <nRF24_CSN_UnSelect+0x74>)
 8003f4e:	f7fd fff3 	bl	8001f38 <HAL_GPIO_WritePin>
			break;
 8003f52:	e019      	b.n	8003f88 <nRF24_CSN_UnSelect+0x6c>
		case Sel_B_Module1:
			HAL_GPIO_WritePin(GPIOC, nRF_B_CSN1_Pin, GPIO_PIN_SET);
 8003f54:	2201      	movs	r2, #1
 8003f56:	2120      	movs	r1, #32
 8003f58:	480d      	ldr	r0, [pc, #52]	; (8003f90 <nRF24_CSN_UnSelect+0x74>)
 8003f5a:	f7fd ffed 	bl	8001f38 <HAL_GPIO_WritePin>
			break;
 8003f5e:	e013      	b.n	8003f88 <nRF24_CSN_UnSelect+0x6c>
		case Sel_B_Module2:
			HAL_GPIO_WritePin(GPIOB, nRF_B_CSN2_Pin, GPIO_PIN_SET);
 8003f60:	2201      	movs	r2, #1
 8003f62:	2102      	movs	r1, #2
 8003f64:	480b      	ldr	r0, [pc, #44]	; (8003f94 <nRF24_CSN_UnSelect+0x78>)
 8003f66:	f7fd ffe7 	bl	8001f38 <HAL_GPIO_WritePin>
			break;
 8003f6a:	e00d      	b.n	8003f88 <nRF24_CSN_UnSelect+0x6c>
		case Sel_B_Module3:
			HAL_GPIO_WritePin(GPIOB, nRF_B_CSN3_Pin, GPIO_PIN_SET);
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f72:	4808      	ldr	r0, [pc, #32]	; (8003f94 <nRF24_CSN_UnSelect+0x78>)
 8003f74:	f7fd ffe0 	bl	8001f38 <HAL_GPIO_WritePin>
			break;
 8003f78:	e006      	b.n	8003f88 <nRF24_CSN_UnSelect+0x6c>
		case Sel_B_Module4:
			HAL_GPIO_WritePin(GPIOC, nRF_B_CSN4_Pin, GPIO_PIN_SET);
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f80:	4803      	ldr	r0, [pc, #12]	; (8003f90 <nRF24_CSN_UnSelect+0x74>)
 8003f82:	f7fd ffd9 	bl	8001f38 <HAL_GPIO_WritePin>
			break;
 8003f86:	bf00      	nop
	}
}
 8003f88:	bf00      	nop
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40020800 	.word	0x40020800
 8003f94:	40020400 	.word	0x40020400

08003f98 <nRF24_CE_Enable>:

void nRF24_CE_Enable(uint16_t Sel_CE_Pin)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	80fb      	strh	r3, [r7, #6]
	switch (Sel_CE_Pin)
 8003fa2:	88fb      	ldrh	r3, [r7, #6]
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d82b      	bhi.n	8004002 <nRF24_CE_Enable+0x6a>
 8003faa:	a201      	add	r2, pc, #4	; (adr r2, 8003fb0 <nRF24_CE_Enable+0x18>)
 8003fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb0:	08003fd1 	.word	0x08003fd1
 8003fb4:	08003fdd 	.word	0x08003fdd
 8003fb8:	08003fe9 	.word	0x08003fe9
 8003fbc:	08003ff7 	.word	0x08003ff7
 8003fc0:	08003fc5 	.word	0x08003fc5
	{
		case Sel_EL_Module:
			HAL_GPIO_WritePin(GPIOA, nRF_EL_CE_Pin, GPIO_PIN_SET);
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	4810      	ldr	r0, [pc, #64]	; (800400c <nRF24_CE_Enable+0x74>)
 8003fca:	f7fd ffb5 	bl	8001f38 <HAL_GPIO_WritePin>
			break;
 8003fce:	e018      	b.n	8004002 <nRF24_CE_Enable+0x6a>
		case Sel_B_Module1:
			HAL_GPIO_WritePin(GPIOB, nRF_B_CE1_Pin, GPIO_PIN_SET);
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	480e      	ldr	r0, [pc, #56]	; (8004010 <nRF24_CE_Enable+0x78>)
 8003fd6:	f7fd ffaf 	bl	8001f38 <HAL_GPIO_WritePin>
			break;
 8003fda:	e012      	b.n	8004002 <nRF24_CE_Enable+0x6a>
		case Sel_B_Module2:
			HAL_GPIO_WritePin(GPIOB, nRF_B_CE2_Pin, GPIO_PIN_SET);
 8003fdc:	2201      	movs	r2, #1
 8003fde:	2104      	movs	r1, #4
 8003fe0:	480b      	ldr	r0, [pc, #44]	; (8004010 <nRF24_CE_Enable+0x78>)
 8003fe2:	f7fd ffa9 	bl	8001f38 <HAL_GPIO_WritePin>
			break;
 8003fe6:	e00c      	b.n	8004002 <nRF24_CE_Enable+0x6a>
		case Sel_B_Module3:
			HAL_GPIO_WritePin(GPIOB, nRF_B_CE3_Pin, GPIO_PIN_SET);
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003fee:	4808      	ldr	r0, [pc, #32]	; (8004010 <nRF24_CE_Enable+0x78>)
 8003ff0:	f7fd ffa2 	bl	8001f38 <HAL_GPIO_WritePin>
			break;
 8003ff4:	e005      	b.n	8004002 <nRF24_CE_Enable+0x6a>
		case Sel_B_Module4:
			HAL_GPIO_WritePin(GPIOC, nRF_B_CE4_Pin, GPIO_PIN_SET);
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	2180      	movs	r1, #128	; 0x80
 8003ffa:	4806      	ldr	r0, [pc, #24]	; (8004014 <nRF24_CE_Enable+0x7c>)
 8003ffc:	f7fd ff9c 	bl	8001f38 <HAL_GPIO_WritePin>
			break;
 8004000:	bf00      	nop
	}
}
 8004002:	bf00      	nop
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	40020000 	.word	0x40020000
 8004010:	40020400 	.word	0x40020400
 8004014:	40020800 	.word	0x40020800

08004018 <nRF24_CE_Disable>:

void nRF24_CE_Disable(uint16_t Sel_CE_Pin)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	4603      	mov	r3, r0
 8004020:	80fb      	strh	r3, [r7, #6]
	switch (Sel_CE_Pin)
 8004022:	88fb      	ldrh	r3, [r7, #6]
 8004024:	3b01      	subs	r3, #1
 8004026:	2b04      	cmp	r3, #4
 8004028:	d82b      	bhi.n	8004082 <nRF24_CE_Disable+0x6a>
 800402a:	a201      	add	r2, pc, #4	; (adr r2, 8004030 <nRF24_CE_Disable+0x18>)
 800402c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004030:	08004051 	.word	0x08004051
 8004034:	0800405d 	.word	0x0800405d
 8004038:	08004069 	.word	0x08004069
 800403c:	08004077 	.word	0x08004077
 8004040:	08004045 	.word	0x08004045
	{
	case Sel_EL_Module:
		HAL_GPIO_WritePin(GPIOA, nRF_EL_CE_Pin, GPIO_PIN_RESET);
 8004044:	2200      	movs	r2, #0
 8004046:	2101      	movs	r1, #1
 8004048:	4810      	ldr	r0, [pc, #64]	; (800408c <nRF24_CE_Disable+0x74>)
 800404a:	f7fd ff75 	bl	8001f38 <HAL_GPIO_WritePin>
		break;
 800404e:	e018      	b.n	8004082 <nRF24_CE_Disable+0x6a>
	case Sel_B_Module1:
		HAL_GPIO_WritePin(GPIOB, nRF_B_CE1_Pin, GPIO_PIN_RESET);
 8004050:	2200      	movs	r2, #0
 8004052:	2101      	movs	r1, #1
 8004054:	480e      	ldr	r0, [pc, #56]	; (8004090 <nRF24_CE_Disable+0x78>)
 8004056:	f7fd ff6f 	bl	8001f38 <HAL_GPIO_WritePin>
		break;
 800405a:	e012      	b.n	8004082 <nRF24_CE_Disable+0x6a>
	case Sel_B_Module2:
		HAL_GPIO_WritePin(GPIOB, nRF_B_CE2_Pin, GPIO_PIN_RESET);
 800405c:	2200      	movs	r2, #0
 800405e:	2104      	movs	r1, #4
 8004060:	480b      	ldr	r0, [pc, #44]	; (8004090 <nRF24_CE_Disable+0x78>)
 8004062:	f7fd ff69 	bl	8001f38 <HAL_GPIO_WritePin>
		break;
 8004066:	e00c      	b.n	8004082 <nRF24_CE_Disable+0x6a>
	case Sel_B_Module3:
		HAL_GPIO_WritePin(GPIOB, nRF_B_CE3_Pin, GPIO_PIN_RESET);
 8004068:	2200      	movs	r2, #0
 800406a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800406e:	4808      	ldr	r0, [pc, #32]	; (8004090 <nRF24_CE_Disable+0x78>)
 8004070:	f7fd ff62 	bl	8001f38 <HAL_GPIO_WritePin>
		break;
 8004074:	e005      	b.n	8004082 <nRF24_CE_Disable+0x6a>
	case Sel_B_Module4:
		HAL_GPIO_WritePin(GPIOC, nRF_B_CE4_Pin, GPIO_PIN_RESET);
 8004076:	2200      	movs	r2, #0
 8004078:	2180      	movs	r1, #128	; 0x80
 800407a:	4806      	ldr	r0, [pc, #24]	; (8004094 <nRF24_CE_Disable+0x7c>)
 800407c:	f7fd ff5c 	bl	8001f38 <HAL_GPIO_WritePin>
		break;
 8004080:	bf00      	nop
	}
}
 8004082:	bf00      	nop
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40020000 	.word	0x40020000
 8004090:	40020400 	.word	0x40020400
 8004094:	40020800 	.word	0x40020800

08004098 <nRF24_WriteReg>:
// input:
//   Sel_CSN_Pin - Select the RF Module
//   reg - number of register to write
//   data - value to write
void nRF24_WriteReg(uint16_t Sel_CSN_Pin, uint8_t reg, uint8_t data)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	4603      	mov	r3, r0
 80040a0:	80fb      	strh	r3, [r7, #6]
 80040a2:	460b      	mov	r3, r1
 80040a4:	717b      	strb	r3, [r7, #5]
 80040a6:	4613      	mov	r3, r2
 80040a8:	713b      	strb	r3, [r7, #4]
	uint8_t buf[2];
	buf[0] = reg | 1<<5;                                  //Set the 6th bit of the reg to make it a write command
 80040aa:	797b      	ldrb	r3, [r7, #5]
 80040ac:	f043 0320 	orr.w	r3, r3, #32
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	733b      	strb	r3, [r7, #12]
	buf[1] = data;
 80040b4:	793b      	ldrb	r3, [r7, #4]
 80040b6:	737b      	strb	r3, [r7, #13]

	nRF24_CSN_Select(Sel_CSN_Pin);                  //Pull CSN pin low to select the nRF24 on SPI BUS
 80040b8:	88fb      	ldrh	r3, [r7, #6]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff fef0 	bl	8003ea0 <nRF24_CSN_Select>
	if(Sel_CSN_Pin != Sel_EL_Module)
 80040c0:	88fb      	ldrh	r3, [r7, #6]
 80040c2:	2b05      	cmp	r3, #5
 80040c4:	d00b      	beq.n	80040de <nRF24_WriteReg+0x46>
	{
		HAL_SPI_Transmit(&Button_hspi1, buf, 2, 1000);    //Write command and register address (001AAAAA) and then the data to be written
 80040c6:	f107 010c 	add.w	r1, r7, #12
 80040ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040ce:	2202      	movs	r2, #2
 80040d0:	480c      	ldr	r0, [pc, #48]	; (8004104 <nRF24_WriteReg+0x6c>)
 80040d2:	f7fe fc44 	bl	800295e <HAL_SPI_Transmit>
		nRF24_CSN_UnSelect(Sel_B_Module1);                //Pull CSN pin high to unselect the nRF24 on SPI BUS
 80040d6:	2001      	movs	r0, #1
 80040d8:	f7ff ff20 	bl	8003f1c <nRF24_CSN_UnSelect>
 80040dc:	e00a      	b.n	80040f4 <nRF24_WriteReg+0x5c>
	}
	else
	{
		HAL_SPI_Transmit(&EL_hspi2, buf, 2, 1000);        //Write command and register address (001AAAAA) and then the data to be written
 80040de:	f107 010c 	add.w	r1, r7, #12
 80040e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040e6:	2202      	movs	r2, #2
 80040e8:	4807      	ldr	r0, [pc, #28]	; (8004108 <nRF24_WriteReg+0x70>)
 80040ea:	f7fe fc38 	bl	800295e <HAL_SPI_Transmit>
		nRF24_CSN_UnSelect(Sel_EL_Module);                //Pull CSN pin high to unselect the nRF24 on SPI BUS
 80040ee:	2005      	movs	r0, #5
 80040f0:	f7ff ff14 	bl	8003f1c <nRF24_CSN_UnSelect>
	}
	nRF24_CSN_UnSelect(Sel_CSN_Pin);                  //Pull CSN pin low to select the nRF24 on SPI BUS
 80040f4:	88fb      	ldrh	r3, [r7, #6]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff ff10 	bl	8003f1c <nRF24_CSN_UnSelect>
}
 80040fc:	bf00      	nop
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	20000178 	.word	0x20000178
 8004108:	200001d0 	.word	0x200001d0

0800410c <nRF24_WriteMBReg>:
//   Sel_CSN_Pin - Select the RF Module
//   reg - number of register to write
//   data - pointer to the buffer with data to write
//   size - number of bytes to write
void nRF24_WriteMBReg(uint16_t Sel_CSN_Pin, uint8_t reg, uint8_t *data, uint8_t size)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	603a      	str	r2, [r7, #0]
 8004114:	461a      	mov	r2, r3
 8004116:	4603      	mov	r3, r0
 8004118:	80fb      	strh	r3, [r7, #6]
 800411a:	460b      	mov	r3, r1
 800411c:	717b      	strb	r3, [r7, #5]
 800411e:	4613      	mov	r3, r2
 8004120:	713b      	strb	r3, [r7, #4]
	uint8_t buf[2];
	buf[0] = reg | 1<<5;                                      //Set the 6th bit of the reg to make it a write command
 8004122:	797b      	ldrb	r3, [r7, #5]
 8004124:	f043 0320 	orr.w	r3, r3, #32
 8004128:	b2db      	uxtb	r3, r3
 800412a:	733b      	strb	r3, [r7, #12]
//	buf[1] = data;

	nRF24_CSN_Select(Sel_CSN_Pin);                      //Pull CSN pin low to select the nRF24 on SPI BUS
 800412c:	88fb      	ldrh	r3, [r7, #6]
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff feb6 	bl	8003ea0 <nRF24_CSN_Select>
	if(Sel_CSN_Pin != Sel_EL_Module)
 8004134:	88fb      	ldrh	r3, [r7, #6]
 8004136:	2b05      	cmp	r3, #5
 8004138:	d010      	beq.n	800415c <nRF24_WriteMBReg+0x50>
	{
		HAL_SPI_Transmit(&Button_hspi1, buf, 1, 1000);        //Write command and register address (001AAAAA)
 800413a:	f107 010c 	add.w	r1, r7, #12
 800413e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004142:	2201      	movs	r2, #1
 8004144:	4811      	ldr	r0, [pc, #68]	; (800418c <nRF24_WriteMBReg+0x80>)
 8004146:	f7fe fc0a 	bl	800295e <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&Button_hspi1, data, size, 1000);    //Send the data to be written in that address
 800414a:	793b      	ldrb	r3, [r7, #4]
 800414c:	b29a      	uxth	r2, r3
 800414e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004152:	6839      	ldr	r1, [r7, #0]
 8004154:	480d      	ldr	r0, [pc, #52]	; (800418c <nRF24_WriteMBReg+0x80>)
 8004156:	f7fe fc02 	bl	800295e <HAL_SPI_Transmit>
 800415a:	e00f      	b.n	800417c <nRF24_WriteMBReg+0x70>
	}
	else
	{
		HAL_SPI_Transmit(&EL_hspi2, buf, 1, 1000);            //Write command and register address (001AAAAA)
 800415c:	f107 010c 	add.w	r1, r7, #12
 8004160:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004164:	2201      	movs	r2, #1
 8004166:	480a      	ldr	r0, [pc, #40]	; (8004190 <nRF24_WriteMBReg+0x84>)
 8004168:	f7fe fbf9 	bl	800295e <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&EL_hspi2, data, size, 1000);        //Send the data to be written in that address
 800416c:	793b      	ldrb	r3, [r7, #4]
 800416e:	b29a      	uxth	r2, r3
 8004170:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004174:	6839      	ldr	r1, [r7, #0]
 8004176:	4806      	ldr	r0, [pc, #24]	; (8004190 <nRF24_WriteMBReg+0x84>)
 8004178:	f7fe fbf1 	bl	800295e <HAL_SPI_Transmit>
	}
	nRF24_CSN_UnSelect(Sel_CSN_Pin);                    //Pull CSN pin high to unselect the nRF24 on SPI BUS
 800417c:	88fb      	ldrh	r3, [r7, #6]
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff fecc 	bl	8003f1c <nRF24_CSN_UnSelect>
}
 8004184:	bf00      	nop
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	20000178 	.word	0x20000178
 8004190:	200001d0 	.word	0x200001d0

08004194 <nRF24_ReadReg>:
// Reads a value of register
// input:
//   Sel_CSN_Pin - Select the RF Module
//   reg - number of register to read
// return: value of register
uint8_t nRF24_ReadReg(uint16_t Sel_CSN_Pin, uint8_t reg) {
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	4603      	mov	r3, r0
 800419c:	460a      	mov	r2, r1
 800419e:	80fb      	strh	r3, [r7, #6]
 80041a0:	4613      	mov	r3, r2
 80041a2:	717b      	strb	r3, [r7, #5]

	uint8_t data = 0;
 80041a4:	2300      	movs	r3, #0
 80041a6:	73fb      	strb	r3, [r7, #15]

	nRF24_CSN_Select(Sel_CSN_Pin);                            //Pull CSN pin low to select the nRF24 on SPI BUS
 80041a8:	88fb      	ldrh	r3, [r7, #6]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff fe78 	bl	8003ea0 <nRF24_CSN_Select>
	if(Sel_CSN_Pin != Sel_EL_Module)
 80041b0:	88fb      	ldrh	r3, [r7, #6]
 80041b2:	2b05      	cmp	r3, #5
 80041b4:	d00f      	beq.n	80041d6 <nRF24_ReadReg+0x42>
	{
		HAL_SPI_Transmit(&Button_hspi1, &reg, 1, 1000);       //Sending the read command and register address (000AAAAA)
 80041b6:	1d79      	adds	r1, r7, #5
 80041b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041bc:	2201      	movs	r2, #1
 80041be:	4812      	ldr	r0, [pc, #72]	; (8004208 <nRF24_ReadReg+0x74>)
 80041c0:	f7fe fbcd 	bl	800295e <HAL_SPI_Transmit>
		HAL_SPI_Receive(&Button_hspi1, &data, 1, 1000);       //Reading the one byte received
 80041c4:	f107 010f 	add.w	r1, r7, #15
 80041c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041cc:	2201      	movs	r2, #1
 80041ce:	480e      	ldr	r0, [pc, #56]	; (8004208 <nRF24_ReadReg+0x74>)
 80041d0:	f7fe fd01 	bl	8002bd6 <HAL_SPI_Receive>
 80041d4:	e00e      	b.n	80041f4 <nRF24_ReadReg+0x60>
	}
	else
	{
		HAL_SPI_Transmit(&EL_hspi2, &reg, 1, 1000);           //Sending the read command and register address (000AAAAA)
 80041d6:	1d79      	adds	r1, r7, #5
 80041d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041dc:	2201      	movs	r2, #1
 80041de:	480b      	ldr	r0, [pc, #44]	; (800420c <nRF24_ReadReg+0x78>)
 80041e0:	f7fe fbbd 	bl	800295e <HAL_SPI_Transmit>
		HAL_SPI_Receive(&EL_hspi2, &data, 1, 1000);           //Reading the one byte received
 80041e4:	f107 010f 	add.w	r1, r7, #15
 80041e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041ec:	2201      	movs	r2, #1
 80041ee:	4807      	ldr	r0, [pc, #28]	; (800420c <nRF24_ReadReg+0x78>)
 80041f0:	f7fe fcf1 	bl	8002bd6 <HAL_SPI_Receive>
	}
	nRF24_CSN_UnSelect(Sel_CSN_Pin);                          //Pull CSN pin high to unselect the nRF24 on SPI BUS
 80041f4:	88fb      	ldrh	r3, [r7, #6]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff fe90 	bl	8003f1c <nRF24_CSN_UnSelect>

	return data;
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	20000178 	.word	0x20000178
 800420c:	200001d0 	.word	0x200001d0

08004210 <nRF24_Reset>:
// Reset all the nRF24's registers
// input:
//   Sel_CSN_Pin - Select the RF Module
//   reg - number of register to write
void nRF24_Reset(uint16_t Sel_CSN_Pin, uint8_t Reg)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	4603      	mov	r3, r0
 8004218:	460a      	mov	r2, r1
 800421a:	80fb      	strh	r3, [r7, #6]
 800421c:	4613      	mov	r3, r2
 800421e:	717b      	strb	r3, [r7, #5]

		if(Reg == nRF24_REG_STATUS)
 8004220:	797b      	ldrb	r3, [r7, #5]
 8004222:	2b07      	cmp	r3, #7
 8004224:	d106      	bne.n	8004234 <nRF24_Reset+0x24>
		{
			nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_STATUS, 0x70);
 8004226:	88fb      	ldrh	r3, [r7, #6]
 8004228:	2270      	movs	r2, #112	; 0x70
 800422a:	2107      	movs	r1, #7
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff ff33 	bl	8004098 <nRF24_WriteReg>
		}
		else if(Reg == nRF24_REG_FIFO_STATUS)
		{
			nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_FIFO_STATUS, 0x11);
		}
}
 8004232:	e008      	b.n	8004246 <nRF24_Reset+0x36>
		else if(Reg == nRF24_REG_FIFO_STATUS)
 8004234:	797b      	ldrb	r3, [r7, #5]
 8004236:	2b17      	cmp	r3, #23
 8004238:	d105      	bne.n	8004246 <nRF24_Reset+0x36>
			nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_FIFO_STATUS, 0x11);
 800423a:	88fb      	ldrh	r3, [r7, #6]
 800423c:	2211      	movs	r2, #17
 800423e:	2117      	movs	r1, #23
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff ff29 	bl	8004098 <nRF24_WriteReg>
}
 8004246:	bf00      	nop
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
	...

08004250 <nRF24_Module_Setup>:


void nRF24_Module_Setup(uint16_t Sel_CSN_Pin, uint8_t mode, uint8_t RF_Ch, uint8_t *Tx_Addr, uint8_t *Rx_Addr, uint8_t RF_Power_Setup, uint8_t Payloadsize)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b088      	sub	sp, #32
 8004254:	af00      	add	r7, sp, #0
 8004256:	603b      	str	r3, [r7, #0]
 8004258:	4603      	mov	r3, r0
 800425a:	80fb      	strh	r3, [r7, #6]
 800425c:	460b      	mov	r3, r1
 800425e:	717b      	strb	r3, [r7, #5]
 8004260:	4613      	mov	r3, r2
 8004262:	713b      	strb	r3, [r7, #4]
	Pipe3_Addr = Cat_Mod_Pipe[0][0][3];
	Pipe4_Addr = Cat_Mod_Pipe[0][0][4];
	Pipe5_Addr = Cat_Mod_Pipe[0][0][5];*/

	uint8_t rx_addr_p0[5],rx_addr_p1[5],rx_addr_p2,rx_addr_p3,rx_addr_p4,rx_addr_p5;
	rx_addr_p0[0] = *Rx_Addr;
 8004264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	753b      	strb	r3, [r7, #20]
	rx_addr_p0[1] = *(Rx_Addr+1);
 800426a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426c:	785b      	ldrb	r3, [r3, #1]
 800426e:	757b      	strb	r3, [r7, #21]
	rx_addr_p0[2] = *(Rx_Addr+2);
 8004270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004272:	789b      	ldrb	r3, [r3, #2]
 8004274:	75bb      	strb	r3, [r7, #22]
	rx_addr_p0[3] = *(Rx_Addr+3);
 8004276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004278:	78db      	ldrb	r3, [r3, #3]
 800427a:	75fb      	strb	r3, [r7, #23]
	rx_addr_p0[4] = *(Rx_Addr+4);
 800427c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427e:	791b      	ldrb	r3, [r3, #4]
 8004280:	763b      	strb	r3, [r7, #24]
	rx_addr_p1[0] = (*Rx_Addr)+1;
 8004282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	3301      	adds	r3, #1
 8004288:	b2db      	uxtb	r3, r3
 800428a:	733b      	strb	r3, [r7, #12]
	rx_addr_p1[1] = *(Rx_Addr+1);
 800428c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428e:	785b      	ldrb	r3, [r3, #1]
 8004290:	737b      	strb	r3, [r7, #13]
	rx_addr_p1[2] = *(Rx_Addr+2);
 8004292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004294:	789b      	ldrb	r3, [r3, #2]
 8004296:	73bb      	strb	r3, [r7, #14]
	rx_addr_p1[3] = *(Rx_Addr+3);
 8004298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429a:	78db      	ldrb	r3, [r3, #3]
 800429c:	73fb      	strb	r3, [r7, #15]
	rx_addr_p1[4] = *(Rx_Addr+4);
 800429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a0:	791b      	ldrb	r3, [r3, #4]
 80042a2:	743b      	strb	r3, [r7, #16]
	rx_addr_p2 = rx_addr_p1[0]+1;
 80042a4:	7b3b      	ldrb	r3, [r7, #12]
 80042a6:	3301      	adds	r3, #1
 80042a8:	77fb      	strb	r3, [r7, #31]
	rx_addr_p3 = rx_addr_p2+1;
 80042aa:	7ffb      	ldrb	r3, [r7, #31]
 80042ac:	3301      	adds	r3, #1
 80042ae:	77bb      	strb	r3, [r7, #30]
	rx_addr_p4 = rx_addr_p3+1;
 80042b0:	7fbb      	ldrb	r3, [r7, #30]
 80042b2:	3301      	adds	r3, #1
 80042b4:	777b      	strb	r3, [r7, #29]
	rx_addr_p5 = rx_addr_p4+1;
 80042b6:	7f7b      	ldrb	r3, [r7, #29]
 80042b8:	3301      	adds	r3, #1
 80042ba:	773b      	strb	r3, [r7, #28]

	switch(mode)
 80042bc:	797b      	ldrb	r3, [r7, #5]
 80042be:	2b05      	cmp	r3, #5
 80042c0:	f200 8082 	bhi.w	80043c8 <nRF24_Module_Setup+0x178>
 80042c4:	a201      	add	r2, pc, #4	; (adr r2, 80042cc <nRF24_Module_Setup+0x7c>)
 80042c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ca:	bf00      	nop
 80042cc:	080042e5 	.word	0x080042e5
 80042d0:	0800430b 	.word	0x0800430b
 80042d4:	08004331 	.word	0x08004331
 80042d8:	08004357 	.word	0x08004357
 80042dc:	0800437d 	.word	0x0800437d
 80042e0:	080043a3 	.word	0x080043a3
	{
    case Receiver_Mode_AA:
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_CONFIG, 0x09);                      //PRIM_RX=1, PWR_UP=0, EN_CRC=1
 80042e4:	88fb      	ldrh	r3, [r7, #6]
 80042e6:	2209      	movs	r2, #9
 80042e8:	2100      	movs	r1, #0
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff fed4 	bl	8004098 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_EN_AA, 0x3F);                       //Enable AA for all pipes
 80042f0:	88fb      	ldrh	r3, [r7, #6]
 80042f2:	223f      	movs	r2, #63	; 0x3f
 80042f4:	2101      	movs	r1, #1
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff fece 	bl	8004098 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_EN_RXADDR, 0x3F);                   //Enable RX addresses for all pipes
 80042fc:	88fb      	ldrh	r3, [r7, #6]
 80042fe:	223f      	movs	r2, #63	; 0x3f
 8004300:	2102      	movs	r1, #2
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff fec8 	bl	8004098 <nRF24_WriteReg>
		break;
 8004308:	e05e      	b.n	80043c8 <nRF24_Module_Setup+0x178>
    case Receiver_Mode_noAA_CRC:
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_CONFIG, 0x09);                      //PRIM_RX=1, PWR_UP=0, EN_CRC=1
 800430a:	88fb      	ldrh	r3, [r7, #6]
 800430c:	2209      	movs	r2, #9
 800430e:	2100      	movs	r1, #0
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff fec1 	bl	8004098 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 8004316:	88fb      	ldrh	r3, [r7, #6]
 8004318:	2200      	movs	r2, #0
 800431a:	2101      	movs	r1, #1
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff febb 	bl	8004098 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_EN_RXADDR, 0x3F);                   //Enable RX addresses for all pipes
 8004322:	88fb      	ldrh	r3, [r7, #6]
 8004324:	223f      	movs	r2, #63	; 0x3f
 8004326:	2102      	movs	r1, #2
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff feb5 	bl	8004098 <nRF24_WriteReg>
		break;
 800432e:	e04b      	b.n	80043c8 <nRF24_Module_Setup+0x178>
    case Receiver_Mode_noAA_noCRC:
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_CONFIG, 0x01);                      //PRIM_RX=1, PWR_UP=0, EN_CRC=0
 8004330:	88fb      	ldrh	r3, [r7, #6]
 8004332:	2201      	movs	r2, #1
 8004334:	2100      	movs	r1, #0
 8004336:	4618      	mov	r0, r3
 8004338:	f7ff feae 	bl	8004098 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 800433c:	88fb      	ldrh	r3, [r7, #6]
 800433e:	2200      	movs	r2, #0
 8004340:	2101      	movs	r1, #1
 8004342:	4618      	mov	r0, r3
 8004344:	f7ff fea8 	bl	8004098 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_EN_RXADDR, 0x3F);                   //Enable RX addresses for all pipes
 8004348:	88fb      	ldrh	r3, [r7, #6]
 800434a:	223f      	movs	r2, #63	; 0x3f
 800434c:	2102      	movs	r1, #2
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff fea2 	bl	8004098 <nRF24_WriteReg>
		break;
 8004354:	e038      	b.n	80043c8 <nRF24_Module_Setup+0x178>
    case Transmitter_Mode_AA:
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_CONFIG, 0x08);                      //PRIM_RX=0, PWR_UP=0, EN_CRC=1
 8004356:	88fb      	ldrh	r3, [r7, #6]
 8004358:	2208      	movs	r2, #8
 800435a:	2100      	movs	r1, #0
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff fe9b 	bl	8004098 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_EN_AA, 0x3F);                       //Enable AA for all pipes
 8004362:	88fb      	ldrh	r3, [r7, #6]
 8004364:	223f      	movs	r2, #63	; 0x3f
 8004366:	2101      	movs	r1, #1
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff fe95 	bl	8004098 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_EN_RXADDR, 0x01);                   //Enable RX addresses for pipe0
 800436e:	88fb      	ldrh	r3, [r7, #6]
 8004370:	2201      	movs	r2, #1
 8004372:	2102      	movs	r1, #2
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff fe8f 	bl	8004098 <nRF24_WriteReg>
		break;
 800437a:	e025      	b.n	80043c8 <nRF24_Module_Setup+0x178>
    case Transmitter_Mode_noAA_CRC:
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_CONFIG, 0x08);                      //PRIM_RX=0, PWR_UP=0, EN_CRC=1
 800437c:	88fb      	ldrh	r3, [r7, #6]
 800437e:	2208      	movs	r2, #8
 8004380:	2100      	movs	r1, #0
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff fe88 	bl	8004098 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 8004388:	88fb      	ldrh	r3, [r7, #6]
 800438a:	2200      	movs	r2, #0
 800438c:	2101      	movs	r1, #1
 800438e:	4618      	mov	r0, r3
 8004390:	f7ff fe82 	bl	8004098 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_EN_RXADDR, 0x01);                   //Enable RX addresses for pipe0
 8004394:	88fb      	ldrh	r3, [r7, #6]
 8004396:	2201      	movs	r2, #1
 8004398:	2102      	movs	r1, #2
 800439a:	4618      	mov	r0, r3
 800439c:	f7ff fe7c 	bl	8004098 <nRF24_WriteReg>
		break;
 80043a0:	e012      	b.n	80043c8 <nRF24_Module_Setup+0x178>
    case Transmitter_Mode_noAA_noCRC:
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_CONFIG, 0x00);                      //PRIM_RX=0, PWR_UP=0, EN_CRC=0
 80043a2:	88fb      	ldrh	r3, [r7, #6]
 80043a4:	2200      	movs	r2, #0
 80043a6:	2100      	movs	r1, #0
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff fe75 	bl	8004098 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 80043ae:	88fb      	ldrh	r3, [r7, #6]
 80043b0:	2200      	movs	r2, #0
 80043b2:	2101      	movs	r1, #1
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7ff fe6f 	bl	8004098 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_EN_RXADDR, 0x01);                   //Enable RX addresses for pipe0
 80043ba:	88fb      	ldrh	r3, [r7, #6]
 80043bc:	2201      	movs	r2, #1
 80043be:	2102      	movs	r1, #2
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff fe69 	bl	8004098 <nRF24_WriteReg>
		break;
 80043c6:	bf00      	nop
	}

	nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_SETUP_AW, 0x03);                        //5 Bytes Length Address
 80043c8:	88fb      	ldrh	r3, [r7, #6]
 80043ca:	2203      	movs	r2, #3
 80043cc:	2103      	movs	r1, #3
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7ff fe62 	bl	8004098 <nRF24_WriteReg>
	nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_SETUP_RETR, 0x8A);                      //ARD=2000us, ARC=10
 80043d4:	88fb      	ldrh	r3, [r7, #6]
 80043d6:	228a      	movs	r2, #138	; 0x8a
 80043d8:	2104      	movs	r1, #4
 80043da:	4618      	mov	r0, r3
 80043dc:	f7ff fe5c 	bl	8004098 <nRF24_WriteReg>
	nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_RF_CH, RF_Ch);                          //Set the Frequency Channel to 2
 80043e0:	793a      	ldrb	r2, [r7, #4]
 80043e2:	88fb      	ldrh	r3, [r7, #6]
 80043e4:	2105      	movs	r1, #5
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff fe56 	bl	8004098 <nRF24_WriteReg>

	nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_RF_SETUP, RF_Power_Setup);              //Power in dBm, Speed in Mbps, LNA_HCURR=1
 80043ec:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80043f0:	88fb      	ldrh	r3, [r7, #6]
 80043f2:	2106      	movs	r1, #6
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff fe4f 	bl	8004098 <nRF24_WriteReg>

	if((mode==Transmitter_Mode_AA)||(mode==Transmitter_Mode_noAA_CRC)||(mode==Transmitter_Mode_noAA_noCRC))
 80043fa:	797b      	ldrb	r3, [r7, #5]
 80043fc:	2b03      	cmp	r3, #3
 80043fe:	d005      	beq.n	800440c <nRF24_Module_Setup+0x1bc>
 8004400:	797b      	ldrb	r3, [r7, #5]
 8004402:	2b04      	cmp	r3, #4
 8004404:	d002      	beq.n	800440c <nRF24_Module_Setup+0x1bc>
 8004406:	797b      	ldrb	r3, [r7, #5]
 8004408:	2b05      	cmp	r3, #5
 800440a:	d10c      	bne.n	8004426 <nRF24_Module_Setup+0x1d6>
	{
		nRF24_WriteMBReg(Sel_CSN_Pin, nRF24_REG_RX_ADDR_P0, Tx_Addr, 5);          //Set the Pipe0 address to {0x53, 0x52, 0x36, 0x34, 0x00}
 800440c:	88f8      	ldrh	r0, [r7, #6]
 800440e:	2305      	movs	r3, #5
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	210a      	movs	r1, #10
 8004414:	f7ff fe7a 	bl	800410c <nRF24_WriteMBReg>
		nRF24_WriteMBReg(Sel_CSN_Pin, nRF24_REG_TX_ADDR, Tx_Addr, 5);             //Set the TX address to {0x53, 0x52, 0x36, 0x34, 0x00}
 8004418:	88f8      	ldrh	r0, [r7, #6]
 800441a:	2305      	movs	r3, #5
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	2110      	movs	r1, #16
 8004420:	f7ff fe74 	bl	800410c <nRF24_WriteMBReg>
 8004424:	e034      	b.n	8004490 <nRF24_Module_Setup+0x240>
	}
	else if((mode==Receiver_Mode_AA)||(mode==Receiver_Mode_noAA_CRC)||(mode==Receiver_Mode_noAA_noCRC))
 8004426:	797b      	ldrb	r3, [r7, #5]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d005      	beq.n	8004438 <nRF24_Module_Setup+0x1e8>
 800442c:	797b      	ldrb	r3, [r7, #5]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d002      	beq.n	8004438 <nRF24_Module_Setup+0x1e8>
 8004432:	797b      	ldrb	r3, [r7, #5]
 8004434:	2b02      	cmp	r3, #2
 8004436:	d12b      	bne.n	8004490 <nRF24_Module_Setup+0x240>
	{
		nRF24_WriteMBReg(Sel_CSN_Pin, nRF24_REG_RX_ADDR_P0, rx_addr_p0, 5);       //Set the Pipe0 address
 8004438:	f107 0214 	add.w	r2, r7, #20
 800443c:	88f8      	ldrh	r0, [r7, #6]
 800443e:	2305      	movs	r3, #5
 8004440:	210a      	movs	r1, #10
 8004442:	f7ff fe63 	bl	800410c <nRF24_WriteMBReg>
		nRF24_WriteMBReg(Sel_CSN_Pin, nRF24_REG_RX_ADDR_P1, rx_addr_p1, 5);       //Set the Pipe1 address
 8004446:	f107 020c 	add.w	r2, r7, #12
 800444a:	88f8      	ldrh	r0, [r7, #6]
 800444c:	2305      	movs	r3, #5
 800444e:	210b      	movs	r1, #11
 8004450:	f7ff fe5c 	bl	800410c <nRF24_WriteMBReg>
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_RX_ADDR_P2, rx_addr_p2);            //Set the Pipe2 address
 8004454:	7ffa      	ldrb	r2, [r7, #31]
 8004456:	88fb      	ldrh	r3, [r7, #6]
 8004458:	210c      	movs	r1, #12
 800445a:	4618      	mov	r0, r3
 800445c:	f7ff fe1c 	bl	8004098 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_RX_ADDR_P3, rx_addr_p3);            //Set the Pipe3 address
 8004460:	7fba      	ldrb	r2, [r7, #30]
 8004462:	88fb      	ldrh	r3, [r7, #6]
 8004464:	210d      	movs	r1, #13
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff fe16 	bl	8004098 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_RX_ADDR_P4, rx_addr_p4);            //Set the Pipe4 address
 800446c:	7f7a      	ldrb	r2, [r7, #29]
 800446e:	88fb      	ldrh	r3, [r7, #6]
 8004470:	210e      	movs	r1, #14
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff fe10 	bl	8004098 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_RX_ADDR_P5, rx_addr_p5);            //Set the Pipe5 address
 8004478:	7f3a      	ldrb	r2, [r7, #28]
 800447a:	88fb      	ldrh	r3, [r7, #6]
 800447c:	210f      	movs	r1, #15
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff fe0a 	bl	8004098 <nRF24_WriteReg>
		nRF24_WriteMBReg(Sel_CSN_Pin, nRF24_REG_TX_ADDR, Tx_Addr, 5);             //Set the TX address
 8004484:	88f8      	ldrh	r0, [r7, #6]
 8004486:	2305      	movs	r3, #5
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	2110      	movs	r1, #16
 800448c:	f7ff fe3e 	bl	800410c <nRF24_WriteMBReg>
	}

	nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_RX_PW_P0, Payloadsize);                 //Set the Pipe0 Payload size
 8004490:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8004494:	88fb      	ldrh	r3, [r7, #6]
 8004496:	2111      	movs	r1, #17
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff fdfd 	bl	8004098 <nRF24_WriteReg>
	nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_RX_PW_P1, Payloadsize);                 //Set the Pipe1 Payload size
 800449e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80044a2:	88fb      	ldrh	r3, [r7, #6]
 80044a4:	2112      	movs	r1, #18
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff fdf6 	bl	8004098 <nRF24_WriteReg>
	nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_RX_PW_P2, Payloadsize);                 //Set the Pipe2 Payload size
 80044ac:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80044b0:	88fb      	ldrh	r3, [r7, #6]
 80044b2:	2113      	movs	r1, #19
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7ff fdef 	bl	8004098 <nRF24_WriteReg>
	nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_RX_PW_P3, Payloadsize);                 //Set the Pipe3 Payload size
 80044ba:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80044be:	88fb      	ldrh	r3, [r7, #6]
 80044c0:	2114      	movs	r1, #20
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff fde8 	bl	8004098 <nRF24_WriteReg>
	nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_RX_PW_P4, Payloadsize);                 //Set the Pipe4 Payload size
 80044c8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80044cc:	88fb      	ldrh	r3, [r7, #6]
 80044ce:	2115      	movs	r1, #21
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff fde1 	bl	8004098 <nRF24_WriteReg>
	nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_RX_PW_P5, Payloadsize);                 //Set the Pipe5 Payload size
 80044d6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80044da:	88fb      	ldrh	r3, [r7, #6]
 80044dc:	2116      	movs	r1, #22
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff fdda 	bl	8004098 <nRF24_WriteReg>
}
 80044e4:	bf00      	nop
 80044e6:	3720      	adds	r7, #32
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <nRF24_Transmit>:


uint8_t nRF24_Transmit(uint16_t Sel_CSN_Pin, uint8_t *data, uint8_t Payload_Size)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	6039      	str	r1, [r7, #0]
 80044f6:	80fb      	strh	r3, [r7, #6]
 80044f8:	4613      	mov	r3, r2
 80044fa:	717b      	strb	r3, [r7, #5]
	uint8_t cmdtosend = 0;
 80044fc:	2300      	movs	r3, #0
 80044fe:	737b      	strb	r3, [r7, #13]
	uint8_t Temp_Register;
    uint8_t Tr_Success = 0;
 8004500:	2300      	movs	r3, #0
 8004502:	73bb      	strb	r3, [r7, #14]

	nRF24_CSN_Select(Sel_CSN_Pin);                                                      //Pull CSN pin low to select the module1 on SPI BUS
 8004504:	88fb      	ldrh	r3, [r7, #6]
 8004506:	4618      	mov	r0, r3
 8004508:	f7ff fcca 	bl	8003ea0 <nRF24_CSN_Select>


	cmdtosend = nRF24_CMD_W_TX_PAYLOAD;                                                 //Payload transmit command
 800450c:	23a0      	movs	r3, #160	; 0xa0
 800450e:	737b      	strb	r3, [r7, #13]
	if(Sel_CSN_Pin != Sel_EL_Module)
 8004510:	88fb      	ldrh	r3, [r7, #6]
 8004512:	2b05      	cmp	r3, #5
 8004514:	d00e      	beq.n	8004534 <nRF24_Transmit+0x48>
	{
		HAL_SPI_Transmit(&Button_hspi1, &cmdtosend, 1, 100);
 8004516:	f107 010d 	add.w	r1, r7, #13
 800451a:	2364      	movs	r3, #100	; 0x64
 800451c:	2201      	movs	r2, #1
 800451e:	482d      	ldr	r0, [pc, #180]	; (80045d4 <nRF24_Transmit+0xe8>)
 8004520:	f7fe fa1d 	bl	800295e <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&Button_hspi1, data, Payload_Size, 100);
 8004524:	797b      	ldrb	r3, [r7, #5]
 8004526:	b29a      	uxth	r2, r3
 8004528:	2364      	movs	r3, #100	; 0x64
 800452a:	6839      	ldr	r1, [r7, #0]
 800452c:	4829      	ldr	r0, [pc, #164]	; (80045d4 <nRF24_Transmit+0xe8>)
 800452e:	f7fe fa16 	bl	800295e <HAL_SPI_Transmit>
 8004532:	e00d      	b.n	8004550 <nRF24_Transmit+0x64>
	}
	else
	{
		HAL_SPI_Transmit(&EL_hspi2, &cmdtosend, 1, 100);
 8004534:	f107 010d 	add.w	r1, r7, #13
 8004538:	2364      	movs	r3, #100	; 0x64
 800453a:	2201      	movs	r2, #1
 800453c:	4826      	ldr	r0, [pc, #152]	; (80045d8 <nRF24_Transmit+0xec>)
 800453e:	f7fe fa0e 	bl	800295e <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&EL_hspi2, data, Payload_Size, 100);
 8004542:	797b      	ldrb	r3, [r7, #5]
 8004544:	b29a      	uxth	r2, r3
 8004546:	2364      	movs	r3, #100	; 0x64
 8004548:	6839      	ldr	r1, [r7, #0]
 800454a:	4823      	ldr	r0, [pc, #140]	; (80045d8 <nRF24_Transmit+0xec>)
 800454c:	f7fe fa07 	bl	800295e <HAL_SPI_Transmit>
	}
	nRF24_CE_Enable(Sel_CSN_Pin);                                                       //Enable the module1
 8004550:	88fb      	ldrh	r3, [r7, #6]
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff fd20 	bl	8003f98 <nRF24_CE_Enable>
	HAL_Delay(1);
 8004558:	2001      	movs	r0, #1
 800455a:	f7fd f9f9 	bl	8001950 <HAL_Delay>
	nRF24_CE_Disable(Sel_CSN_Pin);
 800455e:	88fb      	ldrh	r3, [r7, #6]
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff fd59 	bl	8004018 <nRF24_CE_Disable>
	Temp_Register = nRF24_ReadReg(Sel_CSN_Pin, nRF24_REG_STATUS);                       //Reading the STATUS register
 8004566:	88fb      	ldrh	r3, [r7, #6]
 8004568:	2107      	movs	r1, #7
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff fe12 	bl	8004194 <nRF24_ReadReg>
 8004570:	4603      	mov	r3, r0
 8004572:	73fb      	strb	r3, [r7, #15]
	Temp_Register = nRF24_ReadReg(Sel_CSN_Pin, nRF24_REG_STATUS);                       //Reading the STATUS register
 8004574:	88fb      	ldrh	r3, [r7, #6]
 8004576:	2107      	movs	r1, #7
 8004578:	4618      	mov	r0, r3
 800457a:	f7ff fe0b 	bl	8004194 <nRF24_ReadReg>
 800457e:	4603      	mov	r3, r0
 8004580:	73fb      	strb	r3, [r7, #15]
	if((Temp_Register & (1<<5)) != 0)                                                   //check TX_EMPTY flag to be 1 along with Reserved pin to be 0
 8004582:	7bfb      	ldrb	r3, [r7, #15]
 8004584:	f003 0320 	and.w	r3, r3, #32
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00b      	beq.n	80045a4 <nRF24_Transmit+0xb8>
	{
#ifdef Debug
		HAL_UART_Transmit(&huart2, (uint8_t *)"\nData Transmitted Successfully\n",31,100);
#endif
		//Remove the interrupt pin
		Temp_Register = Temp_Register | (1<<5);                                         //Write 1 to TX_DS to reset it
 800458c:	7bfb      	ldrb	r3, [r7, #15]
 800458e:	f043 0320 	orr.w	r3, r3, #32
 8004592:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_STATUS, Temp_Register);
 8004594:	7bfa      	ldrb	r2, [r7, #15]
 8004596:	88fb      	ldrh	r3, [r7, #6]
 8004598:	2107      	movs	r1, #7
 800459a:	4618      	mov	r0, r3
 800459c:	f7ff fd7c 	bl	8004098 <nRF24_WriteReg>
		Tr_Success = 1;
 80045a0:	2301      	movs	r3, #1
 80045a2:	73bb      	strb	r3, [r7, #14]
	}
	if((Temp_Register & (1<<4)) != 0)                                                   //check TX_EMPTY flag to be 1 along with Reserved pin to be 0
 80045a4:	7bfb      	ldrb	r3, [r7, #15]
 80045a6:	f003 0310 	and.w	r3, r3, #16
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d009      	beq.n	80045c2 <nRF24_Transmit+0xd6>
	{
#ifdef Debug
		HAL_UART_Transmit(&huart2, (uint8_t *)"Maximum Retry Reached\n",22,100);
#endif
		//Remove the interrupt pin
		Temp_Register = Temp_Register | (1<<4);                                         //Write 1 to MAX_RT to reset it
 80045ae:	7bfb      	ldrb	r3, [r7, #15]
 80045b0:	f043 0310 	orr.w	r3, r3, #16
 80045b4:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_STATUS, Temp_Register);
 80045b6:	7bfa      	ldrb	r2, [r7, #15]
 80045b8:	88fb      	ldrh	r3, [r7, #6]
 80045ba:	2107      	movs	r1, #7
 80045bc:	4618      	mov	r0, r3
 80045be:	f7ff fd6b 	bl	8004098 <nRF24_WriteReg>
	}

	//nRF24_SendCMD(Sel_CSN_Pin, nRF24_CMD_FLUSH_TX);

	nRF24_CSN_UnSelect(Sel_CSN_Pin);
 80045c2:	88fb      	ldrh	r3, [r7, #6]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff fca9 	bl	8003f1c <nRF24_CSN_UnSelect>
	return Tr_Success;
 80045ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	20000178 	.word	0x20000178
 80045d8:	200001d0 	.word	0x200001d0

080045dc <nRF24_Receive>:
    return Receiving_Pipe;
}


void nRF24_Receive(uint16_t Sel_CSN_Pin, uint8_t *data, uint8_t Payload_Size)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	4603      	mov	r3, r0
 80045e4:	6039      	str	r1, [r7, #0]
 80045e6:	80fb      	strh	r3, [r7, #6]
 80045e8:	4613      	mov	r3, r2
 80045ea:	717b      	strb	r3, [r7, #5]
	uint8_t cmdtosend = 0;
 80045ec:	2300      	movs	r3, #0
 80045ee:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp_Register = 0;
 80045f0:	2300      	movs	r3, #0
 80045f2:	73fb      	strb	r3, [r7, #15]

	if(Sel_CSN_Pin != Sel_EL_Module)
 80045f4:	88fb      	ldrh	r3, [r7, #6]
 80045f6:	2b05      	cmp	r3, #5
 80045f8:	d038      	beq.n	800466c <nRF24_Receive+0x90>
	{
		nRF24_CSN_Select(Sel_CSN_Pin);                                                    //Pull CSN pin low to select the module1 on SPI BUS
 80045fa:	88fb      	ldrh	r3, [r7, #6]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff fc4f 	bl	8003ea0 <nRF24_CSN_Select>
		cmdtosend = nRF24_CMD_R_RX_PAYLOAD;                                                 //Payload transmit command
 8004602:	2361      	movs	r3, #97	; 0x61
 8004604:	73bb      	strb	r3, [r7, #14]
		HAL_SPI_Transmit(&Button_hspi1, &cmdtosend, 1, 100);
 8004606:	f107 010e 	add.w	r1, r7, #14
 800460a:	2364      	movs	r3, #100	; 0x64
 800460c:	2201      	movs	r2, #1
 800460e:	4830      	ldr	r0, [pc, #192]	; (80046d0 <nRF24_Receive+0xf4>)
 8004610:	f7fe f9a5 	bl	800295e <HAL_SPI_Transmit>
		HAL_SPI_Receive(&Button_hspi1, data, Payload_Size, 100);                            //Receive the payload
 8004614:	797b      	ldrb	r3, [r7, #5]
 8004616:	b29a      	uxth	r2, r3
 8004618:	2364      	movs	r3, #100	; 0x64
 800461a:	6839      	ldr	r1, [r7, #0]
 800461c:	482c      	ldr	r0, [pc, #176]	; (80046d0 <nRF24_Receive+0xf4>)
 800461e:	f7fe fada 	bl	8002bd6 <HAL_SPI_Receive>
		HAL_Delay(1);
 8004622:	2001      	movs	r0, #1
 8004624:	f7fd f994 	bl	8001950 <HAL_Delay>
		Temp_Register = nRF24_ReadReg(Sel_CSN_Pin, nRF24_REG_STATUS);
 8004628:	88fb      	ldrh	r3, [r7, #6]
 800462a:	2107      	movs	r1, #7
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff fdb1 	bl	8004194 <nRF24_ReadReg>
 8004632:	4603      	mov	r3, r0
 8004634:	73fb      	strb	r3, [r7, #15]
		Temp_Register = nRF24_ReadReg(Sel_CSN_Pin, nRF24_REG_STATUS);
 8004636:	88fb      	ldrh	r3, [r7, #6]
 8004638:	2107      	movs	r1, #7
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff fdaa 	bl	8004194 <nRF24_ReadReg>
 8004640:	4603      	mov	r3, r0
 8004642:	73fb      	strb	r3, [r7, #15]
		if((Temp_Register & (1<<6)) != 0)                                                   //check TX_DR flag to reset the interrupt pin
 8004644:	7bfb      	ldrb	r3, [r7, #15]
 8004646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464a:	2b00      	cmp	r3, #0
 800464c:	d009      	beq.n	8004662 <nRF24_Receive+0x86>
		{
#ifdef Debug
			HAL_UART_Transmit(&huart2, (uint8_t *)"\nData Received in the RX FIFO\n",31,100);
#endif
			//Remove the interrupt pin
			Temp_Register = Temp_Register | (1<<6);                                         //Write 1 to TX_DR to reset interrupt pin
 800464e:	7bfb      	ldrb	r3, [r7, #15]
 8004650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004654:	73fb      	strb	r3, [r7, #15]
			nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_STATUS, Temp_Register);
 8004656:	7bfa      	ldrb	r2, [r7, #15]
 8004658:	88fb      	ldrh	r3, [r7, #6]
 800465a:	2107      	movs	r1, #7
 800465c:	4618      	mov	r0, r3
 800465e:	f7ff fd1b 	bl	8004098 <nRF24_WriteReg>
#ifndef ELBC
		HAL_Delay(1);
		cmdtosend = nRF24_CMD_FLUSH_RX;                                                     //Flush the RX Buffer
		nRF24_SendCMD(Sel_CSN_Pin, cmdtosend);
#endif
		nRF24_CSN_UnSelect(Sel_CSN_Pin);
 8004662:	88fb      	ldrh	r3, [r7, #6]
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff fc59 	bl	8003f1c <nRF24_CSN_UnSelect>
		nRF24_SendCMD(Sel_EL_Module, cmdtosend);
#endif
		nRF24_CSN_UnSelect(Sel_CSN_Pin);                                     //Release the CSN pin to unselect the EdgeLED Module on SPI BUS
		//Release the CSN pin to unselect the module1 on SPI BUS
	}
}
 800466a:	e02d      	b.n	80046c8 <nRF24_Receive+0xec>
		nRF24_CSN_Select(Sel_CSN_Pin);                                       //Pull CSN pin low to select the EdgeLED Module on SPI BUS
 800466c:	88fb      	ldrh	r3, [r7, #6]
 800466e:	4618      	mov	r0, r3
 8004670:	f7ff fc16 	bl	8003ea0 <nRF24_CSN_Select>
		cmdtosend = nRF24_CMD_R_RX_PAYLOAD;                                    //Payload transmit command
 8004674:	2361      	movs	r3, #97	; 0x61
 8004676:	73bb      	strb	r3, [r7, #14]
		HAL_SPI_Transmit(&EL_hspi2, &cmdtosend, 1, 100);
 8004678:	f107 010e 	add.w	r1, r7, #14
 800467c:	2364      	movs	r3, #100	; 0x64
 800467e:	2201      	movs	r2, #1
 8004680:	4814      	ldr	r0, [pc, #80]	; (80046d4 <nRF24_Receive+0xf8>)
 8004682:	f7fe f96c 	bl	800295e <HAL_SPI_Transmit>
		HAL_SPI_Receive(&EL_hspi2, data, Payload_Size, 100);                             //Receive the payload
 8004686:	797b      	ldrb	r3, [r7, #5]
 8004688:	b29a      	uxth	r2, r3
 800468a:	2364      	movs	r3, #100	; 0x64
 800468c:	6839      	ldr	r1, [r7, #0]
 800468e:	4811      	ldr	r0, [pc, #68]	; (80046d4 <nRF24_Receive+0xf8>)
 8004690:	f7fe faa1 	bl	8002bd6 <HAL_SPI_Receive>
		Temp_Register = nRF24_ReadReg(Sel_CSN_Pin, nRF24_REG_STATUS);
 8004694:	88fb      	ldrh	r3, [r7, #6]
 8004696:	2107      	movs	r1, #7
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff fd7b 	bl	8004194 <nRF24_ReadReg>
 800469e:	4603      	mov	r3, r0
 80046a0:	73fb      	strb	r3, [r7, #15]
		if((Temp_Register & (1<<6)) != 0)                                                   //check TX_DR flag to reset the interrupt pin
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
 80046a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d009      	beq.n	80046c0 <nRF24_Receive+0xe4>
			Temp_Register = Temp_Register | (1<<6);                                         //Write 1 to TX_DR to reset interrupt pin
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
 80046ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046b2:	73fb      	strb	r3, [r7, #15]
			nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_STATUS, Temp_Register);
 80046b4:	7bfa      	ldrb	r2, [r7, #15]
 80046b6:	88fb      	ldrh	r3, [r7, #6]
 80046b8:	2107      	movs	r1, #7
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff fcec 	bl	8004098 <nRF24_WriteReg>
		nRF24_CSN_UnSelect(Sel_CSN_Pin);                                     //Release the CSN pin to unselect the EdgeLED Module on SPI BUS
 80046c0:	88fb      	ldrh	r3, [r7, #6]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7ff fc2a 	bl	8003f1c <nRF24_CSN_UnSelect>
}
 80046c8:	bf00      	nop
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	20000178 	.word	0x20000178
 80046d4:	200001d0 	.word	0x200001d0

080046d8 <nRF24_Power>:
	}
}


void nRF24_Power(uint16_t Sel_CSN_Pin, uint8_t On_Off_Cmd)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	4603      	mov	r3, r0
 80046e0:	460a      	mov	r2, r1
 80046e2:	80fb      	strh	r3, [r7, #6]
 80046e4:	4613      	mov	r3, r2
 80046e6:	717b      	strb	r3, [r7, #5]
	uint8_t Temp_Reg;

	Temp_Reg = nRF24_ReadReg(Sel_CSN_Pin, nRF24_REG_CONFIG);
 80046e8:	88fb      	ldrh	r3, [r7, #6]
 80046ea:	2100      	movs	r1, #0
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff fd51 	bl	8004194 <nRF24_ReadReg>
 80046f2:	4603      	mov	r3, r0
 80046f4:	73fb      	strb	r3, [r7, #15]

	if(On_Off_Cmd == Power_Up)
 80046f6:	797b      	ldrb	r3, [r7, #5]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d10a      	bne.n	8004712 <nRF24_Power+0x3a>
	{
		Temp_Reg = Temp_Reg | (1<<1);
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
 80046fe:	f043 0302 	orr.w	r3, r3, #2
 8004702:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_CONFIG, Temp_Reg);
 8004704:	7bfa      	ldrb	r2, [r7, #15]
 8004706:	88fb      	ldrh	r3, [r7, #6]
 8004708:	2100      	movs	r1, #0
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff fcc4 	bl	8004098 <nRF24_WriteReg>
	else if(On_Off_Cmd == Power_Down)
	{
		Temp_Reg = Temp_Reg & 0x7D;
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_CONFIG, Temp_Reg);
	}
}
 8004710:	e00c      	b.n	800472c <nRF24_Power+0x54>
	else if(On_Off_Cmd == Power_Down)
 8004712:	797b      	ldrb	r3, [r7, #5]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d109      	bne.n	800472c <nRF24_Power+0x54>
		Temp_Reg = Temp_Reg & 0x7D;
 8004718:	7bfb      	ldrb	r3, [r7, #15]
 800471a:	f003 037d 	and.w	r3, r3, #125	; 0x7d
 800471e:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_CONFIG, Temp_Reg);
 8004720:	7bfa      	ldrb	r2, [r7, #15]
 8004722:	88fb      	ldrh	r3, [r7, #6]
 8004724:	2100      	movs	r1, #0
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff fcb6 	bl	8004098 <nRF24_WriteReg>
}
 800472c:	bf00      	nop
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <__errno>:
 8004734:	4b01      	ldr	r3, [pc, #4]	; (800473c <__errno+0x8>)
 8004736:	6818      	ldr	r0, [r3, #0]
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	200000f8 	.word	0x200000f8

08004740 <__libc_init_array>:
 8004740:	b570      	push	{r4, r5, r6, lr}
 8004742:	4d0d      	ldr	r5, [pc, #52]	; (8004778 <__libc_init_array+0x38>)
 8004744:	4c0d      	ldr	r4, [pc, #52]	; (800477c <__libc_init_array+0x3c>)
 8004746:	1b64      	subs	r4, r4, r5
 8004748:	10a4      	asrs	r4, r4, #2
 800474a:	2600      	movs	r6, #0
 800474c:	42a6      	cmp	r6, r4
 800474e:	d109      	bne.n	8004764 <__libc_init_array+0x24>
 8004750:	4d0b      	ldr	r5, [pc, #44]	; (8004780 <__libc_init_array+0x40>)
 8004752:	4c0c      	ldr	r4, [pc, #48]	; (8004784 <__libc_init_array+0x44>)
 8004754:	f000 fc8e 	bl	8005074 <_init>
 8004758:	1b64      	subs	r4, r4, r5
 800475a:	10a4      	asrs	r4, r4, #2
 800475c:	2600      	movs	r6, #0
 800475e:	42a6      	cmp	r6, r4
 8004760:	d105      	bne.n	800476e <__libc_init_array+0x2e>
 8004762:	bd70      	pop	{r4, r5, r6, pc}
 8004764:	f855 3b04 	ldr.w	r3, [r5], #4
 8004768:	4798      	blx	r3
 800476a:	3601      	adds	r6, #1
 800476c:	e7ee      	b.n	800474c <__libc_init_array+0xc>
 800476e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004772:	4798      	blx	r3
 8004774:	3601      	adds	r6, #1
 8004776:	e7f2      	b.n	800475e <__libc_init_array+0x1e>
 8004778:	08005140 	.word	0x08005140
 800477c:	08005140 	.word	0x08005140
 8004780:	08005140 	.word	0x08005140
 8004784:	08005144 	.word	0x08005144

08004788 <memset>:
 8004788:	4402      	add	r2, r0
 800478a:	4603      	mov	r3, r0
 800478c:	4293      	cmp	r3, r2
 800478e:	d100      	bne.n	8004792 <memset+0xa>
 8004790:	4770      	bx	lr
 8004792:	f803 1b01 	strb.w	r1, [r3], #1
 8004796:	e7f9      	b.n	800478c <memset+0x4>

08004798 <siprintf>:
 8004798:	b40e      	push	{r1, r2, r3}
 800479a:	b500      	push	{lr}
 800479c:	b09c      	sub	sp, #112	; 0x70
 800479e:	ab1d      	add	r3, sp, #116	; 0x74
 80047a0:	9002      	str	r0, [sp, #8]
 80047a2:	9006      	str	r0, [sp, #24]
 80047a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047a8:	4809      	ldr	r0, [pc, #36]	; (80047d0 <siprintf+0x38>)
 80047aa:	9107      	str	r1, [sp, #28]
 80047ac:	9104      	str	r1, [sp, #16]
 80047ae:	4909      	ldr	r1, [pc, #36]	; (80047d4 <siprintf+0x3c>)
 80047b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80047b4:	9105      	str	r1, [sp, #20]
 80047b6:	6800      	ldr	r0, [r0, #0]
 80047b8:	9301      	str	r3, [sp, #4]
 80047ba:	a902      	add	r1, sp, #8
 80047bc:	f000 f868 	bl	8004890 <_svfiprintf_r>
 80047c0:	9b02      	ldr	r3, [sp, #8]
 80047c2:	2200      	movs	r2, #0
 80047c4:	701a      	strb	r2, [r3, #0]
 80047c6:	b01c      	add	sp, #112	; 0x70
 80047c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80047cc:	b003      	add	sp, #12
 80047ce:	4770      	bx	lr
 80047d0:	200000f8 	.word	0x200000f8
 80047d4:	ffff0208 	.word	0xffff0208

080047d8 <__ssputs_r>:
 80047d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047dc:	688e      	ldr	r6, [r1, #8]
 80047de:	429e      	cmp	r6, r3
 80047e0:	4682      	mov	sl, r0
 80047e2:	460c      	mov	r4, r1
 80047e4:	4690      	mov	r8, r2
 80047e6:	461f      	mov	r7, r3
 80047e8:	d838      	bhi.n	800485c <__ssputs_r+0x84>
 80047ea:	898a      	ldrh	r2, [r1, #12]
 80047ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047f0:	d032      	beq.n	8004858 <__ssputs_r+0x80>
 80047f2:	6825      	ldr	r5, [r4, #0]
 80047f4:	6909      	ldr	r1, [r1, #16]
 80047f6:	eba5 0901 	sub.w	r9, r5, r1
 80047fa:	6965      	ldr	r5, [r4, #20]
 80047fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004800:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004804:	3301      	adds	r3, #1
 8004806:	444b      	add	r3, r9
 8004808:	106d      	asrs	r5, r5, #1
 800480a:	429d      	cmp	r5, r3
 800480c:	bf38      	it	cc
 800480e:	461d      	movcc	r5, r3
 8004810:	0553      	lsls	r3, r2, #21
 8004812:	d531      	bpl.n	8004878 <__ssputs_r+0xa0>
 8004814:	4629      	mov	r1, r5
 8004816:	f000 fb63 	bl	8004ee0 <_malloc_r>
 800481a:	4606      	mov	r6, r0
 800481c:	b950      	cbnz	r0, 8004834 <__ssputs_r+0x5c>
 800481e:	230c      	movs	r3, #12
 8004820:	f8ca 3000 	str.w	r3, [sl]
 8004824:	89a3      	ldrh	r3, [r4, #12]
 8004826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800482a:	81a3      	strh	r3, [r4, #12]
 800482c:	f04f 30ff 	mov.w	r0, #4294967295
 8004830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004834:	6921      	ldr	r1, [r4, #16]
 8004836:	464a      	mov	r2, r9
 8004838:	f000 fabe 	bl	8004db8 <memcpy>
 800483c:	89a3      	ldrh	r3, [r4, #12]
 800483e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004846:	81a3      	strh	r3, [r4, #12]
 8004848:	6126      	str	r6, [r4, #16]
 800484a:	6165      	str	r5, [r4, #20]
 800484c:	444e      	add	r6, r9
 800484e:	eba5 0509 	sub.w	r5, r5, r9
 8004852:	6026      	str	r6, [r4, #0]
 8004854:	60a5      	str	r5, [r4, #8]
 8004856:	463e      	mov	r6, r7
 8004858:	42be      	cmp	r6, r7
 800485a:	d900      	bls.n	800485e <__ssputs_r+0x86>
 800485c:	463e      	mov	r6, r7
 800485e:	6820      	ldr	r0, [r4, #0]
 8004860:	4632      	mov	r2, r6
 8004862:	4641      	mov	r1, r8
 8004864:	f000 fab6 	bl	8004dd4 <memmove>
 8004868:	68a3      	ldr	r3, [r4, #8]
 800486a:	1b9b      	subs	r3, r3, r6
 800486c:	60a3      	str	r3, [r4, #8]
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	4433      	add	r3, r6
 8004872:	6023      	str	r3, [r4, #0]
 8004874:	2000      	movs	r0, #0
 8004876:	e7db      	b.n	8004830 <__ssputs_r+0x58>
 8004878:	462a      	mov	r2, r5
 800487a:	f000 fba5 	bl	8004fc8 <_realloc_r>
 800487e:	4606      	mov	r6, r0
 8004880:	2800      	cmp	r0, #0
 8004882:	d1e1      	bne.n	8004848 <__ssputs_r+0x70>
 8004884:	6921      	ldr	r1, [r4, #16]
 8004886:	4650      	mov	r0, sl
 8004888:	f000 fabe 	bl	8004e08 <_free_r>
 800488c:	e7c7      	b.n	800481e <__ssputs_r+0x46>
	...

08004890 <_svfiprintf_r>:
 8004890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004894:	4698      	mov	r8, r3
 8004896:	898b      	ldrh	r3, [r1, #12]
 8004898:	061b      	lsls	r3, r3, #24
 800489a:	b09d      	sub	sp, #116	; 0x74
 800489c:	4607      	mov	r7, r0
 800489e:	460d      	mov	r5, r1
 80048a0:	4614      	mov	r4, r2
 80048a2:	d50e      	bpl.n	80048c2 <_svfiprintf_r+0x32>
 80048a4:	690b      	ldr	r3, [r1, #16]
 80048a6:	b963      	cbnz	r3, 80048c2 <_svfiprintf_r+0x32>
 80048a8:	2140      	movs	r1, #64	; 0x40
 80048aa:	f000 fb19 	bl	8004ee0 <_malloc_r>
 80048ae:	6028      	str	r0, [r5, #0]
 80048b0:	6128      	str	r0, [r5, #16]
 80048b2:	b920      	cbnz	r0, 80048be <_svfiprintf_r+0x2e>
 80048b4:	230c      	movs	r3, #12
 80048b6:	603b      	str	r3, [r7, #0]
 80048b8:	f04f 30ff 	mov.w	r0, #4294967295
 80048bc:	e0d1      	b.n	8004a62 <_svfiprintf_r+0x1d2>
 80048be:	2340      	movs	r3, #64	; 0x40
 80048c0:	616b      	str	r3, [r5, #20]
 80048c2:	2300      	movs	r3, #0
 80048c4:	9309      	str	r3, [sp, #36]	; 0x24
 80048c6:	2320      	movs	r3, #32
 80048c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80048d0:	2330      	movs	r3, #48	; 0x30
 80048d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004a7c <_svfiprintf_r+0x1ec>
 80048d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048da:	f04f 0901 	mov.w	r9, #1
 80048de:	4623      	mov	r3, r4
 80048e0:	469a      	mov	sl, r3
 80048e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048e6:	b10a      	cbz	r2, 80048ec <_svfiprintf_r+0x5c>
 80048e8:	2a25      	cmp	r2, #37	; 0x25
 80048ea:	d1f9      	bne.n	80048e0 <_svfiprintf_r+0x50>
 80048ec:	ebba 0b04 	subs.w	fp, sl, r4
 80048f0:	d00b      	beq.n	800490a <_svfiprintf_r+0x7a>
 80048f2:	465b      	mov	r3, fp
 80048f4:	4622      	mov	r2, r4
 80048f6:	4629      	mov	r1, r5
 80048f8:	4638      	mov	r0, r7
 80048fa:	f7ff ff6d 	bl	80047d8 <__ssputs_r>
 80048fe:	3001      	adds	r0, #1
 8004900:	f000 80aa 	beq.w	8004a58 <_svfiprintf_r+0x1c8>
 8004904:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004906:	445a      	add	r2, fp
 8004908:	9209      	str	r2, [sp, #36]	; 0x24
 800490a:	f89a 3000 	ldrb.w	r3, [sl]
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 80a2 	beq.w	8004a58 <_svfiprintf_r+0x1c8>
 8004914:	2300      	movs	r3, #0
 8004916:	f04f 32ff 	mov.w	r2, #4294967295
 800491a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800491e:	f10a 0a01 	add.w	sl, sl, #1
 8004922:	9304      	str	r3, [sp, #16]
 8004924:	9307      	str	r3, [sp, #28]
 8004926:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800492a:	931a      	str	r3, [sp, #104]	; 0x68
 800492c:	4654      	mov	r4, sl
 800492e:	2205      	movs	r2, #5
 8004930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004934:	4851      	ldr	r0, [pc, #324]	; (8004a7c <_svfiprintf_r+0x1ec>)
 8004936:	f7fb fc53 	bl	80001e0 <memchr>
 800493a:	9a04      	ldr	r2, [sp, #16]
 800493c:	b9d8      	cbnz	r0, 8004976 <_svfiprintf_r+0xe6>
 800493e:	06d0      	lsls	r0, r2, #27
 8004940:	bf44      	itt	mi
 8004942:	2320      	movmi	r3, #32
 8004944:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004948:	0711      	lsls	r1, r2, #28
 800494a:	bf44      	itt	mi
 800494c:	232b      	movmi	r3, #43	; 0x2b
 800494e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004952:	f89a 3000 	ldrb.w	r3, [sl]
 8004956:	2b2a      	cmp	r3, #42	; 0x2a
 8004958:	d015      	beq.n	8004986 <_svfiprintf_r+0xf6>
 800495a:	9a07      	ldr	r2, [sp, #28]
 800495c:	4654      	mov	r4, sl
 800495e:	2000      	movs	r0, #0
 8004960:	f04f 0c0a 	mov.w	ip, #10
 8004964:	4621      	mov	r1, r4
 8004966:	f811 3b01 	ldrb.w	r3, [r1], #1
 800496a:	3b30      	subs	r3, #48	; 0x30
 800496c:	2b09      	cmp	r3, #9
 800496e:	d94e      	bls.n	8004a0e <_svfiprintf_r+0x17e>
 8004970:	b1b0      	cbz	r0, 80049a0 <_svfiprintf_r+0x110>
 8004972:	9207      	str	r2, [sp, #28]
 8004974:	e014      	b.n	80049a0 <_svfiprintf_r+0x110>
 8004976:	eba0 0308 	sub.w	r3, r0, r8
 800497a:	fa09 f303 	lsl.w	r3, r9, r3
 800497e:	4313      	orrs	r3, r2
 8004980:	9304      	str	r3, [sp, #16]
 8004982:	46a2      	mov	sl, r4
 8004984:	e7d2      	b.n	800492c <_svfiprintf_r+0x9c>
 8004986:	9b03      	ldr	r3, [sp, #12]
 8004988:	1d19      	adds	r1, r3, #4
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	9103      	str	r1, [sp, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	bfbb      	ittet	lt
 8004992:	425b      	neglt	r3, r3
 8004994:	f042 0202 	orrlt.w	r2, r2, #2
 8004998:	9307      	strge	r3, [sp, #28]
 800499a:	9307      	strlt	r3, [sp, #28]
 800499c:	bfb8      	it	lt
 800499e:	9204      	strlt	r2, [sp, #16]
 80049a0:	7823      	ldrb	r3, [r4, #0]
 80049a2:	2b2e      	cmp	r3, #46	; 0x2e
 80049a4:	d10c      	bne.n	80049c0 <_svfiprintf_r+0x130>
 80049a6:	7863      	ldrb	r3, [r4, #1]
 80049a8:	2b2a      	cmp	r3, #42	; 0x2a
 80049aa:	d135      	bne.n	8004a18 <_svfiprintf_r+0x188>
 80049ac:	9b03      	ldr	r3, [sp, #12]
 80049ae:	1d1a      	adds	r2, r3, #4
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	9203      	str	r2, [sp, #12]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	bfb8      	it	lt
 80049b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80049bc:	3402      	adds	r4, #2
 80049be:	9305      	str	r3, [sp, #20]
 80049c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004a8c <_svfiprintf_r+0x1fc>
 80049c4:	7821      	ldrb	r1, [r4, #0]
 80049c6:	2203      	movs	r2, #3
 80049c8:	4650      	mov	r0, sl
 80049ca:	f7fb fc09 	bl	80001e0 <memchr>
 80049ce:	b140      	cbz	r0, 80049e2 <_svfiprintf_r+0x152>
 80049d0:	2340      	movs	r3, #64	; 0x40
 80049d2:	eba0 000a 	sub.w	r0, r0, sl
 80049d6:	fa03 f000 	lsl.w	r0, r3, r0
 80049da:	9b04      	ldr	r3, [sp, #16]
 80049dc:	4303      	orrs	r3, r0
 80049de:	3401      	adds	r4, #1
 80049e0:	9304      	str	r3, [sp, #16]
 80049e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049e6:	4826      	ldr	r0, [pc, #152]	; (8004a80 <_svfiprintf_r+0x1f0>)
 80049e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049ec:	2206      	movs	r2, #6
 80049ee:	f7fb fbf7 	bl	80001e0 <memchr>
 80049f2:	2800      	cmp	r0, #0
 80049f4:	d038      	beq.n	8004a68 <_svfiprintf_r+0x1d8>
 80049f6:	4b23      	ldr	r3, [pc, #140]	; (8004a84 <_svfiprintf_r+0x1f4>)
 80049f8:	bb1b      	cbnz	r3, 8004a42 <_svfiprintf_r+0x1b2>
 80049fa:	9b03      	ldr	r3, [sp, #12]
 80049fc:	3307      	adds	r3, #7
 80049fe:	f023 0307 	bic.w	r3, r3, #7
 8004a02:	3308      	adds	r3, #8
 8004a04:	9303      	str	r3, [sp, #12]
 8004a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a08:	4433      	add	r3, r6
 8004a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a0c:	e767      	b.n	80048de <_svfiprintf_r+0x4e>
 8004a0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a12:	460c      	mov	r4, r1
 8004a14:	2001      	movs	r0, #1
 8004a16:	e7a5      	b.n	8004964 <_svfiprintf_r+0xd4>
 8004a18:	2300      	movs	r3, #0
 8004a1a:	3401      	adds	r4, #1
 8004a1c:	9305      	str	r3, [sp, #20]
 8004a1e:	4619      	mov	r1, r3
 8004a20:	f04f 0c0a 	mov.w	ip, #10
 8004a24:	4620      	mov	r0, r4
 8004a26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a2a:	3a30      	subs	r2, #48	; 0x30
 8004a2c:	2a09      	cmp	r2, #9
 8004a2e:	d903      	bls.n	8004a38 <_svfiprintf_r+0x1a8>
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0c5      	beq.n	80049c0 <_svfiprintf_r+0x130>
 8004a34:	9105      	str	r1, [sp, #20]
 8004a36:	e7c3      	b.n	80049c0 <_svfiprintf_r+0x130>
 8004a38:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a3c:	4604      	mov	r4, r0
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e7f0      	b.n	8004a24 <_svfiprintf_r+0x194>
 8004a42:	ab03      	add	r3, sp, #12
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	462a      	mov	r2, r5
 8004a48:	4b0f      	ldr	r3, [pc, #60]	; (8004a88 <_svfiprintf_r+0x1f8>)
 8004a4a:	a904      	add	r1, sp, #16
 8004a4c:	4638      	mov	r0, r7
 8004a4e:	f3af 8000 	nop.w
 8004a52:	1c42      	adds	r2, r0, #1
 8004a54:	4606      	mov	r6, r0
 8004a56:	d1d6      	bne.n	8004a06 <_svfiprintf_r+0x176>
 8004a58:	89ab      	ldrh	r3, [r5, #12]
 8004a5a:	065b      	lsls	r3, r3, #25
 8004a5c:	f53f af2c 	bmi.w	80048b8 <_svfiprintf_r+0x28>
 8004a60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a62:	b01d      	add	sp, #116	; 0x74
 8004a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a68:	ab03      	add	r3, sp, #12
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	462a      	mov	r2, r5
 8004a6e:	4b06      	ldr	r3, [pc, #24]	; (8004a88 <_svfiprintf_r+0x1f8>)
 8004a70:	a904      	add	r1, sp, #16
 8004a72:	4638      	mov	r0, r7
 8004a74:	f000 f87a 	bl	8004b6c <_printf_i>
 8004a78:	e7eb      	b.n	8004a52 <_svfiprintf_r+0x1c2>
 8004a7a:	bf00      	nop
 8004a7c:	08005104 	.word	0x08005104
 8004a80:	0800510e 	.word	0x0800510e
 8004a84:	00000000 	.word	0x00000000
 8004a88:	080047d9 	.word	0x080047d9
 8004a8c:	0800510a 	.word	0x0800510a

08004a90 <_printf_common>:
 8004a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a94:	4616      	mov	r6, r2
 8004a96:	4699      	mov	r9, r3
 8004a98:	688a      	ldr	r2, [r1, #8]
 8004a9a:	690b      	ldr	r3, [r1, #16]
 8004a9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	bfb8      	it	lt
 8004aa4:	4613      	movlt	r3, r2
 8004aa6:	6033      	str	r3, [r6, #0]
 8004aa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004aac:	4607      	mov	r7, r0
 8004aae:	460c      	mov	r4, r1
 8004ab0:	b10a      	cbz	r2, 8004ab6 <_printf_common+0x26>
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	6033      	str	r3, [r6, #0]
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	0699      	lsls	r1, r3, #26
 8004aba:	bf42      	ittt	mi
 8004abc:	6833      	ldrmi	r3, [r6, #0]
 8004abe:	3302      	addmi	r3, #2
 8004ac0:	6033      	strmi	r3, [r6, #0]
 8004ac2:	6825      	ldr	r5, [r4, #0]
 8004ac4:	f015 0506 	ands.w	r5, r5, #6
 8004ac8:	d106      	bne.n	8004ad8 <_printf_common+0x48>
 8004aca:	f104 0a19 	add.w	sl, r4, #25
 8004ace:	68e3      	ldr	r3, [r4, #12]
 8004ad0:	6832      	ldr	r2, [r6, #0]
 8004ad2:	1a9b      	subs	r3, r3, r2
 8004ad4:	42ab      	cmp	r3, r5
 8004ad6:	dc26      	bgt.n	8004b26 <_printf_common+0x96>
 8004ad8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004adc:	1e13      	subs	r3, r2, #0
 8004ade:	6822      	ldr	r2, [r4, #0]
 8004ae0:	bf18      	it	ne
 8004ae2:	2301      	movne	r3, #1
 8004ae4:	0692      	lsls	r2, r2, #26
 8004ae6:	d42b      	bmi.n	8004b40 <_printf_common+0xb0>
 8004ae8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004aec:	4649      	mov	r1, r9
 8004aee:	4638      	mov	r0, r7
 8004af0:	47c0      	blx	r8
 8004af2:	3001      	adds	r0, #1
 8004af4:	d01e      	beq.n	8004b34 <_printf_common+0xa4>
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	68e5      	ldr	r5, [r4, #12]
 8004afa:	6832      	ldr	r2, [r6, #0]
 8004afc:	f003 0306 	and.w	r3, r3, #6
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	bf08      	it	eq
 8004b04:	1aad      	subeq	r5, r5, r2
 8004b06:	68a3      	ldr	r3, [r4, #8]
 8004b08:	6922      	ldr	r2, [r4, #16]
 8004b0a:	bf0c      	ite	eq
 8004b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b10:	2500      	movne	r5, #0
 8004b12:	4293      	cmp	r3, r2
 8004b14:	bfc4      	itt	gt
 8004b16:	1a9b      	subgt	r3, r3, r2
 8004b18:	18ed      	addgt	r5, r5, r3
 8004b1a:	2600      	movs	r6, #0
 8004b1c:	341a      	adds	r4, #26
 8004b1e:	42b5      	cmp	r5, r6
 8004b20:	d11a      	bne.n	8004b58 <_printf_common+0xc8>
 8004b22:	2000      	movs	r0, #0
 8004b24:	e008      	b.n	8004b38 <_printf_common+0xa8>
 8004b26:	2301      	movs	r3, #1
 8004b28:	4652      	mov	r2, sl
 8004b2a:	4649      	mov	r1, r9
 8004b2c:	4638      	mov	r0, r7
 8004b2e:	47c0      	blx	r8
 8004b30:	3001      	adds	r0, #1
 8004b32:	d103      	bne.n	8004b3c <_printf_common+0xac>
 8004b34:	f04f 30ff 	mov.w	r0, #4294967295
 8004b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b3c:	3501      	adds	r5, #1
 8004b3e:	e7c6      	b.n	8004ace <_printf_common+0x3e>
 8004b40:	18e1      	adds	r1, r4, r3
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	2030      	movs	r0, #48	; 0x30
 8004b46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b4a:	4422      	add	r2, r4
 8004b4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b54:	3302      	adds	r3, #2
 8004b56:	e7c7      	b.n	8004ae8 <_printf_common+0x58>
 8004b58:	2301      	movs	r3, #1
 8004b5a:	4622      	mov	r2, r4
 8004b5c:	4649      	mov	r1, r9
 8004b5e:	4638      	mov	r0, r7
 8004b60:	47c0      	blx	r8
 8004b62:	3001      	adds	r0, #1
 8004b64:	d0e6      	beq.n	8004b34 <_printf_common+0xa4>
 8004b66:	3601      	adds	r6, #1
 8004b68:	e7d9      	b.n	8004b1e <_printf_common+0x8e>
	...

08004b6c <_printf_i>:
 8004b6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b70:	7e0f      	ldrb	r7, [r1, #24]
 8004b72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b74:	2f78      	cmp	r7, #120	; 0x78
 8004b76:	4691      	mov	r9, r2
 8004b78:	4680      	mov	r8, r0
 8004b7a:	460c      	mov	r4, r1
 8004b7c:	469a      	mov	sl, r3
 8004b7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b82:	d807      	bhi.n	8004b94 <_printf_i+0x28>
 8004b84:	2f62      	cmp	r7, #98	; 0x62
 8004b86:	d80a      	bhi.n	8004b9e <_printf_i+0x32>
 8004b88:	2f00      	cmp	r7, #0
 8004b8a:	f000 80d8 	beq.w	8004d3e <_printf_i+0x1d2>
 8004b8e:	2f58      	cmp	r7, #88	; 0x58
 8004b90:	f000 80a3 	beq.w	8004cda <_printf_i+0x16e>
 8004b94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b9c:	e03a      	b.n	8004c14 <_printf_i+0xa8>
 8004b9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ba2:	2b15      	cmp	r3, #21
 8004ba4:	d8f6      	bhi.n	8004b94 <_printf_i+0x28>
 8004ba6:	a101      	add	r1, pc, #4	; (adr r1, 8004bac <_printf_i+0x40>)
 8004ba8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bac:	08004c05 	.word	0x08004c05
 8004bb0:	08004c19 	.word	0x08004c19
 8004bb4:	08004b95 	.word	0x08004b95
 8004bb8:	08004b95 	.word	0x08004b95
 8004bbc:	08004b95 	.word	0x08004b95
 8004bc0:	08004b95 	.word	0x08004b95
 8004bc4:	08004c19 	.word	0x08004c19
 8004bc8:	08004b95 	.word	0x08004b95
 8004bcc:	08004b95 	.word	0x08004b95
 8004bd0:	08004b95 	.word	0x08004b95
 8004bd4:	08004b95 	.word	0x08004b95
 8004bd8:	08004d25 	.word	0x08004d25
 8004bdc:	08004c49 	.word	0x08004c49
 8004be0:	08004d07 	.word	0x08004d07
 8004be4:	08004b95 	.word	0x08004b95
 8004be8:	08004b95 	.word	0x08004b95
 8004bec:	08004d47 	.word	0x08004d47
 8004bf0:	08004b95 	.word	0x08004b95
 8004bf4:	08004c49 	.word	0x08004c49
 8004bf8:	08004b95 	.word	0x08004b95
 8004bfc:	08004b95 	.word	0x08004b95
 8004c00:	08004d0f 	.word	0x08004d0f
 8004c04:	682b      	ldr	r3, [r5, #0]
 8004c06:	1d1a      	adds	r2, r3, #4
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	602a      	str	r2, [r5, #0]
 8004c0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c14:	2301      	movs	r3, #1
 8004c16:	e0a3      	b.n	8004d60 <_printf_i+0x1f4>
 8004c18:	6820      	ldr	r0, [r4, #0]
 8004c1a:	6829      	ldr	r1, [r5, #0]
 8004c1c:	0606      	lsls	r6, r0, #24
 8004c1e:	f101 0304 	add.w	r3, r1, #4
 8004c22:	d50a      	bpl.n	8004c3a <_printf_i+0xce>
 8004c24:	680e      	ldr	r6, [r1, #0]
 8004c26:	602b      	str	r3, [r5, #0]
 8004c28:	2e00      	cmp	r6, #0
 8004c2a:	da03      	bge.n	8004c34 <_printf_i+0xc8>
 8004c2c:	232d      	movs	r3, #45	; 0x2d
 8004c2e:	4276      	negs	r6, r6
 8004c30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c34:	485e      	ldr	r0, [pc, #376]	; (8004db0 <_printf_i+0x244>)
 8004c36:	230a      	movs	r3, #10
 8004c38:	e019      	b.n	8004c6e <_printf_i+0x102>
 8004c3a:	680e      	ldr	r6, [r1, #0]
 8004c3c:	602b      	str	r3, [r5, #0]
 8004c3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c42:	bf18      	it	ne
 8004c44:	b236      	sxthne	r6, r6
 8004c46:	e7ef      	b.n	8004c28 <_printf_i+0xbc>
 8004c48:	682b      	ldr	r3, [r5, #0]
 8004c4a:	6820      	ldr	r0, [r4, #0]
 8004c4c:	1d19      	adds	r1, r3, #4
 8004c4e:	6029      	str	r1, [r5, #0]
 8004c50:	0601      	lsls	r1, r0, #24
 8004c52:	d501      	bpl.n	8004c58 <_printf_i+0xec>
 8004c54:	681e      	ldr	r6, [r3, #0]
 8004c56:	e002      	b.n	8004c5e <_printf_i+0xf2>
 8004c58:	0646      	lsls	r6, r0, #25
 8004c5a:	d5fb      	bpl.n	8004c54 <_printf_i+0xe8>
 8004c5c:	881e      	ldrh	r6, [r3, #0]
 8004c5e:	4854      	ldr	r0, [pc, #336]	; (8004db0 <_printf_i+0x244>)
 8004c60:	2f6f      	cmp	r7, #111	; 0x6f
 8004c62:	bf0c      	ite	eq
 8004c64:	2308      	moveq	r3, #8
 8004c66:	230a      	movne	r3, #10
 8004c68:	2100      	movs	r1, #0
 8004c6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c6e:	6865      	ldr	r5, [r4, #4]
 8004c70:	60a5      	str	r5, [r4, #8]
 8004c72:	2d00      	cmp	r5, #0
 8004c74:	bfa2      	ittt	ge
 8004c76:	6821      	ldrge	r1, [r4, #0]
 8004c78:	f021 0104 	bicge.w	r1, r1, #4
 8004c7c:	6021      	strge	r1, [r4, #0]
 8004c7e:	b90e      	cbnz	r6, 8004c84 <_printf_i+0x118>
 8004c80:	2d00      	cmp	r5, #0
 8004c82:	d04d      	beq.n	8004d20 <_printf_i+0x1b4>
 8004c84:	4615      	mov	r5, r2
 8004c86:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c8a:	fb03 6711 	mls	r7, r3, r1, r6
 8004c8e:	5dc7      	ldrb	r7, [r0, r7]
 8004c90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c94:	4637      	mov	r7, r6
 8004c96:	42bb      	cmp	r3, r7
 8004c98:	460e      	mov	r6, r1
 8004c9a:	d9f4      	bls.n	8004c86 <_printf_i+0x11a>
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d10b      	bne.n	8004cb8 <_printf_i+0x14c>
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	07de      	lsls	r6, r3, #31
 8004ca4:	d508      	bpl.n	8004cb8 <_printf_i+0x14c>
 8004ca6:	6923      	ldr	r3, [r4, #16]
 8004ca8:	6861      	ldr	r1, [r4, #4]
 8004caa:	4299      	cmp	r1, r3
 8004cac:	bfde      	ittt	le
 8004cae:	2330      	movle	r3, #48	; 0x30
 8004cb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cb4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cb8:	1b52      	subs	r2, r2, r5
 8004cba:	6122      	str	r2, [r4, #16]
 8004cbc:	f8cd a000 	str.w	sl, [sp]
 8004cc0:	464b      	mov	r3, r9
 8004cc2:	aa03      	add	r2, sp, #12
 8004cc4:	4621      	mov	r1, r4
 8004cc6:	4640      	mov	r0, r8
 8004cc8:	f7ff fee2 	bl	8004a90 <_printf_common>
 8004ccc:	3001      	adds	r0, #1
 8004cce:	d14c      	bne.n	8004d6a <_printf_i+0x1fe>
 8004cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd4:	b004      	add	sp, #16
 8004cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cda:	4835      	ldr	r0, [pc, #212]	; (8004db0 <_printf_i+0x244>)
 8004cdc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ce0:	6829      	ldr	r1, [r5, #0]
 8004ce2:	6823      	ldr	r3, [r4, #0]
 8004ce4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ce8:	6029      	str	r1, [r5, #0]
 8004cea:	061d      	lsls	r5, r3, #24
 8004cec:	d514      	bpl.n	8004d18 <_printf_i+0x1ac>
 8004cee:	07df      	lsls	r7, r3, #31
 8004cf0:	bf44      	itt	mi
 8004cf2:	f043 0320 	orrmi.w	r3, r3, #32
 8004cf6:	6023      	strmi	r3, [r4, #0]
 8004cf8:	b91e      	cbnz	r6, 8004d02 <_printf_i+0x196>
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	f023 0320 	bic.w	r3, r3, #32
 8004d00:	6023      	str	r3, [r4, #0]
 8004d02:	2310      	movs	r3, #16
 8004d04:	e7b0      	b.n	8004c68 <_printf_i+0xfc>
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	f043 0320 	orr.w	r3, r3, #32
 8004d0c:	6023      	str	r3, [r4, #0]
 8004d0e:	2378      	movs	r3, #120	; 0x78
 8004d10:	4828      	ldr	r0, [pc, #160]	; (8004db4 <_printf_i+0x248>)
 8004d12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d16:	e7e3      	b.n	8004ce0 <_printf_i+0x174>
 8004d18:	0659      	lsls	r1, r3, #25
 8004d1a:	bf48      	it	mi
 8004d1c:	b2b6      	uxthmi	r6, r6
 8004d1e:	e7e6      	b.n	8004cee <_printf_i+0x182>
 8004d20:	4615      	mov	r5, r2
 8004d22:	e7bb      	b.n	8004c9c <_printf_i+0x130>
 8004d24:	682b      	ldr	r3, [r5, #0]
 8004d26:	6826      	ldr	r6, [r4, #0]
 8004d28:	6961      	ldr	r1, [r4, #20]
 8004d2a:	1d18      	adds	r0, r3, #4
 8004d2c:	6028      	str	r0, [r5, #0]
 8004d2e:	0635      	lsls	r5, r6, #24
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	d501      	bpl.n	8004d38 <_printf_i+0x1cc>
 8004d34:	6019      	str	r1, [r3, #0]
 8004d36:	e002      	b.n	8004d3e <_printf_i+0x1d2>
 8004d38:	0670      	lsls	r0, r6, #25
 8004d3a:	d5fb      	bpl.n	8004d34 <_printf_i+0x1c8>
 8004d3c:	8019      	strh	r1, [r3, #0]
 8004d3e:	2300      	movs	r3, #0
 8004d40:	6123      	str	r3, [r4, #16]
 8004d42:	4615      	mov	r5, r2
 8004d44:	e7ba      	b.n	8004cbc <_printf_i+0x150>
 8004d46:	682b      	ldr	r3, [r5, #0]
 8004d48:	1d1a      	adds	r2, r3, #4
 8004d4a:	602a      	str	r2, [r5, #0]
 8004d4c:	681d      	ldr	r5, [r3, #0]
 8004d4e:	6862      	ldr	r2, [r4, #4]
 8004d50:	2100      	movs	r1, #0
 8004d52:	4628      	mov	r0, r5
 8004d54:	f7fb fa44 	bl	80001e0 <memchr>
 8004d58:	b108      	cbz	r0, 8004d5e <_printf_i+0x1f2>
 8004d5a:	1b40      	subs	r0, r0, r5
 8004d5c:	6060      	str	r0, [r4, #4]
 8004d5e:	6863      	ldr	r3, [r4, #4]
 8004d60:	6123      	str	r3, [r4, #16]
 8004d62:	2300      	movs	r3, #0
 8004d64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d68:	e7a8      	b.n	8004cbc <_printf_i+0x150>
 8004d6a:	6923      	ldr	r3, [r4, #16]
 8004d6c:	462a      	mov	r2, r5
 8004d6e:	4649      	mov	r1, r9
 8004d70:	4640      	mov	r0, r8
 8004d72:	47d0      	blx	sl
 8004d74:	3001      	adds	r0, #1
 8004d76:	d0ab      	beq.n	8004cd0 <_printf_i+0x164>
 8004d78:	6823      	ldr	r3, [r4, #0]
 8004d7a:	079b      	lsls	r3, r3, #30
 8004d7c:	d413      	bmi.n	8004da6 <_printf_i+0x23a>
 8004d7e:	68e0      	ldr	r0, [r4, #12]
 8004d80:	9b03      	ldr	r3, [sp, #12]
 8004d82:	4298      	cmp	r0, r3
 8004d84:	bfb8      	it	lt
 8004d86:	4618      	movlt	r0, r3
 8004d88:	e7a4      	b.n	8004cd4 <_printf_i+0x168>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	4632      	mov	r2, r6
 8004d8e:	4649      	mov	r1, r9
 8004d90:	4640      	mov	r0, r8
 8004d92:	47d0      	blx	sl
 8004d94:	3001      	adds	r0, #1
 8004d96:	d09b      	beq.n	8004cd0 <_printf_i+0x164>
 8004d98:	3501      	adds	r5, #1
 8004d9a:	68e3      	ldr	r3, [r4, #12]
 8004d9c:	9903      	ldr	r1, [sp, #12]
 8004d9e:	1a5b      	subs	r3, r3, r1
 8004da0:	42ab      	cmp	r3, r5
 8004da2:	dcf2      	bgt.n	8004d8a <_printf_i+0x21e>
 8004da4:	e7eb      	b.n	8004d7e <_printf_i+0x212>
 8004da6:	2500      	movs	r5, #0
 8004da8:	f104 0619 	add.w	r6, r4, #25
 8004dac:	e7f5      	b.n	8004d9a <_printf_i+0x22e>
 8004dae:	bf00      	nop
 8004db0:	08005115 	.word	0x08005115
 8004db4:	08005126 	.word	0x08005126

08004db8 <memcpy>:
 8004db8:	440a      	add	r2, r1
 8004dba:	4291      	cmp	r1, r2
 8004dbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004dc0:	d100      	bne.n	8004dc4 <memcpy+0xc>
 8004dc2:	4770      	bx	lr
 8004dc4:	b510      	push	{r4, lr}
 8004dc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dce:	4291      	cmp	r1, r2
 8004dd0:	d1f9      	bne.n	8004dc6 <memcpy+0xe>
 8004dd2:	bd10      	pop	{r4, pc}

08004dd4 <memmove>:
 8004dd4:	4288      	cmp	r0, r1
 8004dd6:	b510      	push	{r4, lr}
 8004dd8:	eb01 0402 	add.w	r4, r1, r2
 8004ddc:	d902      	bls.n	8004de4 <memmove+0x10>
 8004dde:	4284      	cmp	r4, r0
 8004de0:	4623      	mov	r3, r4
 8004de2:	d807      	bhi.n	8004df4 <memmove+0x20>
 8004de4:	1e43      	subs	r3, r0, #1
 8004de6:	42a1      	cmp	r1, r4
 8004de8:	d008      	beq.n	8004dfc <memmove+0x28>
 8004dea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004df2:	e7f8      	b.n	8004de6 <memmove+0x12>
 8004df4:	4402      	add	r2, r0
 8004df6:	4601      	mov	r1, r0
 8004df8:	428a      	cmp	r2, r1
 8004dfa:	d100      	bne.n	8004dfe <memmove+0x2a>
 8004dfc:	bd10      	pop	{r4, pc}
 8004dfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e06:	e7f7      	b.n	8004df8 <memmove+0x24>

08004e08 <_free_r>:
 8004e08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e0a:	2900      	cmp	r1, #0
 8004e0c:	d044      	beq.n	8004e98 <_free_r+0x90>
 8004e0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e12:	9001      	str	r0, [sp, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f1a1 0404 	sub.w	r4, r1, #4
 8004e1a:	bfb8      	it	lt
 8004e1c:	18e4      	addlt	r4, r4, r3
 8004e1e:	f000 f913 	bl	8005048 <__malloc_lock>
 8004e22:	4a1e      	ldr	r2, [pc, #120]	; (8004e9c <_free_r+0x94>)
 8004e24:	9801      	ldr	r0, [sp, #4]
 8004e26:	6813      	ldr	r3, [r2, #0]
 8004e28:	b933      	cbnz	r3, 8004e38 <_free_r+0x30>
 8004e2a:	6063      	str	r3, [r4, #4]
 8004e2c:	6014      	str	r4, [r2, #0]
 8004e2e:	b003      	add	sp, #12
 8004e30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e34:	f000 b90e 	b.w	8005054 <__malloc_unlock>
 8004e38:	42a3      	cmp	r3, r4
 8004e3a:	d908      	bls.n	8004e4e <_free_r+0x46>
 8004e3c:	6825      	ldr	r5, [r4, #0]
 8004e3e:	1961      	adds	r1, r4, r5
 8004e40:	428b      	cmp	r3, r1
 8004e42:	bf01      	itttt	eq
 8004e44:	6819      	ldreq	r1, [r3, #0]
 8004e46:	685b      	ldreq	r3, [r3, #4]
 8004e48:	1949      	addeq	r1, r1, r5
 8004e4a:	6021      	streq	r1, [r4, #0]
 8004e4c:	e7ed      	b.n	8004e2a <_free_r+0x22>
 8004e4e:	461a      	mov	r2, r3
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	b10b      	cbz	r3, 8004e58 <_free_r+0x50>
 8004e54:	42a3      	cmp	r3, r4
 8004e56:	d9fa      	bls.n	8004e4e <_free_r+0x46>
 8004e58:	6811      	ldr	r1, [r2, #0]
 8004e5a:	1855      	adds	r5, r2, r1
 8004e5c:	42a5      	cmp	r5, r4
 8004e5e:	d10b      	bne.n	8004e78 <_free_r+0x70>
 8004e60:	6824      	ldr	r4, [r4, #0]
 8004e62:	4421      	add	r1, r4
 8004e64:	1854      	adds	r4, r2, r1
 8004e66:	42a3      	cmp	r3, r4
 8004e68:	6011      	str	r1, [r2, #0]
 8004e6a:	d1e0      	bne.n	8004e2e <_free_r+0x26>
 8004e6c:	681c      	ldr	r4, [r3, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	6053      	str	r3, [r2, #4]
 8004e72:	4421      	add	r1, r4
 8004e74:	6011      	str	r1, [r2, #0]
 8004e76:	e7da      	b.n	8004e2e <_free_r+0x26>
 8004e78:	d902      	bls.n	8004e80 <_free_r+0x78>
 8004e7a:	230c      	movs	r3, #12
 8004e7c:	6003      	str	r3, [r0, #0]
 8004e7e:	e7d6      	b.n	8004e2e <_free_r+0x26>
 8004e80:	6825      	ldr	r5, [r4, #0]
 8004e82:	1961      	adds	r1, r4, r5
 8004e84:	428b      	cmp	r3, r1
 8004e86:	bf04      	itt	eq
 8004e88:	6819      	ldreq	r1, [r3, #0]
 8004e8a:	685b      	ldreq	r3, [r3, #4]
 8004e8c:	6063      	str	r3, [r4, #4]
 8004e8e:	bf04      	itt	eq
 8004e90:	1949      	addeq	r1, r1, r5
 8004e92:	6021      	streq	r1, [r4, #0]
 8004e94:	6054      	str	r4, [r2, #4]
 8004e96:	e7ca      	b.n	8004e2e <_free_r+0x26>
 8004e98:	b003      	add	sp, #12
 8004e9a:	bd30      	pop	{r4, r5, pc}
 8004e9c:	200004a4 	.word	0x200004a4

08004ea0 <sbrk_aligned>:
 8004ea0:	b570      	push	{r4, r5, r6, lr}
 8004ea2:	4e0e      	ldr	r6, [pc, #56]	; (8004edc <sbrk_aligned+0x3c>)
 8004ea4:	460c      	mov	r4, r1
 8004ea6:	6831      	ldr	r1, [r6, #0]
 8004ea8:	4605      	mov	r5, r0
 8004eaa:	b911      	cbnz	r1, 8004eb2 <sbrk_aligned+0x12>
 8004eac:	f000 f8bc 	bl	8005028 <_sbrk_r>
 8004eb0:	6030      	str	r0, [r6, #0]
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	f000 f8b7 	bl	8005028 <_sbrk_r>
 8004eba:	1c43      	adds	r3, r0, #1
 8004ebc:	d00a      	beq.n	8004ed4 <sbrk_aligned+0x34>
 8004ebe:	1cc4      	adds	r4, r0, #3
 8004ec0:	f024 0403 	bic.w	r4, r4, #3
 8004ec4:	42a0      	cmp	r0, r4
 8004ec6:	d007      	beq.n	8004ed8 <sbrk_aligned+0x38>
 8004ec8:	1a21      	subs	r1, r4, r0
 8004eca:	4628      	mov	r0, r5
 8004ecc:	f000 f8ac 	bl	8005028 <_sbrk_r>
 8004ed0:	3001      	adds	r0, #1
 8004ed2:	d101      	bne.n	8004ed8 <sbrk_aligned+0x38>
 8004ed4:	f04f 34ff 	mov.w	r4, #4294967295
 8004ed8:	4620      	mov	r0, r4
 8004eda:	bd70      	pop	{r4, r5, r6, pc}
 8004edc:	200004a8 	.word	0x200004a8

08004ee0 <_malloc_r>:
 8004ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ee4:	1ccd      	adds	r5, r1, #3
 8004ee6:	f025 0503 	bic.w	r5, r5, #3
 8004eea:	3508      	adds	r5, #8
 8004eec:	2d0c      	cmp	r5, #12
 8004eee:	bf38      	it	cc
 8004ef0:	250c      	movcc	r5, #12
 8004ef2:	2d00      	cmp	r5, #0
 8004ef4:	4607      	mov	r7, r0
 8004ef6:	db01      	blt.n	8004efc <_malloc_r+0x1c>
 8004ef8:	42a9      	cmp	r1, r5
 8004efa:	d905      	bls.n	8004f08 <_malloc_r+0x28>
 8004efc:	230c      	movs	r3, #12
 8004efe:	603b      	str	r3, [r7, #0]
 8004f00:	2600      	movs	r6, #0
 8004f02:	4630      	mov	r0, r6
 8004f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f08:	4e2e      	ldr	r6, [pc, #184]	; (8004fc4 <_malloc_r+0xe4>)
 8004f0a:	f000 f89d 	bl	8005048 <__malloc_lock>
 8004f0e:	6833      	ldr	r3, [r6, #0]
 8004f10:	461c      	mov	r4, r3
 8004f12:	bb34      	cbnz	r4, 8004f62 <_malloc_r+0x82>
 8004f14:	4629      	mov	r1, r5
 8004f16:	4638      	mov	r0, r7
 8004f18:	f7ff ffc2 	bl	8004ea0 <sbrk_aligned>
 8004f1c:	1c43      	adds	r3, r0, #1
 8004f1e:	4604      	mov	r4, r0
 8004f20:	d14d      	bne.n	8004fbe <_malloc_r+0xde>
 8004f22:	6834      	ldr	r4, [r6, #0]
 8004f24:	4626      	mov	r6, r4
 8004f26:	2e00      	cmp	r6, #0
 8004f28:	d140      	bne.n	8004fac <_malloc_r+0xcc>
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	4631      	mov	r1, r6
 8004f2e:	4638      	mov	r0, r7
 8004f30:	eb04 0803 	add.w	r8, r4, r3
 8004f34:	f000 f878 	bl	8005028 <_sbrk_r>
 8004f38:	4580      	cmp	r8, r0
 8004f3a:	d13a      	bne.n	8004fb2 <_malloc_r+0xd2>
 8004f3c:	6821      	ldr	r1, [r4, #0]
 8004f3e:	3503      	adds	r5, #3
 8004f40:	1a6d      	subs	r5, r5, r1
 8004f42:	f025 0503 	bic.w	r5, r5, #3
 8004f46:	3508      	adds	r5, #8
 8004f48:	2d0c      	cmp	r5, #12
 8004f4a:	bf38      	it	cc
 8004f4c:	250c      	movcc	r5, #12
 8004f4e:	4629      	mov	r1, r5
 8004f50:	4638      	mov	r0, r7
 8004f52:	f7ff ffa5 	bl	8004ea0 <sbrk_aligned>
 8004f56:	3001      	adds	r0, #1
 8004f58:	d02b      	beq.n	8004fb2 <_malloc_r+0xd2>
 8004f5a:	6823      	ldr	r3, [r4, #0]
 8004f5c:	442b      	add	r3, r5
 8004f5e:	6023      	str	r3, [r4, #0]
 8004f60:	e00e      	b.n	8004f80 <_malloc_r+0xa0>
 8004f62:	6822      	ldr	r2, [r4, #0]
 8004f64:	1b52      	subs	r2, r2, r5
 8004f66:	d41e      	bmi.n	8004fa6 <_malloc_r+0xc6>
 8004f68:	2a0b      	cmp	r2, #11
 8004f6a:	d916      	bls.n	8004f9a <_malloc_r+0xba>
 8004f6c:	1961      	adds	r1, r4, r5
 8004f6e:	42a3      	cmp	r3, r4
 8004f70:	6025      	str	r5, [r4, #0]
 8004f72:	bf18      	it	ne
 8004f74:	6059      	strne	r1, [r3, #4]
 8004f76:	6863      	ldr	r3, [r4, #4]
 8004f78:	bf08      	it	eq
 8004f7a:	6031      	streq	r1, [r6, #0]
 8004f7c:	5162      	str	r2, [r4, r5]
 8004f7e:	604b      	str	r3, [r1, #4]
 8004f80:	4638      	mov	r0, r7
 8004f82:	f104 060b 	add.w	r6, r4, #11
 8004f86:	f000 f865 	bl	8005054 <__malloc_unlock>
 8004f8a:	f026 0607 	bic.w	r6, r6, #7
 8004f8e:	1d23      	adds	r3, r4, #4
 8004f90:	1af2      	subs	r2, r6, r3
 8004f92:	d0b6      	beq.n	8004f02 <_malloc_r+0x22>
 8004f94:	1b9b      	subs	r3, r3, r6
 8004f96:	50a3      	str	r3, [r4, r2]
 8004f98:	e7b3      	b.n	8004f02 <_malloc_r+0x22>
 8004f9a:	6862      	ldr	r2, [r4, #4]
 8004f9c:	42a3      	cmp	r3, r4
 8004f9e:	bf0c      	ite	eq
 8004fa0:	6032      	streq	r2, [r6, #0]
 8004fa2:	605a      	strne	r2, [r3, #4]
 8004fa4:	e7ec      	b.n	8004f80 <_malloc_r+0xa0>
 8004fa6:	4623      	mov	r3, r4
 8004fa8:	6864      	ldr	r4, [r4, #4]
 8004faa:	e7b2      	b.n	8004f12 <_malloc_r+0x32>
 8004fac:	4634      	mov	r4, r6
 8004fae:	6876      	ldr	r6, [r6, #4]
 8004fb0:	e7b9      	b.n	8004f26 <_malloc_r+0x46>
 8004fb2:	230c      	movs	r3, #12
 8004fb4:	603b      	str	r3, [r7, #0]
 8004fb6:	4638      	mov	r0, r7
 8004fb8:	f000 f84c 	bl	8005054 <__malloc_unlock>
 8004fbc:	e7a1      	b.n	8004f02 <_malloc_r+0x22>
 8004fbe:	6025      	str	r5, [r4, #0]
 8004fc0:	e7de      	b.n	8004f80 <_malloc_r+0xa0>
 8004fc2:	bf00      	nop
 8004fc4:	200004a4 	.word	0x200004a4

08004fc8 <_realloc_r>:
 8004fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fcc:	4680      	mov	r8, r0
 8004fce:	4614      	mov	r4, r2
 8004fd0:	460e      	mov	r6, r1
 8004fd2:	b921      	cbnz	r1, 8004fde <_realloc_r+0x16>
 8004fd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fd8:	4611      	mov	r1, r2
 8004fda:	f7ff bf81 	b.w	8004ee0 <_malloc_r>
 8004fde:	b92a      	cbnz	r2, 8004fec <_realloc_r+0x24>
 8004fe0:	f7ff ff12 	bl	8004e08 <_free_r>
 8004fe4:	4625      	mov	r5, r4
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fec:	f000 f838 	bl	8005060 <_malloc_usable_size_r>
 8004ff0:	4284      	cmp	r4, r0
 8004ff2:	4607      	mov	r7, r0
 8004ff4:	d802      	bhi.n	8004ffc <_realloc_r+0x34>
 8004ff6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004ffa:	d812      	bhi.n	8005022 <_realloc_r+0x5a>
 8004ffc:	4621      	mov	r1, r4
 8004ffe:	4640      	mov	r0, r8
 8005000:	f7ff ff6e 	bl	8004ee0 <_malloc_r>
 8005004:	4605      	mov	r5, r0
 8005006:	2800      	cmp	r0, #0
 8005008:	d0ed      	beq.n	8004fe6 <_realloc_r+0x1e>
 800500a:	42bc      	cmp	r4, r7
 800500c:	4622      	mov	r2, r4
 800500e:	4631      	mov	r1, r6
 8005010:	bf28      	it	cs
 8005012:	463a      	movcs	r2, r7
 8005014:	f7ff fed0 	bl	8004db8 <memcpy>
 8005018:	4631      	mov	r1, r6
 800501a:	4640      	mov	r0, r8
 800501c:	f7ff fef4 	bl	8004e08 <_free_r>
 8005020:	e7e1      	b.n	8004fe6 <_realloc_r+0x1e>
 8005022:	4635      	mov	r5, r6
 8005024:	e7df      	b.n	8004fe6 <_realloc_r+0x1e>
	...

08005028 <_sbrk_r>:
 8005028:	b538      	push	{r3, r4, r5, lr}
 800502a:	4d06      	ldr	r5, [pc, #24]	; (8005044 <_sbrk_r+0x1c>)
 800502c:	2300      	movs	r3, #0
 800502e:	4604      	mov	r4, r0
 8005030:	4608      	mov	r0, r1
 8005032:	602b      	str	r3, [r5, #0]
 8005034:	f7fc fba8 	bl	8001788 <_sbrk>
 8005038:	1c43      	adds	r3, r0, #1
 800503a:	d102      	bne.n	8005042 <_sbrk_r+0x1a>
 800503c:	682b      	ldr	r3, [r5, #0]
 800503e:	b103      	cbz	r3, 8005042 <_sbrk_r+0x1a>
 8005040:	6023      	str	r3, [r4, #0]
 8005042:	bd38      	pop	{r3, r4, r5, pc}
 8005044:	200004ac 	.word	0x200004ac

08005048 <__malloc_lock>:
 8005048:	4801      	ldr	r0, [pc, #4]	; (8005050 <__malloc_lock+0x8>)
 800504a:	f000 b811 	b.w	8005070 <__retarget_lock_acquire_recursive>
 800504e:	bf00      	nop
 8005050:	200004b0 	.word	0x200004b0

08005054 <__malloc_unlock>:
 8005054:	4801      	ldr	r0, [pc, #4]	; (800505c <__malloc_unlock+0x8>)
 8005056:	f000 b80c 	b.w	8005072 <__retarget_lock_release_recursive>
 800505a:	bf00      	nop
 800505c:	200004b0 	.word	0x200004b0

08005060 <_malloc_usable_size_r>:
 8005060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005064:	1f18      	subs	r0, r3, #4
 8005066:	2b00      	cmp	r3, #0
 8005068:	bfbc      	itt	lt
 800506a:	580b      	ldrlt	r3, [r1, r0]
 800506c:	18c0      	addlt	r0, r0, r3
 800506e:	4770      	bx	lr

08005070 <__retarget_lock_acquire_recursive>:
 8005070:	4770      	bx	lr

08005072 <__retarget_lock_release_recursive>:
 8005072:	4770      	bx	lr

08005074 <_init>:
 8005074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005076:	bf00      	nop
 8005078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507a:	bc08      	pop	{r3}
 800507c:	469e      	mov	lr, r3
 800507e:	4770      	bx	lr

08005080 <_fini>:
 8005080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005082:	bf00      	nop
 8005084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005086:	bc08      	pop	{r3}
 8005088:	469e      	mov	lr, r3
 800508a:	4770      	bx	lr
