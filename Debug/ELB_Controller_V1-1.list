
ELB_Controller_V1-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004310  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004498  08004498  00014498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044d0  080044d0  000200f8  2**0
                  CONTENTS
  4 .ARM          00000008  080044d0  080044d0  000144d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044d8  080044d8  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044d8  080044d8  000144d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044dc  080044dc  000144dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  080044e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200f8  2**0
                  CONTENTS
 10 .bss          00000318  200000f8  200000f8  000200f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000410  20000410  000200f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c086  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b99  00000000  00000000  0002c1ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000988  00000000  00000000  0002dd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008f0  00000000  00000000  0002e6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ee3a  00000000  00000000  0002efc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b6b9  00000000  00000000  0004ddfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ba8b2  00000000  00000000  000594b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00113d65  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000026ac  00000000  00000000  00113db8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000f8 	.word	0x200000f8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004480 	.word	0x08004480

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000fc 	.word	0x200000fc
 80001c4:	08004480 	.word	0x08004480

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <EdgeLED_Color>:
  }
}
*/

void EdgeLED_Color(uint8_t Button_Number, uint8_t Green, uint8_t Red, uint8_t Blue, uint8_t *Packet)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4604      	mov	r4, r0
 80004d4:	4608      	mov	r0, r1
 80004d6:	4611      	mov	r1, r2
 80004d8:	461a      	mov	r2, r3
 80004da:	4623      	mov	r3, r4
 80004dc:	71fb      	strb	r3, [r7, #7]
 80004de:	4603      	mov	r3, r0
 80004e0:	71bb      	strb	r3, [r7, #6]
 80004e2:	460b      	mov	r3, r1
 80004e4:	717b      	strb	r3, [r7, #5]
 80004e6:	4613      	mov	r3, r2
 80004e8:	713b      	strb	r3, [r7, #4]
	//Packet[0]=Button_Number;
	Packet[0] = Button_Number;
 80004ea:	69bb      	ldr	r3, [r7, #24]
 80004ec:	79fa      	ldrb	r2, [r7, #7]
 80004ee:	701a      	strb	r2, [r3, #0]
	Packet[1] = Green;
 80004f0:	69bb      	ldr	r3, [r7, #24]
 80004f2:	3301      	adds	r3, #1
 80004f4:	79ba      	ldrb	r2, [r7, #6]
 80004f6:	701a      	strb	r2, [r3, #0]
	Packet[2] = Red;
 80004f8:	69bb      	ldr	r3, [r7, #24]
 80004fa:	3302      	adds	r3, #2
 80004fc:	797a      	ldrb	r2, [r7, #5]
 80004fe:	701a      	strb	r2, [r3, #0]
	Packet[3] = Blue;
 8000500:	69bb      	ldr	r3, [r7, #24]
 8000502:	3303      	adds	r3, #3
 8000504:	793a      	ldrb	r2, [r7, #4]
 8000506:	701a      	strb	r2, [r3, #0]

	nRF24_Transmit(Sel_EL_Module, Packet, EdgeLED_Packet_Size);
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <EdgeLED_Color+0x60>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	461a      	mov	r2, r3
 800050e:	69b9      	ldr	r1, [r7, #24]
 8000510:	2005      	movs	r0, #5
 8000512:	f003 fe65 	bl	80041e0 <nRF24_Transmit>
	nRF24_Transmit(Sel_EL_Module, Packet, EdgeLED_Packet_Size);
 8000516:	4b05      	ldr	r3, [pc, #20]	; (800052c <EdgeLED_Color+0x60>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	461a      	mov	r2, r3
 800051c:	69b9      	ldr	r1, [r7, #24]
 800051e:	2005      	movs	r0, #5
 8000520:	f003 fe5e 	bl	80041e0 <nRF24_Transmit>
#ifdef Debug
	nRF24_Transmit_Report(Sel_EL_Module);
#endif
}
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	bd90      	pop	{r4, r7, pc}
 800052c:	20000099 	.word	0x20000099

08000530 <HAL_GPIO_EXTI_Callback>:


//Interrupt handler to check which module has new packet
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	80fb      	strh	r3, [r7, #6]
	  if (GPIO_Pin == nRF_B_IRQ1_Pin)
 800053a:	88fb      	ldrh	r3, [r7, #6]
 800053c:	2b10      	cmp	r3, #16
 800053e:	d102      	bne.n	8000546 <HAL_GPIO_EXTI_Callback+0x16>
	  {
#ifdef Debug
		  HAL_UART_Transmit(&huart2, (uint8_t *)"Data received in Button module1\n\n",33, HAL_MAX_DELAY);
#endif
		  Data_In_Module1 = 1;
 8000540:	4b0e      	ldr	r3, [pc, #56]	; (800057c <HAL_GPIO_EXTI_Callback+0x4c>)
 8000542:	2201      	movs	r2, #1
 8000544:	701a      	strb	r2, [r3, #0]
	  }
	  if (GPIO_Pin == nRF_B_IRQ2_Pin)
 8000546:	88fb      	ldrh	r3, [r7, #6]
 8000548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800054c:	d102      	bne.n	8000554 <HAL_GPIO_EXTI_Callback+0x24>
	  {
#ifdef Debug
		  HAL_UART_Transmit(&huart2, (uint8_t *)"Data received in Button module2\n\n",33, HAL_MAX_DELAY);
#endif
		  Data_In_Module2 = 1;
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <HAL_GPIO_EXTI_Callback+0x50>)
 8000550:	2201      	movs	r2, #1
 8000552:	701a      	strb	r2, [r3, #0]
	  }
	  if (GPIO_Pin == nRF_B_IRQ3_Pin)
 8000554:	88fb      	ldrh	r3, [r7, #6]
 8000556:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800055a:	d102      	bne.n	8000562 <HAL_GPIO_EXTI_Callback+0x32>
	  {
#ifdef Debug
		  HAL_UART_Transmit(&huart2, (uint8_t *)"Data received in Button module3\n\n",33, HAL_MAX_DELAY);
#endif
		  Data_In_Module3 = 1;
 800055c:	4b09      	ldr	r3, [pc, #36]	; (8000584 <HAL_GPIO_EXTI_Callback+0x54>)
 800055e:	2201      	movs	r2, #1
 8000560:	701a      	strb	r2, [r3, #0]
	  }
	  if (GPIO_Pin == nRF_B_IRQ4_Pin)
 8000562:	88fb      	ldrh	r3, [r7, #6]
 8000564:	2b40      	cmp	r3, #64	; 0x40
 8000566:	d102      	bne.n	800056e <HAL_GPIO_EXTI_Callback+0x3e>
	  {
#ifdef Debug
		  HAL_UART_Transmit(&huart2, (uint8_t *)"Data received in Button module4\n\n",33, HAL_MAX_DELAY);
#endif
		  Data_In_Module4 = 1;
 8000568:	4b07      	ldr	r3, [pc, #28]	; (8000588 <HAL_GPIO_EXTI_Callback+0x58>)
 800056a:	2201      	movs	r2, #1
 800056c:	701a      	strb	r2, [r3, #0]
	  }
}
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20000402 	.word	0x20000402
 8000580:	20000403 	.word	0x20000403
 8000584:	20000404 	.word	0x20000404
 8000588:	20000405 	.word	0x20000405

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 ffe5 	bl	8001560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 fbb3 	bl	8000d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 fcdb 	bl	8000f54 <MX_GPIO_Init>
  MX_SPI1_Init();
 800059e:	f000 fc0d 	bl	8000dbc <MX_SPI1_Init>
  MX_SPI2_Init();
 80005a2:	f000 fc41 	bl	8000e28 <MX_SPI2_Init>
  MX_SPI3_Init();
 80005a6:	f000 fc75 	bl	8000e94 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 80005aa:	f000 fca9 	bl	8000f00 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //RF Modules address and frequency channel configuration
  TxAddr_B_Module1[0] = Config_table[0][0];
 80005ae:	4ba2      	ldr	r3, [pc, #648]	; (8000838 <main+0x2ac>)
 80005b0:	781a      	ldrb	r2, [r3, #0]
 80005b2:	4ba2      	ldr	r3, [pc, #648]	; (800083c <main+0x2b0>)
 80005b4:	701a      	strb	r2, [r3, #0]
  RxAddr_B_Module1[0] = Config_table[0][0];
 80005b6:	4ba0      	ldr	r3, [pc, #640]	; (8000838 <main+0x2ac>)
 80005b8:	781a      	ldrb	r2, [r3, #0]
 80005ba:	4ba1      	ldr	r3, [pc, #644]	; (8000840 <main+0x2b4>)
 80005bc:	701a      	strb	r2, [r3, #0]
  TxAddr_B_Module2[0] = Config_table[6][0];
 80005be:	4b9e      	ldr	r3, [pc, #632]	; (8000838 <main+0x2ac>)
 80005c0:	7e1a      	ldrb	r2, [r3, #24]
 80005c2:	4ba0      	ldr	r3, [pc, #640]	; (8000844 <main+0x2b8>)
 80005c4:	701a      	strb	r2, [r3, #0]
  RxAddr_B_Module2[0] = Config_table[6][0];
 80005c6:	4b9c      	ldr	r3, [pc, #624]	; (8000838 <main+0x2ac>)
 80005c8:	7e1a      	ldrb	r2, [r3, #24]
 80005ca:	4b9f      	ldr	r3, [pc, #636]	; (8000848 <main+0x2bc>)
 80005cc:	701a      	strb	r2, [r3, #0]
  TxAddr_B_Module3[0] = Config_table[12][0];
 80005ce:	4b9a      	ldr	r3, [pc, #616]	; (8000838 <main+0x2ac>)
 80005d0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80005d4:	4b9d      	ldr	r3, [pc, #628]	; (800084c <main+0x2c0>)
 80005d6:	701a      	strb	r2, [r3, #0]
  RxAddr_B_Module3[0] = Config_table[12][0];
 80005d8:	4b97      	ldr	r3, [pc, #604]	; (8000838 <main+0x2ac>)
 80005da:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80005de:	4b9c      	ldr	r3, [pc, #624]	; (8000850 <main+0x2c4>)
 80005e0:	701a      	strb	r2, [r3, #0]
  TxAddr_B_Module4[0] = Config_table[18][0];
 80005e2:	4b95      	ldr	r3, [pc, #596]	; (8000838 <main+0x2ac>)
 80005e4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80005e8:	4b9a      	ldr	r3, [pc, #616]	; (8000854 <main+0x2c8>)
 80005ea:	701a      	strb	r2, [r3, #0]
  RxAddr_B_Module4[0] = Config_table[18][0];
 80005ec:	4b92      	ldr	r3, [pc, #584]	; (8000838 <main+0x2ac>)
 80005ee:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80005f2:	4b99      	ldr	r3, [pc, #612]	; (8000858 <main+0x2cc>)
 80005f4:	701a      	strb	r2, [r3, #0]
  RF_Channel_Module1 = Config_table[0][1];
 80005f6:	4b90      	ldr	r3, [pc, #576]	; (8000838 <main+0x2ac>)
 80005f8:	785a      	ldrb	r2, [r3, #1]
 80005fa:	4b98      	ldr	r3, [pc, #608]	; (800085c <main+0x2d0>)
 80005fc:	701a      	strb	r2, [r3, #0]
  RF_Channel_Module2 = Config_table[6][1];
 80005fe:	4b8e      	ldr	r3, [pc, #568]	; (8000838 <main+0x2ac>)
 8000600:	7e5a      	ldrb	r2, [r3, #25]
 8000602:	4b97      	ldr	r3, [pc, #604]	; (8000860 <main+0x2d4>)
 8000604:	701a      	strb	r2, [r3, #0]
  RF_Channel_Module3 = Config_table[12][1];
 8000606:	4b8c      	ldr	r3, [pc, #560]	; (8000838 <main+0x2ac>)
 8000608:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 800060c:	4b95      	ldr	r3, [pc, #596]	; (8000864 <main+0x2d8>)
 800060e:	701a      	strb	r2, [r3, #0]
  RF_Channel_Module4 = Config_table[18][1];
 8000610:	4b89      	ldr	r3, [pc, #548]	; (8000838 <main+0x2ac>)
 8000612:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8000616:	4b94      	ldr	r3, [pc, #592]	; (8000868 <main+0x2dc>)
 8000618:	701a      	strb	r2, [r3, #0]


  nRF24_Reset(Sel_B_Module1,nRF24_REG_STATUS);
 800061a:	2107      	movs	r1, #7
 800061c:	2001      	movs	r0, #1
 800061e:	f003 fc71 	bl	8003f04 <nRF24_Reset>
  nRF24_Reset(Sel_B_Module2,nRF24_REG_STATUS);
 8000622:	2107      	movs	r1, #7
 8000624:	2002      	movs	r0, #2
 8000626:	f003 fc6d 	bl	8003f04 <nRF24_Reset>
  nRF24_Reset(Sel_B_Module3,nRF24_REG_STATUS);
 800062a:	2107      	movs	r1, #7
 800062c:	2003      	movs	r0, #3
 800062e:	f003 fc69 	bl	8003f04 <nRF24_Reset>
  nRF24_Reset(Sel_B_Module4,nRF24_REG_STATUS);
 8000632:	2107      	movs	r1, #7
 8000634:	2004      	movs	r0, #4
 8000636:	f003 fc65 	bl	8003f04 <nRF24_Reset>
  nRF24_Reset(Sel_EL_Module,nRF24_REG_STATUS);
 800063a:	2107      	movs	r1, #7
 800063c:	2005      	movs	r0, #5
 800063e:	f003 fc61 	bl	8003f04 <nRF24_Reset>

  nRF24_Module_Setup(Sel_B_Module1, Receiver_Mode_noAA_noCRC,
 8000642:	4b86      	ldr	r3, [pc, #536]	; (800085c <main+0x2d0>)
 8000644:	781a      	ldrb	r2, [r3, #0]
 8000646:	4b89      	ldr	r3, [pc, #548]	; (800086c <main+0x2e0>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	9302      	str	r3, [sp, #8]
 800064c:	2307      	movs	r3, #7
 800064e:	9301      	str	r3, [sp, #4]
 8000650:	4b7b      	ldr	r3, [pc, #492]	; (8000840 <main+0x2b4>)
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	4b79      	ldr	r3, [pc, #484]	; (800083c <main+0x2b0>)
 8000656:	2102      	movs	r1, #2
 8000658:	2001      	movs	r0, #1
 800065a:	f003 fc73 	bl	8003f44 <nRF24_Module_Setup>
		  RF_Channel_Module1, TxAddr_B_Module1, RxAddr_B_Module1,
		  MBPS1_0dBm, Button_Packet_Size);
  nRF24_Power(Sel_B_Module1, Power_Up);
 800065e:	2101      	movs	r1, #1
 8000660:	2001      	movs	r0, #1
 8000662:	f003 feb3 	bl	80043cc <nRF24_Power>
  nRF24_CE_Enable(Sel_B_Module1);
 8000666:	2001      	movs	r0, #1
 8000668:	f003 fb10 	bl	8003c8c <nRF24_CE_Enable>
  nRF24_Module_Setup(Sel_B_Module2, Receiver_Mode_noAA_noCRC,
 800066c:	4b7c      	ldr	r3, [pc, #496]	; (8000860 <main+0x2d4>)
 800066e:	781a      	ldrb	r2, [r3, #0]
 8000670:	4b7e      	ldr	r3, [pc, #504]	; (800086c <main+0x2e0>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	9302      	str	r3, [sp, #8]
 8000676:	2307      	movs	r3, #7
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	4b73      	ldr	r3, [pc, #460]	; (8000848 <main+0x2bc>)
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	4b71      	ldr	r3, [pc, #452]	; (8000844 <main+0x2b8>)
 8000680:	2102      	movs	r1, #2
 8000682:	2002      	movs	r0, #2
 8000684:	f003 fc5e 	bl	8003f44 <nRF24_Module_Setup>
		  RF_Channel_Module2, TxAddr_B_Module2, RxAddr_B_Module2,
		  MBPS1_0dBm, Button_Packet_Size);
  nRF24_Power(Sel_B_Module2, Power_Up);
 8000688:	2101      	movs	r1, #1
 800068a:	2002      	movs	r0, #2
 800068c:	f003 fe9e 	bl	80043cc <nRF24_Power>
  nRF24_CE_Enable(Sel_B_Module2);
 8000690:	2002      	movs	r0, #2
 8000692:	f003 fafb 	bl	8003c8c <nRF24_CE_Enable>
  nRF24_Module_Setup(Sel_B_Module3, Receiver_Mode_noAA_noCRC,
 8000696:	4b73      	ldr	r3, [pc, #460]	; (8000864 <main+0x2d8>)
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	4b74      	ldr	r3, [pc, #464]	; (800086c <main+0x2e0>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	9302      	str	r3, [sp, #8]
 80006a0:	2307      	movs	r3, #7
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	4b6a      	ldr	r3, [pc, #424]	; (8000850 <main+0x2c4>)
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	4b68      	ldr	r3, [pc, #416]	; (800084c <main+0x2c0>)
 80006aa:	2102      	movs	r1, #2
 80006ac:	2003      	movs	r0, #3
 80006ae:	f003 fc49 	bl	8003f44 <nRF24_Module_Setup>
		  RF_Channel_Module3, TxAddr_B_Module3, RxAddr_B_Module3,
		  MBPS1_0dBm, Button_Packet_Size);
  nRF24_Power(Sel_B_Module3, Power_Up);
 80006b2:	2101      	movs	r1, #1
 80006b4:	2003      	movs	r0, #3
 80006b6:	f003 fe89 	bl	80043cc <nRF24_Power>
  nRF24_CE_Enable(Sel_B_Module3);
 80006ba:	2003      	movs	r0, #3
 80006bc:	f003 fae6 	bl	8003c8c <nRF24_CE_Enable>
  nRF24_Module_Setup(Sel_B_Module4, Receiver_Mode_noAA_noCRC,
 80006c0:	4b69      	ldr	r3, [pc, #420]	; (8000868 <main+0x2dc>)
 80006c2:	781a      	ldrb	r2, [r3, #0]
 80006c4:	4b69      	ldr	r3, [pc, #420]	; (800086c <main+0x2e0>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	9302      	str	r3, [sp, #8]
 80006ca:	2307      	movs	r3, #7
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	4b62      	ldr	r3, [pc, #392]	; (8000858 <main+0x2cc>)
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	4b60      	ldr	r3, [pc, #384]	; (8000854 <main+0x2c8>)
 80006d4:	2102      	movs	r1, #2
 80006d6:	2004      	movs	r0, #4
 80006d8:	f003 fc34 	bl	8003f44 <nRF24_Module_Setup>
		  RF_Channel_Module4, TxAddr_B_Module4, RxAddr_B_Module4,
		  MBPS1_0dBm, Button_Packet_Size);
  nRF24_Power(Sel_B_Module4, Power_Up);
 80006dc:	2101      	movs	r1, #1
 80006de:	2004      	movs	r0, #4
 80006e0:	f003 fe74 	bl	80043cc <nRF24_Power>
  nRF24_CE_Enable(Sel_B_Module4);
 80006e4:	2004      	movs	r0, #4
 80006e6:	f003 fad1 	bl	8003c8c <nRF24_CE_Enable>
  nRF24_Module_Setup(Sel_EL_Module, Transmitter_Mode_noAA_noCRC,
 80006ea:	4b61      	ldr	r3, [pc, #388]	; (8000870 <main+0x2e4>)
 80006ec:	781a      	ldrb	r2, [r3, #0]
 80006ee:	4b61      	ldr	r3, [pc, #388]	; (8000874 <main+0x2e8>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	9302      	str	r3, [sp, #8]
 80006f4:	2307      	movs	r3, #7
 80006f6:	9301      	str	r3, [sp, #4]
 80006f8:	4b5f      	ldr	r3, [pc, #380]	; (8000878 <main+0x2ec>)
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	4b5f      	ldr	r3, [pc, #380]	; (800087c <main+0x2f0>)
 80006fe:	2105      	movs	r1, #5
 8000700:	2005      	movs	r0, #5
 8000702:	f003 fc1f 	bl	8003f44 <nRF24_Module_Setup>
		  RF_Channel_EL_Module, TxAddr_EL_Module, RxAddr_EL_Module,
		  MBPS1_0dBm, EdgeLED_Packet_Size);
  nRF24_Power(Sel_EL_Module, Power_Up);
 8000706:	2101      	movs	r1, #1
 8000708:	2005      	movs	r0, #5
 800070a:	f003 fe5f 	bl	80043cc <nRF24_Power>
  nRF24_CE_Enable(Sel_EL_Module);
 800070e:	2005      	movs	r0, #5
 8000710:	f003 fabc 	bl	8003c8c <nRF24_CE_Enable>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HAL_UART_Receive(&huart2, &Uart_Cmd, 1, 1000) == HAL_OK)
 8000714:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000718:	2201      	movs	r2, #1
 800071a:	4959      	ldr	r1, [pc, #356]	; (8000880 <main+0x2f4>)
 800071c:	4859      	ldr	r0, [pc, #356]	; (8000884 <main+0x2f8>)
 800071e:	f002 feb4 	bl	800348a <HAL_UART_Receive>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d147      	bne.n	80007b8 <main+0x22c>
	  {
		  if(Uart_Cmd == 'W')
 8000728:	4b55      	ldr	r3, [pc, #340]	; (8000880 <main+0x2f4>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b57      	cmp	r3, #87	; 0x57
 800072e:	d10d      	bne.n	800074c <main+0x1c0>
		  {
			  EdgeLED_Color(1, 255, 255, 255, EdgeLED_Packet);
 8000730:	4b55      	ldr	r3, [pc, #340]	; (8000888 <main+0x2fc>)
 8000732:	9300      	str	r3, [sp, #0]
 8000734:	23ff      	movs	r3, #255	; 0xff
 8000736:	22ff      	movs	r2, #255	; 0xff
 8000738:	21ff      	movs	r1, #255	; 0xff
 800073a:	2001      	movs	r0, #1
 800073c:	f7ff fec6 	bl	80004cc <EdgeLED_Color>
			  HAL_UART_Transmit(&huart2, (uint8_t*)"\nWHITE\n",7, 100);
 8000740:	2364      	movs	r3, #100	; 0x64
 8000742:	2207      	movs	r2, #7
 8000744:	4951      	ldr	r1, [pc, #324]	; (800088c <main+0x300>)
 8000746:	484f      	ldr	r0, [pc, #316]	; (8000884 <main+0x2f8>)
 8000748:	f002 fe0d 	bl	8003366 <HAL_UART_Transmit>
		  }
		  if(Uart_Cmd == 'R')
 800074c:	4b4c      	ldr	r3, [pc, #304]	; (8000880 <main+0x2f4>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b52      	cmp	r3, #82	; 0x52
 8000752:	d10d      	bne.n	8000770 <main+0x1e4>
		  {
			  EdgeLED_Color(1, 0, 255, 0, EdgeLED_Packet);
 8000754:	4b4c      	ldr	r3, [pc, #304]	; (8000888 <main+0x2fc>)
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2300      	movs	r3, #0
 800075a:	22ff      	movs	r2, #255	; 0xff
 800075c:	2100      	movs	r1, #0
 800075e:	2001      	movs	r0, #1
 8000760:	f7ff feb4 	bl	80004cc <EdgeLED_Color>
			  HAL_UART_Transmit(&huart2, (uint8_t*)"\nRED\n",5, 100);
 8000764:	2364      	movs	r3, #100	; 0x64
 8000766:	2205      	movs	r2, #5
 8000768:	4949      	ldr	r1, [pc, #292]	; (8000890 <main+0x304>)
 800076a:	4846      	ldr	r0, [pc, #280]	; (8000884 <main+0x2f8>)
 800076c:	f002 fdfb 	bl	8003366 <HAL_UART_Transmit>
		  }
		  if(Uart_Cmd == 'B')
 8000770:	4b43      	ldr	r3, [pc, #268]	; (8000880 <main+0x2f4>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b42      	cmp	r3, #66	; 0x42
 8000776:	d10d      	bne.n	8000794 <main+0x208>
		  {
			  EdgeLED_Color(1, 0, 0, 255, EdgeLED_Packet);
 8000778:	4b43      	ldr	r3, [pc, #268]	; (8000888 <main+0x2fc>)
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	23ff      	movs	r3, #255	; 0xff
 800077e:	2200      	movs	r2, #0
 8000780:	2100      	movs	r1, #0
 8000782:	2001      	movs	r0, #1
 8000784:	f7ff fea2 	bl	80004cc <EdgeLED_Color>
			  HAL_UART_Transmit(&huart2, (uint8_t*)"\nBLUE\n",6, 100);
 8000788:	2364      	movs	r3, #100	; 0x64
 800078a:	2206      	movs	r2, #6
 800078c:	4941      	ldr	r1, [pc, #260]	; (8000894 <main+0x308>)
 800078e:	483d      	ldr	r0, [pc, #244]	; (8000884 <main+0x2f8>)
 8000790:	f002 fde9 	bl	8003366 <HAL_UART_Transmit>
		  }
		  if(Uart_Cmd == 'G')
 8000794:	4b3a      	ldr	r3, [pc, #232]	; (8000880 <main+0x2f4>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b47      	cmp	r3, #71	; 0x47
 800079a:	d10d      	bne.n	80007b8 <main+0x22c>
		  {
			  EdgeLED_Color(1, 255, 0, 0, EdgeLED_Packet);
 800079c:	4b3a      	ldr	r3, [pc, #232]	; (8000888 <main+0x2fc>)
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	2300      	movs	r3, #0
 80007a2:	2200      	movs	r2, #0
 80007a4:	21ff      	movs	r1, #255	; 0xff
 80007a6:	2001      	movs	r0, #1
 80007a8:	f7ff fe90 	bl	80004cc <EdgeLED_Color>
			  HAL_UART_Transmit(&huart2, (uint8_t*)"\nGREEN\n",7, 100);
 80007ac:	2364      	movs	r3, #100	; 0x64
 80007ae:	2207      	movs	r2, #7
 80007b0:	4939      	ldr	r1, [pc, #228]	; (8000898 <main+0x30c>)
 80007b2:	4834      	ldr	r0, [pc, #208]	; (8000884 <main+0x2f8>)
 80007b4:	f002 fdd7 	bl	8003366 <HAL_UART_Transmit>
		  }
	  }

	  if (__HAL_SPI_GET_FLAG(&ESP32_hspi3, SPI_FLAG_RXNE))
 80007b8:	4b38      	ldr	r3, [pc, #224]	; (800089c <main+0x310>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	689b      	ldr	r3, [r3, #8]
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d107      	bne.n	80007d6 <main+0x24a>
	  {
	      // Read the received data from the SPI data register
		  HAL_SPI_Receive(&ESP32_hspi3, ESP32_Packet, ESP32_Packet_Size, 100);
 80007c6:	4b36      	ldr	r3, [pc, #216]	; (80008a0 <main+0x314>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	2364      	movs	r3, #100	; 0x64
 80007ce:	4935      	ldr	r1, [pc, #212]	; (80008a4 <main+0x318>)
 80007d0:	4832      	ldr	r0, [pc, #200]	; (800089c <main+0x310>)
 80007d2:	f002 f87a 	bl	80028ca <HAL_SPI_Receive>
	  }

	  if (Data_In_Module1 == 1)
 80007d6:	4b34      	ldr	r3, [pc, #208]	; (80008a8 <main+0x31c>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	f040 80c4 	bne.w	8000968 <main+0x3dc>
	  {
#ifdef Debug
		  nRF24_Receive_Report(Sel_B_Module1);
#endif
		  Module1_Packet_Count = 0;
 80007e0:	4b32      	ldr	r3, [pc, #200]	; (80008ac <main+0x320>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]

		  uint8_t Data_In_RX_FIFO = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	73fb      	strb	r3, [r7, #15]
		  //Reading the received packet in FIFO
		  //Checking the status of first bit of FIFO_STATUS
		  while(Data_In_RX_FIFO == 1)
 80007ea:	e01e      	b.n	800082a <main+0x29e>
		  {
			  uint8_t FIFO_Reg = nRF24_ReadReg(Sel_B_Module1, nRF24_REG_FIFO_STATUS);
 80007ec:	2117      	movs	r1, #23
 80007ee:	2001      	movs	r0, #1
 80007f0:	f003 fb4a 	bl	8003e88 <nRF24_ReadReg>
 80007f4:	4603      	mov	r3, r0
 80007f6:	71fb      	strb	r3, [r7, #7]
			  if((FIFO_Reg & 1) == 0)
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d111      	bne.n	8000826 <main+0x29a>
			  {
				  nRF24_Receive(Sel_B_Module1, Module1_Packet[Module1_Packet_Count], Button_Packet_Size);
 8000802:	4b2a      	ldr	r3, [pc, #168]	; (80008ac <main+0x320>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	011b      	lsls	r3, r3, #4
 8000808:	4a29      	ldr	r2, [pc, #164]	; (80008b0 <main+0x324>)
 800080a:	4413      	add	r3, r2
 800080c:	4a17      	ldr	r2, [pc, #92]	; (800086c <main+0x2e0>)
 800080e:	7812      	ldrb	r2, [r2, #0]
 8000810:	4619      	mov	r1, r3
 8000812:	2001      	movs	r0, #1
 8000814:	f003 fd5c 	bl	80042d0 <nRF24_Receive>
				  Module1_Packet_Count++;
 8000818:	4b24      	ldr	r3, [pc, #144]	; (80008ac <main+0x320>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	3301      	adds	r3, #1
 800081e:	b2da      	uxtb	r2, r3
 8000820:	4b22      	ldr	r3, [pc, #136]	; (80008ac <main+0x320>)
 8000822:	701a      	strb	r2, [r3, #0]
 8000824:	e001      	b.n	800082a <main+0x29e>
			  }
			  else
			  {
				  Data_In_RX_FIFO = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	73fb      	strb	r3, [r7, #15]
		  while(Data_In_RX_FIFO == 1)
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d0dd      	beq.n	80007ec <main+0x260>
			  }
		  }
		  HAL_UART_Transmit(&huart2, (uint8_t*)"\n**********************\n\n",25, 100);
#endif

		  for (uint8_t i = 0; i < Module1_Packet_Count; i++)
 8000830:	2300      	movs	r3, #0
 8000832:	73bb      	strb	r3, [r7, #14]
 8000834:	e090      	b.n	8000958 <main+0x3cc>
 8000836:	bf00      	nop
 8000838:	20000000 	.word	0x20000000
 800083c:	2000009c 	.word	0x2000009c
 8000840:	200000a4 	.word	0x200000a4
 8000844:	200000ac 	.word	0x200000ac
 8000848:	200000b4 	.word	0x200000b4
 800084c:	200000bc 	.word	0x200000bc
 8000850:	200000c4 	.word	0x200000c4
 8000854:	200000cc 	.word	0x200000cc
 8000858:	200000d4 	.word	0x200000d4
 800085c:	200003fc 	.word	0x200003fc
 8000860:	200003fd 	.word	0x200003fd
 8000864:	200003fe 	.word	0x200003fe
 8000868:	200003ff 	.word	0x200003ff
 800086c:	20000098 	.word	0x20000098
 8000870:	200000e9 	.word	0x200000e9
 8000874:	20000099 	.word	0x20000099
 8000878:	200000e4 	.word	0x200000e4
 800087c:	200000dc 	.word	0x200000dc
 8000880:	20000400 	.word	0x20000400
 8000884:	2000021c 	.word	0x2000021c
 8000888:	200003e0 	.word	0x200003e0
 800088c:	08004498 	.word	0x08004498
 8000890:	080044a0 	.word	0x080044a0
 8000894:	080044a8 	.word	0x080044a8
 8000898:	080044b0 	.word	0x080044b0
 800089c:	200001c4 	.word	0x200001c4
 80008a0:	2000009a 	.word	0x2000009a
 80008a4:	200003f4 	.word	0x200003f4
 80008a8:	20000402 	.word	0x20000402
 80008ac:	20000406 	.word	0x20000406
 80008b0:	20000260 	.word	0x20000260
		  {
			  //Checking which Button has sent the data
			  Rec_Button_Number = Module1_Packet[i][0];
 80008b4:	7bbb      	ldrb	r3, [r7, #14]
 80008b6:	4aad      	ldr	r2, [pc, #692]	; (8000b6c <main+0x5e0>)
 80008b8:	011b      	lsls	r3, r3, #4
 80008ba:	4413      	add	r3, r2
 80008bc:	781a      	ldrb	r2, [r3, #0]
 80008be:	4bac      	ldr	r3, [pc, #688]	; (8000b70 <main+0x5e4>)
 80008c0:	701a      	strb	r2, [r3, #0]

			  //Checking which key on the button has been pressed
			  Key_Pressed = Module1_Packet[i][1];
 80008c2:	7bbb      	ldrb	r3, [r7, #14]
 80008c4:	4aa9      	ldr	r2, [pc, #676]	; (8000b6c <main+0x5e0>)
 80008c6:	011b      	lsls	r3, r3, #4
 80008c8:	4413      	add	r3, r2
 80008ca:	3301      	adds	r3, #1
 80008cc:	781a      	ldrb	r2, [r3, #0]
 80008ce:	4ba9      	ldr	r3, [pc, #676]	; (8000b74 <main+0x5e8>)
 80008d0:	701a      	strb	r2, [r3, #0]

		      //Sending Color to the specified EdgeLED based on the key pressed
			  switch(Key_Pressed)
 80008d2:	4ba8      	ldr	r3, [pc, #672]	; (8000b74 <main+0x5e8>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	2b03      	cmp	r3, #3
 80008da:	d833      	bhi.n	8000944 <main+0x3b8>
 80008dc:	a201      	add	r2, pc, #4	; (adr r2, 80008e4 <main+0x358>)
 80008de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e2:	bf00      	nop
 80008e4:	080008f5 	.word	0x080008f5
 80008e8:	08000909 	.word	0x08000909
 80008ec:	0800091d 	.word	0x0800091d
 80008f0:	08000931 	.word	0x08000931
			  {
				case 1:
					EdgeLED_Color(Rec_Button_Number, 255, 255, 255, EdgeLED_Packet);
 80008f4:	4b9e      	ldr	r3, [pc, #632]	; (8000b70 <main+0x5e4>)
 80008f6:	7818      	ldrb	r0, [r3, #0]
 80008f8:	4b9f      	ldr	r3, [pc, #636]	; (8000b78 <main+0x5ec>)
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	23ff      	movs	r3, #255	; 0xff
 80008fe:	22ff      	movs	r2, #255	; 0xff
 8000900:	21ff      	movs	r1, #255	; 0xff
 8000902:	f7ff fde3 	bl	80004cc <EdgeLED_Color>
					break;
 8000906:	e01e      	b.n	8000946 <main+0x3ba>
				case 2:
				    EdgeLED_Color(Rec_Button_Number, 255,   0,   0, EdgeLED_Packet);
 8000908:	4b99      	ldr	r3, [pc, #612]	; (8000b70 <main+0x5e4>)
 800090a:	7818      	ldrb	r0, [r3, #0]
 800090c:	4b9a      	ldr	r3, [pc, #616]	; (8000b78 <main+0x5ec>)
 800090e:	9300      	str	r3, [sp, #0]
 8000910:	2300      	movs	r3, #0
 8000912:	2200      	movs	r2, #0
 8000914:	21ff      	movs	r1, #255	; 0xff
 8000916:	f7ff fdd9 	bl	80004cc <EdgeLED_Color>
					break;
 800091a:	e014      	b.n	8000946 <main+0x3ba>
				case 3:
					EdgeLED_Color(Rec_Button_Number,   0, 255,   0, EdgeLED_Packet);
 800091c:	4b94      	ldr	r3, [pc, #592]	; (8000b70 <main+0x5e4>)
 800091e:	7818      	ldrb	r0, [r3, #0]
 8000920:	4b95      	ldr	r3, [pc, #596]	; (8000b78 <main+0x5ec>)
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	2300      	movs	r3, #0
 8000926:	22ff      	movs	r2, #255	; 0xff
 8000928:	2100      	movs	r1, #0
 800092a:	f7ff fdcf 	bl	80004cc <EdgeLED_Color>
					break;
 800092e:	e00a      	b.n	8000946 <main+0x3ba>
				case 4:
				    EdgeLED_Color(Rec_Button_Number,   0,   0, 255, EdgeLED_Packet);
 8000930:	4b8f      	ldr	r3, [pc, #572]	; (8000b70 <main+0x5e4>)
 8000932:	7818      	ldrb	r0, [r3, #0]
 8000934:	4b90      	ldr	r3, [pc, #576]	; (8000b78 <main+0x5ec>)
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	23ff      	movs	r3, #255	; 0xff
 800093a:	2200      	movs	r2, #0
 800093c:	2100      	movs	r1, #0
 800093e:	f7ff fdc5 	bl	80004cc <EdgeLED_Color>
					break;
 8000942:	e000      	b.n	8000946 <main+0x3ba>
				default:
				    break;
 8000944:	bf00      	nop
			  }

			  Rec_Button_Number = 255;
 8000946:	4b8a      	ldr	r3, [pc, #552]	; (8000b70 <main+0x5e4>)
 8000948:	22ff      	movs	r2, #255	; 0xff
 800094a:	701a      	strb	r2, [r3, #0]
			  Key_Pressed = 255;
 800094c:	4b89      	ldr	r3, [pc, #548]	; (8000b74 <main+0x5e8>)
 800094e:	22ff      	movs	r2, #255	; 0xff
 8000950:	701a      	strb	r2, [r3, #0]
		  for (uint8_t i = 0; i < Module1_Packet_Count; i++)
 8000952:	7bbb      	ldrb	r3, [r7, #14]
 8000954:	3301      	adds	r3, #1
 8000956:	73bb      	strb	r3, [r7, #14]
 8000958:	4b88      	ldr	r3, [pc, #544]	; (8000b7c <main+0x5f0>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	7bba      	ldrb	r2, [r7, #14]
 800095e:	429a      	cmp	r2, r3
 8000960:	d3a8      	bcc.n	80008b4 <main+0x328>
		  }

		  Data_In_Module1 = 0;
 8000962:	4b87      	ldr	r3, [pc, #540]	; (8000b80 <main+0x5f4>)
 8000964:	2200      	movs	r2, #0
 8000966:	701a      	strb	r2, [r3, #0]
	  }


	  if (Data_In_Module2 == 1)
 8000968:	4b86      	ldr	r3, [pc, #536]	; (8000b84 <main+0x5f8>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b01      	cmp	r3, #1
 800096e:	f040 8085 	bne.w	8000a7c <main+0x4f0>
	  {
#ifdef Debug
		  nRF24_Receive_Report(Sel_B_Module2);
#endif
		  Module2_Packet_Count = 0;
 8000972:	4b85      	ldr	r3, [pc, #532]	; (8000b88 <main+0x5fc>)
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]

		  uint8_t Data_In_RX_FIFO = 1;
 8000978:	2301      	movs	r3, #1
 800097a:	737b      	strb	r3, [r7, #13]
		  //Reading the received packet in FIFO
		  //Checking the status of first bit of FIFO_STATUS
		  while(Data_In_RX_FIFO == 1)
 800097c:	e01e      	b.n	80009bc <main+0x430>
		  {
			  uint8_t FIFO_Reg = nRF24_ReadReg(Sel_B_Module2, nRF24_REG_FIFO_STATUS);
 800097e:	2117      	movs	r1, #23
 8000980:	2002      	movs	r0, #2
 8000982:	f003 fa81 	bl	8003e88 <nRF24_ReadReg>
 8000986:	4603      	mov	r3, r0
 8000988:	71bb      	strb	r3, [r7, #6]
			  if((FIFO_Reg & 1) == 0)
 800098a:	79bb      	ldrb	r3, [r7, #6]
 800098c:	f003 0301 	and.w	r3, r3, #1
 8000990:	2b00      	cmp	r3, #0
 8000992:	d111      	bne.n	80009b8 <main+0x42c>
			  {
				  nRF24_Receive(Sel_B_Module2, Module2_Packet[Module2_Packet_Count], Button_Packet_Size);
 8000994:	4b7c      	ldr	r3, [pc, #496]	; (8000b88 <main+0x5fc>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	011b      	lsls	r3, r3, #4
 800099a:	4a7c      	ldr	r2, [pc, #496]	; (8000b8c <main+0x600>)
 800099c:	4413      	add	r3, r2
 800099e:	4a7c      	ldr	r2, [pc, #496]	; (8000b90 <main+0x604>)
 80009a0:	7812      	ldrb	r2, [r2, #0]
 80009a2:	4619      	mov	r1, r3
 80009a4:	2002      	movs	r0, #2
 80009a6:	f003 fc93 	bl	80042d0 <nRF24_Receive>
				  Module2_Packet_Count++;
 80009aa:	4b77      	ldr	r3, [pc, #476]	; (8000b88 <main+0x5fc>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	3301      	adds	r3, #1
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4b75      	ldr	r3, [pc, #468]	; (8000b88 <main+0x5fc>)
 80009b4:	701a      	strb	r2, [r3, #0]
 80009b6:	e001      	b.n	80009bc <main+0x430>
			  }
			  else
			  {
				  Data_In_RX_FIFO = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	737b      	strb	r3, [r7, #13]
		  while(Data_In_RX_FIFO == 1)
 80009bc:	7b7b      	ldrb	r3, [r7, #13]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d0dd      	beq.n	800097e <main+0x3f2>
			  }
		  }
		  HAL_UART_Transmit(&huart2, (uint8_t*)"\n**********************\n\n",25, 100);
#endif

		  for (uint8_t i = 0; i < Module2_Packet_Count; i++)
 80009c2:	2300      	movs	r3, #0
 80009c4:	733b      	strb	r3, [r7, #12]
 80009c6:	e051      	b.n	8000a6c <main+0x4e0>
		  {
			  //Checking which Button has sent the data
			  Rec_Button_Number = Module2_Packet[i][0];
 80009c8:	7b3b      	ldrb	r3, [r7, #12]
 80009ca:	4a70      	ldr	r2, [pc, #448]	; (8000b8c <main+0x600>)
 80009cc:	011b      	lsls	r3, r3, #4
 80009ce:	4413      	add	r3, r2
 80009d0:	781a      	ldrb	r2, [r3, #0]
 80009d2:	4b67      	ldr	r3, [pc, #412]	; (8000b70 <main+0x5e4>)
 80009d4:	701a      	strb	r2, [r3, #0]

			  //Checking which key on the button has been pressed
			  Key_Pressed = Module2_Packet[i][1];
 80009d6:	7b3b      	ldrb	r3, [r7, #12]
 80009d8:	4a6c      	ldr	r2, [pc, #432]	; (8000b8c <main+0x600>)
 80009da:	011b      	lsls	r3, r3, #4
 80009dc:	4413      	add	r3, r2
 80009de:	3301      	adds	r3, #1
 80009e0:	781a      	ldrb	r2, [r3, #0]
 80009e2:	4b64      	ldr	r3, [pc, #400]	; (8000b74 <main+0x5e8>)
 80009e4:	701a      	strb	r2, [r3, #0]

		      //Sending Color to the specified EdgeLED based on the key pressed
			  switch(Key_Pressed)
 80009e6:	4b63      	ldr	r3, [pc, #396]	; (8000b74 <main+0x5e8>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	2b03      	cmp	r3, #3
 80009ee:	d833      	bhi.n	8000a58 <main+0x4cc>
 80009f0:	a201      	add	r2, pc, #4	; (adr r2, 80009f8 <main+0x46c>)
 80009f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f6:	bf00      	nop
 80009f8:	08000a09 	.word	0x08000a09
 80009fc:	08000a1d 	.word	0x08000a1d
 8000a00:	08000a31 	.word	0x08000a31
 8000a04:	08000a45 	.word	0x08000a45
			  {
				case 1:
					EdgeLED_Color(Rec_Button_Number, 255, 255, 255, EdgeLED_Packet);
 8000a08:	4b59      	ldr	r3, [pc, #356]	; (8000b70 <main+0x5e4>)
 8000a0a:	7818      	ldrb	r0, [r3, #0]
 8000a0c:	4b5a      	ldr	r3, [pc, #360]	; (8000b78 <main+0x5ec>)
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	23ff      	movs	r3, #255	; 0xff
 8000a12:	22ff      	movs	r2, #255	; 0xff
 8000a14:	21ff      	movs	r1, #255	; 0xff
 8000a16:	f7ff fd59 	bl	80004cc <EdgeLED_Color>
					break;
 8000a1a:	e01e      	b.n	8000a5a <main+0x4ce>
				case 2:
				    EdgeLED_Color(Rec_Button_Number, 255,   0,   0, EdgeLED_Packet);
 8000a1c:	4b54      	ldr	r3, [pc, #336]	; (8000b70 <main+0x5e4>)
 8000a1e:	7818      	ldrb	r0, [r3, #0]
 8000a20:	4b55      	ldr	r3, [pc, #340]	; (8000b78 <main+0x5ec>)
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	2300      	movs	r3, #0
 8000a26:	2200      	movs	r2, #0
 8000a28:	21ff      	movs	r1, #255	; 0xff
 8000a2a:	f7ff fd4f 	bl	80004cc <EdgeLED_Color>
					break;
 8000a2e:	e014      	b.n	8000a5a <main+0x4ce>
				case 3:
					EdgeLED_Color(Rec_Button_Number,   0, 255,   0, EdgeLED_Packet);
 8000a30:	4b4f      	ldr	r3, [pc, #316]	; (8000b70 <main+0x5e4>)
 8000a32:	7818      	ldrb	r0, [r3, #0]
 8000a34:	4b50      	ldr	r3, [pc, #320]	; (8000b78 <main+0x5ec>)
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	2300      	movs	r3, #0
 8000a3a:	22ff      	movs	r2, #255	; 0xff
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	f7ff fd45 	bl	80004cc <EdgeLED_Color>
					break;
 8000a42:	e00a      	b.n	8000a5a <main+0x4ce>
				case 4:
				    EdgeLED_Color(Rec_Button_Number,   0,   0, 255, EdgeLED_Packet);
 8000a44:	4b4a      	ldr	r3, [pc, #296]	; (8000b70 <main+0x5e4>)
 8000a46:	7818      	ldrb	r0, [r3, #0]
 8000a48:	4b4b      	ldr	r3, [pc, #300]	; (8000b78 <main+0x5ec>)
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	23ff      	movs	r3, #255	; 0xff
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	f7ff fd3b 	bl	80004cc <EdgeLED_Color>
					break;
 8000a56:	e000      	b.n	8000a5a <main+0x4ce>
				default:
				    break;
 8000a58:	bf00      	nop
			  }

			  Rec_Button_Number = 255;
 8000a5a:	4b45      	ldr	r3, [pc, #276]	; (8000b70 <main+0x5e4>)
 8000a5c:	22ff      	movs	r2, #255	; 0xff
 8000a5e:	701a      	strb	r2, [r3, #0]
			  Key_Pressed = 255;
 8000a60:	4b44      	ldr	r3, [pc, #272]	; (8000b74 <main+0x5e8>)
 8000a62:	22ff      	movs	r2, #255	; 0xff
 8000a64:	701a      	strb	r2, [r3, #0]
		  for (uint8_t i = 0; i < Module2_Packet_Count; i++)
 8000a66:	7b3b      	ldrb	r3, [r7, #12]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	733b      	strb	r3, [r7, #12]
 8000a6c:	4b46      	ldr	r3, [pc, #280]	; (8000b88 <main+0x5fc>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	7b3a      	ldrb	r2, [r7, #12]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d3a8      	bcc.n	80009c8 <main+0x43c>
		  }

		  Data_In_Module2 = 0;
 8000a76:	4b43      	ldr	r3, [pc, #268]	; (8000b84 <main+0x5f8>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]

	  }
	  if (Data_In_Module3 == 1)
 8000a7c:	4b45      	ldr	r3, [pc, #276]	; (8000b94 <main+0x608>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	f040 809f 	bne.w	8000bc4 <main+0x638>
	  {
#ifdef Debug
		  nRF24_Receive_Report(Sel_B_Module3);
#endif
		  Module3_Packet_Count = 0;
 8000a86:	4b44      	ldr	r3, [pc, #272]	; (8000b98 <main+0x60c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]

		  uint8_t Data_In_RX_FIFO = 1;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	72fb      	strb	r3, [r7, #11]
		  //Reading the received packet in FIFO
		  //Checking the status of first bit of FIFO_STATUS
		  while(Data_In_RX_FIFO == 1)
 8000a90:	e01e      	b.n	8000ad0 <main+0x544>
		  {
			  uint8_t FIFO_Reg = nRF24_ReadReg(Sel_B_Module3, nRF24_REG_FIFO_STATUS);
 8000a92:	2117      	movs	r1, #23
 8000a94:	2003      	movs	r0, #3
 8000a96:	f003 f9f7 	bl	8003e88 <nRF24_ReadReg>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	717b      	strb	r3, [r7, #5]
			  if((FIFO_Reg & 1) == 0)
 8000a9e:	797b      	ldrb	r3, [r7, #5]
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d111      	bne.n	8000acc <main+0x540>
			  {
				  nRF24_Receive(Sel_B_Module3, Module3_Packet[Module3_Packet_Count], Button_Packet_Size);
 8000aa8:	4b3b      	ldr	r3, [pc, #236]	; (8000b98 <main+0x60c>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	011b      	lsls	r3, r3, #4
 8000aae:	4a3b      	ldr	r2, [pc, #236]	; (8000b9c <main+0x610>)
 8000ab0:	4413      	add	r3, r2
 8000ab2:	4a37      	ldr	r2, [pc, #220]	; (8000b90 <main+0x604>)
 8000ab4:	7812      	ldrb	r2, [r2, #0]
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	2003      	movs	r0, #3
 8000aba:	f003 fc09 	bl	80042d0 <nRF24_Receive>
				  Module3_Packet_Count++;
 8000abe:	4b36      	ldr	r3, [pc, #216]	; (8000b98 <main+0x60c>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	4b34      	ldr	r3, [pc, #208]	; (8000b98 <main+0x60c>)
 8000ac8:	701a      	strb	r2, [r3, #0]
 8000aca:	e001      	b.n	8000ad0 <main+0x544>
			  }
			  else
			  {
				  Data_In_RX_FIFO = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	72fb      	strb	r3, [r7, #11]
		  while(Data_In_RX_FIFO == 1)
 8000ad0:	7afb      	ldrb	r3, [r7, #11]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d0dd      	beq.n	8000a92 <main+0x506>
			  }
		  }
		  HAL_UART_Transmit(&huart2, (uint8_t*)"\n**********************\n\n",25, 100);
#endif

		  for (uint8_t i = 0; i < Module3_Packet_Count; i++)
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	72bb      	strb	r3, [r7, #10]
 8000ada:	e06b      	b.n	8000bb4 <main+0x628>
		  {
			  //Checking which Button has sent the data
			  Rec_Button_Number = Module3_Packet[i][0];
 8000adc:	7abb      	ldrb	r3, [r7, #10]
 8000ade:	4a2f      	ldr	r2, [pc, #188]	; (8000b9c <main+0x610>)
 8000ae0:	011b      	lsls	r3, r3, #4
 8000ae2:	4413      	add	r3, r2
 8000ae4:	781a      	ldrb	r2, [r3, #0]
 8000ae6:	4b22      	ldr	r3, [pc, #136]	; (8000b70 <main+0x5e4>)
 8000ae8:	701a      	strb	r2, [r3, #0]

			  //Checking which key on the button has been pressed
			  Key_Pressed = Module3_Packet[i][1];
 8000aea:	7abb      	ldrb	r3, [r7, #10]
 8000aec:	4a2b      	ldr	r2, [pc, #172]	; (8000b9c <main+0x610>)
 8000aee:	011b      	lsls	r3, r3, #4
 8000af0:	4413      	add	r3, r2
 8000af2:	3301      	adds	r3, #1
 8000af4:	781a      	ldrb	r2, [r3, #0]
 8000af6:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <main+0x5e8>)
 8000af8:	701a      	strb	r2, [r3, #0]

		      //Sending Color to the specified EdgeLED based on the key pressed
			  switch(Key_Pressed)
 8000afa:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <main+0x5e8>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	2b03      	cmp	r3, #3
 8000b02:	d84d      	bhi.n	8000ba0 <main+0x614>
 8000b04:	a201      	add	r2, pc, #4	; (adr r2, 8000b0c <main+0x580>)
 8000b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b0a:	bf00      	nop
 8000b0c:	08000b1d 	.word	0x08000b1d
 8000b10:	08000b31 	.word	0x08000b31
 8000b14:	08000b45 	.word	0x08000b45
 8000b18:	08000b59 	.word	0x08000b59
			  {
				case 1:
					EdgeLED_Color(Rec_Button_Number, 255, 255, 255, EdgeLED_Packet);
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <main+0x5e4>)
 8000b1e:	7818      	ldrb	r0, [r3, #0]
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <main+0x5ec>)
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	23ff      	movs	r3, #255	; 0xff
 8000b26:	22ff      	movs	r2, #255	; 0xff
 8000b28:	21ff      	movs	r1, #255	; 0xff
 8000b2a:	f7ff fccf 	bl	80004cc <EdgeLED_Color>
					break;
 8000b2e:	e038      	b.n	8000ba2 <main+0x616>
				case 2:
				    EdgeLED_Color(Rec_Button_Number, 255,   0,   0, EdgeLED_Packet);
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <main+0x5e4>)
 8000b32:	7818      	ldrb	r0, [r3, #0]
 8000b34:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <main+0x5ec>)
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	2300      	movs	r3, #0
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	21ff      	movs	r1, #255	; 0xff
 8000b3e:	f7ff fcc5 	bl	80004cc <EdgeLED_Color>
					break;
 8000b42:	e02e      	b.n	8000ba2 <main+0x616>
				case 3:
					EdgeLED_Color(Rec_Button_Number,   0, 255,   0, EdgeLED_Packet);
 8000b44:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <main+0x5e4>)
 8000b46:	7818      	ldrb	r0, [r3, #0]
 8000b48:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <main+0x5ec>)
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	22ff      	movs	r2, #255	; 0xff
 8000b50:	2100      	movs	r1, #0
 8000b52:	f7ff fcbb 	bl	80004cc <EdgeLED_Color>
					break;
 8000b56:	e024      	b.n	8000ba2 <main+0x616>
				case 4:
				    EdgeLED_Color(Rec_Button_Number,   0,   0, 255, EdgeLED_Packet);
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <main+0x5e4>)
 8000b5a:	7818      	ldrb	r0, [r3, #0]
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <main+0x5ec>)
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	23ff      	movs	r3, #255	; 0xff
 8000b62:	2200      	movs	r2, #0
 8000b64:	2100      	movs	r1, #0
 8000b66:	f7ff fcb1 	bl	80004cc <EdgeLED_Color>
					break;
 8000b6a:	e01a      	b.n	8000ba2 <main+0x616>
 8000b6c:	20000260 	.word	0x20000260
 8000b70:	200000ea 	.word	0x200000ea
 8000b74:	20000401 	.word	0x20000401
 8000b78:	200003e0 	.word	0x200003e0
 8000b7c:	20000406 	.word	0x20000406
 8000b80:	20000402 	.word	0x20000402
 8000b84:	20000403 	.word	0x20000403
 8000b88:	20000407 	.word	0x20000407
 8000b8c:	200002c0 	.word	0x200002c0
 8000b90:	20000098 	.word	0x20000098
 8000b94:	20000404 	.word	0x20000404
 8000b98:	20000408 	.word	0x20000408
 8000b9c:	20000320 	.word	0x20000320
				default:
				    break;
 8000ba0:	bf00      	nop
			  }

			  Rec_Button_Number = 255;
 8000ba2:	4b4e      	ldr	r3, [pc, #312]	; (8000cdc <main+0x750>)
 8000ba4:	22ff      	movs	r2, #255	; 0xff
 8000ba6:	701a      	strb	r2, [r3, #0]
			  Key_Pressed = 255;
 8000ba8:	4b4d      	ldr	r3, [pc, #308]	; (8000ce0 <main+0x754>)
 8000baa:	22ff      	movs	r2, #255	; 0xff
 8000bac:	701a      	strb	r2, [r3, #0]
		  for (uint8_t i = 0; i < Module3_Packet_Count; i++)
 8000bae:	7abb      	ldrb	r3, [r7, #10]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	72bb      	strb	r3, [r7, #10]
 8000bb4:	4b4b      	ldr	r3, [pc, #300]	; (8000ce4 <main+0x758>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	7aba      	ldrb	r2, [r7, #10]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d38e      	bcc.n	8000adc <main+0x550>
		  }

		  Data_In_Module3 = 0;
 8000bbe:	4b4a      	ldr	r3, [pc, #296]	; (8000ce8 <main+0x75c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]

	  }
	  if (Data_In_Module4 == 1)
 8000bc4:	4b49      	ldr	r3, [pc, #292]	; (8000cec <main+0x760>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	f47f ada3 	bne.w	8000714 <main+0x188>
	  {
#ifdef Debug
		  nRF24_Receive_Report(Sel_B_Module4);
#endif
		  Module4_Packet_Count = 0;
 8000bce:	4b48      	ldr	r3, [pc, #288]	; (8000cf0 <main+0x764>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]

		  uint8_t Data_In_RX_FIFO = 1;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	727b      	strb	r3, [r7, #9]
		  //Reading the received packet in FIFO
		  //Checking the status of first bit of FIFO_STATUS
		  while(Data_In_RX_FIFO == 1)
 8000bd8:	e01e      	b.n	8000c18 <main+0x68c>
		  {
			  uint8_t FIFO_Reg = nRF24_ReadReg(Sel_B_Module4, nRF24_REG_FIFO_STATUS);
 8000bda:	2117      	movs	r1, #23
 8000bdc:	2004      	movs	r0, #4
 8000bde:	f003 f953 	bl	8003e88 <nRF24_ReadReg>
 8000be2:	4603      	mov	r3, r0
 8000be4:	713b      	strb	r3, [r7, #4]
			  if((FIFO_Reg & 1) == 0)
 8000be6:	793b      	ldrb	r3, [r7, #4]
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d111      	bne.n	8000c14 <main+0x688>
			  {
				  nRF24_Receive(Sel_B_Module4, Module4_Packet[Module4_Packet_Count], Button_Packet_Size);
 8000bf0:	4b3f      	ldr	r3, [pc, #252]	; (8000cf0 <main+0x764>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	011b      	lsls	r3, r3, #4
 8000bf6:	4a3f      	ldr	r2, [pc, #252]	; (8000cf4 <main+0x768>)
 8000bf8:	4413      	add	r3, r2
 8000bfa:	4a3f      	ldr	r2, [pc, #252]	; (8000cf8 <main+0x76c>)
 8000bfc:	7812      	ldrb	r2, [r2, #0]
 8000bfe:	4619      	mov	r1, r3
 8000c00:	2004      	movs	r0, #4
 8000c02:	f003 fb65 	bl	80042d0 <nRF24_Receive>
				  Module4_Packet_Count++;
 8000c06:	4b3a      	ldr	r3, [pc, #232]	; (8000cf0 <main+0x764>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4b38      	ldr	r3, [pc, #224]	; (8000cf0 <main+0x764>)
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e001      	b.n	8000c18 <main+0x68c>
			  }
			  else
			  {
				  Data_In_RX_FIFO = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	727b      	strb	r3, [r7, #9]
		  while(Data_In_RX_FIFO == 1)
 8000c18:	7a7b      	ldrb	r3, [r7, #9]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d0dd      	beq.n	8000bda <main+0x64e>
			  }
		  }
		  HAL_UART_Transmit(&huart2, (uint8_t*)"\n**********************\n\n",25, 100);
#endif

		  for (uint8_t i = 0; i < Module4_Packet_Count; i++)
 8000c1e:	2300      	movs	r3, #0
 8000c20:	723b      	strb	r3, [r7, #8]
 8000c22:	e051      	b.n	8000cc8 <main+0x73c>
		  {
			  //Checking which Button has sent the data
			  Rec_Button_Number = Module4_Packet[i][0];
 8000c24:	7a3b      	ldrb	r3, [r7, #8]
 8000c26:	4a33      	ldr	r2, [pc, #204]	; (8000cf4 <main+0x768>)
 8000c28:	011b      	lsls	r3, r3, #4
 8000c2a:	4413      	add	r3, r2
 8000c2c:	781a      	ldrb	r2, [r3, #0]
 8000c2e:	4b2b      	ldr	r3, [pc, #172]	; (8000cdc <main+0x750>)
 8000c30:	701a      	strb	r2, [r3, #0]

			  //Checking which key on the button has been pressed
			  Key_Pressed = Module4_Packet[i][1];
 8000c32:	7a3b      	ldrb	r3, [r7, #8]
 8000c34:	4a2f      	ldr	r2, [pc, #188]	; (8000cf4 <main+0x768>)
 8000c36:	011b      	lsls	r3, r3, #4
 8000c38:	4413      	add	r3, r2
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	781a      	ldrb	r2, [r3, #0]
 8000c3e:	4b28      	ldr	r3, [pc, #160]	; (8000ce0 <main+0x754>)
 8000c40:	701a      	strb	r2, [r3, #0]

		      //Sending Color to the specified EdgeLED based on the key pressed
			  switch(Key_Pressed)
 8000c42:	4b27      	ldr	r3, [pc, #156]	; (8000ce0 <main+0x754>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	2b03      	cmp	r3, #3
 8000c4a:	d833      	bhi.n	8000cb4 <main+0x728>
 8000c4c:	a201      	add	r2, pc, #4	; (adr r2, 8000c54 <main+0x6c8>)
 8000c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c52:	bf00      	nop
 8000c54:	08000c65 	.word	0x08000c65
 8000c58:	08000c79 	.word	0x08000c79
 8000c5c:	08000c8d 	.word	0x08000c8d
 8000c60:	08000ca1 	.word	0x08000ca1
			  {
				case 1:
					EdgeLED_Color(Rec_Button_Number, 255, 255, 255, EdgeLED_Packet);
 8000c64:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <main+0x750>)
 8000c66:	7818      	ldrb	r0, [r3, #0]
 8000c68:	4b24      	ldr	r3, [pc, #144]	; (8000cfc <main+0x770>)
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	23ff      	movs	r3, #255	; 0xff
 8000c6e:	22ff      	movs	r2, #255	; 0xff
 8000c70:	21ff      	movs	r1, #255	; 0xff
 8000c72:	f7ff fc2b 	bl	80004cc <EdgeLED_Color>
					break;
 8000c76:	e01e      	b.n	8000cb6 <main+0x72a>
				case 2:
				    EdgeLED_Color(Rec_Button_Number, 255,   0,   0, EdgeLED_Packet);
 8000c78:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <main+0x750>)
 8000c7a:	7818      	ldrb	r0, [r3, #0]
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <main+0x770>)
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	2300      	movs	r3, #0
 8000c82:	2200      	movs	r2, #0
 8000c84:	21ff      	movs	r1, #255	; 0xff
 8000c86:	f7ff fc21 	bl	80004cc <EdgeLED_Color>
					break;
 8000c8a:	e014      	b.n	8000cb6 <main+0x72a>
				case 3:
					EdgeLED_Color(Rec_Button_Number,   0, 255,   0, EdgeLED_Packet);
 8000c8c:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <main+0x750>)
 8000c8e:	7818      	ldrb	r0, [r3, #0]
 8000c90:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <main+0x770>)
 8000c92:	9300      	str	r3, [sp, #0]
 8000c94:	2300      	movs	r3, #0
 8000c96:	22ff      	movs	r2, #255	; 0xff
 8000c98:	2100      	movs	r1, #0
 8000c9a:	f7ff fc17 	bl	80004cc <EdgeLED_Color>
					break;
 8000c9e:	e00a      	b.n	8000cb6 <main+0x72a>
				case 4:
				    EdgeLED_Color(Rec_Button_Number,   0,   0, 255, EdgeLED_Packet);
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <main+0x750>)
 8000ca2:	7818      	ldrb	r0, [r3, #0]
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <main+0x770>)
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	23ff      	movs	r3, #255	; 0xff
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	f7ff fc0d 	bl	80004cc <EdgeLED_Color>
					break;
 8000cb2:	e000      	b.n	8000cb6 <main+0x72a>
				default:
				    break;
 8000cb4:	bf00      	nop
			  }

			  Rec_Button_Number = 255;
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <main+0x750>)
 8000cb8:	22ff      	movs	r2, #255	; 0xff
 8000cba:	701a      	strb	r2, [r3, #0]
			  Key_Pressed = 255;
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <main+0x754>)
 8000cbe:	22ff      	movs	r2, #255	; 0xff
 8000cc0:	701a      	strb	r2, [r3, #0]
		  for (uint8_t i = 0; i < Module4_Packet_Count; i++)
 8000cc2:	7a3b      	ldrb	r3, [r7, #8]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	723b      	strb	r3, [r7, #8]
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <main+0x764>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	7a3a      	ldrb	r2, [r7, #8]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d3a8      	bcc.n	8000c24 <main+0x698>
		  }

		  Data_In_Module4 = 0;
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <main+0x760>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
	  if(HAL_UART_Receive(&huart2, &Uart_Cmd, 1, 1000) == HAL_OK)
 8000cd8:	e51c      	b.n	8000714 <main+0x188>
 8000cda:	bf00      	nop
 8000cdc:	200000ea 	.word	0x200000ea
 8000ce0:	20000401 	.word	0x20000401
 8000ce4:	20000408 	.word	0x20000408
 8000ce8:	20000404 	.word	0x20000404
 8000cec:	20000405 	.word	0x20000405
 8000cf0:	20000409 	.word	0x20000409
 8000cf4:	20000380 	.word	0x20000380
 8000cf8:	20000098 	.word	0x20000098
 8000cfc:	200003e0 	.word	0x200003e0

08000d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b094      	sub	sp, #80	; 0x50
 8000d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d06:	f107 0320 	add.w	r3, r7, #32
 8000d0a:	2230      	movs	r2, #48	; 0x30
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f003 fbae 	bl	8004470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d14:	f107 030c 	add.w	r3, r7, #12
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d24:	2300      	movs	r3, #0
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <SystemClock_Config+0xb4>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2c:	4a21      	ldr	r2, [pc, #132]	; (8000db4 <SystemClock_Config+0xb4>)
 8000d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d32:	6413      	str	r3, [r2, #64]	; 0x40
 8000d34:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <SystemClock_Config+0xb4>)
 8000d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d40:	2300      	movs	r3, #0
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <SystemClock_Config+0xb8>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a1b      	ldr	r2, [pc, #108]	; (8000db8 <SystemClock_Config+0xb8>)
 8000d4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <SystemClock_Config+0xb8>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d60:	2301      	movs	r3, #1
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d64:	2310      	movs	r3, #16
 8000d66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6c:	f107 0320 	add.w	r3, r7, #32
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 ff8d 	bl	8001c90 <HAL_RCC_OscConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000d7c:	f000 fa0c 	bl	8001198 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d80:	230f      	movs	r3, #15
 8000d82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d84:	2300      	movs	r3, #0
 8000d86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f001 f9f0 	bl	8002180 <HAL_RCC_ClockConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000da6:	f000 f9f7 	bl	8001198 <Error_Handler>
  }
}
 8000daa:	bf00      	nop
 8000dac:	3750      	adds	r7, #80	; 0x50
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40007000 	.word	0x40007000

08000dbc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  Button_hspi1.Instance = SPI1;
 8000dc0:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <MX_SPI1_Init+0x64>)
 8000dc2:	4a18      	ldr	r2, [pc, #96]	; (8000e24 <MX_SPI1_Init+0x68>)
 8000dc4:	601a      	str	r2, [r3, #0]
  Button_hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dc6:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <MX_SPI1_Init+0x64>)
 8000dc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dcc:	605a      	str	r2, [r3, #4]
  Button_hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dce:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <MX_SPI1_Init+0x64>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  Button_hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <MX_SPI1_Init+0x64>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  Button_hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <MX_SPI1_Init+0x64>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  Button_hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <MX_SPI1_Init+0x64>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	615a      	str	r2, [r3, #20]
  Button_hspi1.Init.NSS = SPI_NSS_SOFT;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <MX_SPI1_Init+0x64>)
 8000de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dec:	619a      	str	r2, [r3, #24]
  Button_hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <MX_SPI1_Init+0x64>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	61da      	str	r2, [r3, #28]
  Button_hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000df4:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <MX_SPI1_Init+0x64>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	621a      	str	r2, [r3, #32]
  Button_hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <MX_SPI1_Init+0x64>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	625a      	str	r2, [r3, #36]	; 0x24
  Button_hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <MX_SPI1_Init+0x64>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	629a      	str	r2, [r3, #40]	; 0x28
  Button_hspi1.Init.CRCPolynomial = 10;
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <MX_SPI1_Init+0x64>)
 8000e08:	220a      	movs	r2, #10
 8000e0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&Button_hspi1) != HAL_OK)
 8000e0c:	4804      	ldr	r0, [pc, #16]	; (8000e20 <MX_SPI1_Init+0x64>)
 8000e0e:	f001 fb97 	bl	8002540 <HAL_SPI_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e18:	f000 f9be 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000114 	.word	0x20000114
 8000e24:	40013000 	.word	0x40013000

08000e28 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  EL_hspi2.Instance = SPI2;
 8000e2c:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <MX_SPI2_Init+0x64>)
 8000e2e:	4a18      	ldr	r2, [pc, #96]	; (8000e90 <MX_SPI2_Init+0x68>)
 8000e30:	601a      	str	r2, [r3, #0]
  EL_hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e32:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <MX_SPI2_Init+0x64>)
 8000e34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e38:	605a      	str	r2, [r3, #4]
  EL_hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e3a:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <MX_SPI2_Init+0x64>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  EL_hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <MX_SPI2_Init+0x64>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
  EL_hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <MX_SPI2_Init+0x64>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  EL_hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <MX_SPI2_Init+0x64>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	615a      	str	r2, [r3, #20]
  EL_hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <MX_SPI2_Init+0x64>)
 8000e54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e58:	619a      	str	r2, [r3, #24]
  EL_hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <MX_SPI2_Init+0x64>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	61da      	str	r2, [r3, #28]
  EL_hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <MX_SPI2_Init+0x64>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	621a      	str	r2, [r3, #32]
  EL_hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <MX_SPI2_Init+0x64>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	625a      	str	r2, [r3, #36]	; 0x24
  EL_hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e6c:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <MX_SPI2_Init+0x64>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	629a      	str	r2, [r3, #40]	; 0x28
  EL_hspi2.Init.CRCPolynomial = 10;
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <MX_SPI2_Init+0x64>)
 8000e74:	220a      	movs	r2, #10
 8000e76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&EL_hspi2) != HAL_OK)
 8000e78:	4804      	ldr	r0, [pc, #16]	; (8000e8c <MX_SPI2_Init+0x64>)
 8000e7a:	f001 fb61 	bl	8002540 <HAL_SPI_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000e84:	f000 f988 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	2000016c 	.word	0x2000016c
 8000e90:	40003800 	.word	0x40003800

08000e94 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  ESP32_hspi3.Instance = SPI3;
 8000e98:	4b17      	ldr	r3, [pc, #92]	; (8000ef8 <MX_SPI3_Init+0x64>)
 8000e9a:	4a18      	ldr	r2, [pc, #96]	; (8000efc <MX_SPI3_Init+0x68>)
 8000e9c:	601a      	str	r2, [r3, #0]
  ESP32_hspi3.Init.Mode = SPI_MODE_MASTER;
 8000e9e:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <MX_SPI3_Init+0x64>)
 8000ea0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ea4:	605a      	str	r2, [r3, #4]
  ESP32_hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ea6:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <MX_SPI3_Init+0x64>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  ESP32_hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <MX_SPI3_Init+0x64>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
  ESP32_hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <MX_SPI3_Init+0x64>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  ESP32_hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <MX_SPI3_Init+0x64>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	615a      	str	r2, [r3, #20]
  ESP32_hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <MX_SPI3_Init+0x64>)
 8000ec0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ec4:	619a      	str	r2, [r3, #24]
  ESP32_hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <MX_SPI3_Init+0x64>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	61da      	str	r2, [r3, #28]
  ESP32_hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <MX_SPI3_Init+0x64>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	621a      	str	r2, [r3, #32]
  ESP32_hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <MX_SPI3_Init+0x64>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	625a      	str	r2, [r3, #36]	; 0x24
  ESP32_hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ed8:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <MX_SPI3_Init+0x64>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	629a      	str	r2, [r3, #40]	; 0x28
  ESP32_hspi3.Init.CRCPolynomial = 10;
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <MX_SPI3_Init+0x64>)
 8000ee0:	220a      	movs	r2, #10
 8000ee2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&ESP32_hspi3) != HAL_OK)
 8000ee4:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <MX_SPI3_Init+0x64>)
 8000ee6:	f001 fb2b 	bl	8002540 <HAL_SPI_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000ef0:	f000 f952 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	200001c4 	.word	0x200001c4
 8000efc:	40003c00 	.word	0x40003c00

08000f00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f06:	4a12      	ldr	r2, [pc, #72]	; (8000f50 <MX_USART2_UART_Init+0x50>)
 8000f08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f26:	220c      	movs	r2, #12
 8000f28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2a:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f38:	f002 f9c8 	bl	80032cc <HAL_UART_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f42:	f000 f929 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	2000021c 	.word	0x2000021c
 8000f50:	40004400 	.word	0x40004400

08000f54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08a      	sub	sp, #40	; 0x28
 8000f58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	4b85      	ldr	r3, [pc, #532]	; (8001184 <MX_GPIO_Init+0x230>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a84      	ldr	r2, [pc, #528]	; (8001184 <MX_GPIO_Init+0x230>)
 8000f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b82      	ldr	r3, [pc, #520]	; (8001184 <MX_GPIO_Init+0x230>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b7e      	ldr	r3, [pc, #504]	; (8001184 <MX_GPIO_Init+0x230>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a7d      	ldr	r2, [pc, #500]	; (8001184 <MX_GPIO_Init+0x230>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b7b      	ldr	r3, [pc, #492]	; (8001184 <MX_GPIO_Init+0x230>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	4b77      	ldr	r3, [pc, #476]	; (8001184 <MX_GPIO_Init+0x230>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a76      	ldr	r2, [pc, #472]	; (8001184 <MX_GPIO_Init+0x230>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b74      	ldr	r3, [pc, #464]	; (8001184 <MX_GPIO_Init+0x230>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	4b70      	ldr	r3, [pc, #448]	; (8001184 <MX_GPIO_Init+0x230>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a6f      	ldr	r2, [pc, #444]	; (8001184 <MX_GPIO_Init+0x230>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b6d      	ldr	r3, [pc, #436]	; (8001184 <MX_GPIO_Init+0x230>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	603b      	str	r3, [r7, #0]
 8000fde:	4b69      	ldr	r3, [pc, #420]	; (8001184 <MX_GPIO_Init+0x230>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a68      	ldr	r2, [pc, #416]	; (8001184 <MX_GPIO_Init+0x230>)
 8000fe4:	f043 0308 	orr.w	r3, r3, #8
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b66      	ldr	r3, [pc, #408]	; (8001184 <MX_GPIO_Init+0x230>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, nRF_EL_CSN_Pin|nRF_B_CSN1_Pin|nRF_B_CSN4_Pin, GPIO_PIN_SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f240 1121 	movw	r1, #289	; 0x121
 8000ffc:	4862      	ldr	r0, [pc, #392]	; (8001188 <MX_GPIO_Init+0x234>)
 8000ffe:	f000 fe15 	bl	8001c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nRF_EL_CE_Pin|T_LED1_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f240 2101 	movw	r1, #513	; 0x201
 8001008:	4860      	ldr	r0, [pc, #384]	; (800118c <MX_GPIO_Init+0x238>)
 800100a:	f000 fe0f 	bl	8001c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, nRF_B_CE1_Pin|nRF_B_CE2_Pin|nRF_B_CE3_Pin, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	f242 0105 	movw	r1, #8197	; 0x2005
 8001014:	485e      	ldr	r0, [pc, #376]	; (8001190 <MX_GPIO_Init+0x23c>)
 8001016:	f000 fe09 	bl	8001c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, nRF_B_CSN2_Pin|nRF_B_CSN3_Pin, GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	f640 0102 	movw	r1, #2050	; 0x802
 8001020:	485b      	ldr	r0, [pc, #364]	; (8001190 <MX_GPIO_Init+0x23c>)
 8001022:	f000 fe03 	bl	8001c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, nRF_B_CE4_Pin|T_LED2_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 7120 	mov.w	r1, #640	; 0x280
 800102c:	4856      	ldr	r0, [pc, #344]	; (8001188 <MX_GPIO_Init+0x234>)
 800102e:	f000 fdfd 	bl	8001c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_CS_GPIO_Port, ESP32_CS_Pin, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	2104      	movs	r1, #4
 8001036:	4857      	ldr	r0, [pc, #348]	; (8001194 <MX_GPIO_Init+0x240>)
 8001038:	f000 fdf8 	bl	8001c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : nRF_EL_CSN_Pin nRF_B_CSN1_Pin nRF_B_CE4_Pin nRF_B_CSN4_Pin */
  GPIO_InitStruct.Pin = nRF_EL_CSN_Pin|nRF_B_CSN1_Pin|nRF_B_CE4_Pin|nRF_B_CSN4_Pin;
 800103c:	f240 13a1 	movw	r3, #417	; 0x1a1
 8001040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001042:	2301      	movs	r3, #1
 8001044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800104a:	2302      	movs	r3, #2
 800104c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	4619      	mov	r1, r3
 8001054:	484c      	ldr	r0, [pc, #304]	; (8001188 <MX_GPIO_Init+0x234>)
 8001056:	f000 fc4d 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : nRF_EL_IRQ_Pin nRF_B_IRQ1_Pin nRF_B_IRQ4_Pin */
  GPIO_InitStruct.Pin = nRF_EL_IRQ_Pin|nRF_B_IRQ1_Pin|nRF_B_IRQ4_Pin;
 800105a:	2352      	movs	r3, #82	; 0x52
 800105c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800105e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	4846      	ldr	r0, [pc, #280]	; (8001188 <MX_GPIO_Init+0x234>)
 8001070:	f000 fc40 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : nRF_EL_CE_Pin */
  GPIO_InitStruct.Pin = nRF_EL_CE_Pin;
 8001074:	2301      	movs	r3, #1
 8001076:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001078:	2301      	movs	r3, #1
 800107a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001080:	2302      	movs	r3, #2
 8001082:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nRF_EL_CE_GPIO_Port, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	4840      	ldr	r0, [pc, #256]	; (800118c <MX_GPIO_Init+0x238>)
 800108c:	f000 fc32 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : nRF_B_CE1_Pin nRF_B_CSN2_Pin nRF_B_CE2_Pin nRF_B_CSN3_Pin
                           nRF_B_CE3_Pin */
  GPIO_InitStruct.Pin = nRF_B_CE1_Pin|nRF_B_CSN2_Pin|nRF_B_CE2_Pin|nRF_B_CSN3_Pin
 8001090:	f642 0307 	movw	r3, #10247	; 0x2807
 8001094:	617b      	str	r3, [r7, #20]
                          |nRF_B_CE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001096:	2301      	movs	r3, #1
 8001098:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800109e:	2302      	movs	r3, #2
 80010a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	4839      	ldr	r0, [pc, #228]	; (8001190 <MX_GPIO_Init+0x23c>)
 80010aa:	f000 fc23 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : nRF_B_IRQ2_Pin nRF_B_IRQ3_Pin */
  GPIO_InitStruct.Pin = nRF_B_IRQ2_Pin|nRF_B_IRQ3_Pin;
 80010ae:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80010b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010b4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	4832      	ldr	r0, [pc, #200]	; (8001190 <MX_GPIO_Init+0x23c>)
 80010c6:	f000 fc15 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_LED2_Pin */
  GPIO_InitStruct.Pin = T_LED2_Pin;
 80010ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d0:	2301      	movs	r3, #1
 80010d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(T_LED2_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	4829      	ldr	r0, [pc, #164]	; (8001188 <MX_GPIO_Init+0x234>)
 80010e4:	f000 fc06 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_Key2_Pin T_Key1_Pin */
  GPIO_InitStruct.Pin = T_Key2_Pin|T_Key1_Pin;
 80010e8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80010ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010f2:	2302      	movs	r3, #2
 80010f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	4619      	mov	r1, r3
 80010fc:	4823      	ldr	r0, [pc, #140]	; (800118c <MX_GPIO_Init+0x238>)
 80010fe:	f000 fbf9 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_LED1_Pin */
  GPIO_InitStruct.Pin = T_LED1_Pin;
 8001102:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001108:	2301      	movs	r3, #1
 800110a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(T_LED1_GPIO_Port, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	481c      	ldr	r0, [pc, #112]	; (800118c <MX_GPIO_Init+0x238>)
 800111c:	f000 fbea 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP32_CS_Pin */
  GPIO_InitStruct.Pin = ESP32_CS_Pin;
 8001120:	2304      	movs	r3, #4
 8001122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	2301      	movs	r3, #1
 8001126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800112c:	2302      	movs	r3, #2
 800112e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESP32_CS_GPIO_Port, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	4817      	ldr	r0, [pc, #92]	; (8001194 <MX_GPIO_Init+0x240>)
 8001138:	f000 fbdc 	bl	80018f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800113c:	2200      	movs	r2, #0
 800113e:	2100      	movs	r1, #0
 8001140:	2007      	movs	r0, #7
 8001142:	f000 fb7e 	bl	8001842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001146:	2007      	movs	r0, #7
 8001148:	f000 fb97 	bl	800187a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800114c:	2200      	movs	r2, #0
 800114e:	2100      	movs	r1, #0
 8001150:	200a      	movs	r0, #10
 8001152:	f000 fb76 	bl	8001842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001156:	200a      	movs	r0, #10
 8001158:	f000 fb8f 	bl	800187a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2100      	movs	r1, #0
 8001160:	2017      	movs	r0, #23
 8001162:	f000 fb6e 	bl	8001842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001166:	2017      	movs	r0, #23
 8001168:	f000 fb87 	bl	800187a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2100      	movs	r1, #0
 8001170:	2028      	movs	r0, #40	; 0x28
 8001172:	f000 fb66 	bl	8001842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001176:	2028      	movs	r0, #40	; 0x28
 8001178:	f000 fb7f 	bl	800187a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800117c:	bf00      	nop
 800117e:	3728      	adds	r7, #40	; 0x28
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40023800 	.word	0x40023800
 8001188:	40020800 	.word	0x40020800
 800118c:	40020000 	.word	0x40020000
 8001190:	40020400 	.word	0x40020400
 8001194:	40020c00 	.word	0x40020c00

08001198 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800119c:	b672      	cpsid	i
}
 800119e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <Error_Handler+0x8>
	...

080011a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <HAL_MspInit+0x4c>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	4a0f      	ldr	r2, [pc, #60]	; (80011f0 <HAL_MspInit+0x4c>)
 80011b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ba:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <HAL_MspInit+0x4c>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	603b      	str	r3, [r7, #0]
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <HAL_MspInit+0x4c>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	4a08      	ldr	r2, [pc, #32]	; (80011f0 <HAL_MspInit+0x4c>)
 80011d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d4:	6413      	str	r3, [r2, #64]	; 0x40
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_MspInit+0x4c>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800

080011f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08e      	sub	sp, #56	; 0x38
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a5f      	ldr	r2, [pc, #380]	; (8001390 <HAL_SPI_MspInit+0x19c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d12c      	bne.n	8001270 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	623b      	str	r3, [r7, #32]
 800121a:	4b5e      	ldr	r3, [pc, #376]	; (8001394 <HAL_SPI_MspInit+0x1a0>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	4a5d      	ldr	r2, [pc, #372]	; (8001394 <HAL_SPI_MspInit+0x1a0>)
 8001220:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001224:	6453      	str	r3, [r2, #68]	; 0x44
 8001226:	4b5b      	ldr	r3, [pc, #364]	; (8001394 <HAL_SPI_MspInit+0x1a0>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800122e:	623b      	str	r3, [r7, #32]
 8001230:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
 8001236:	4b57      	ldr	r3, [pc, #348]	; (8001394 <HAL_SPI_MspInit+0x1a0>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a56      	ldr	r2, [pc, #344]	; (8001394 <HAL_SPI_MspInit+0x1a0>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b54      	ldr	r3, [pc, #336]	; (8001394 <HAL_SPI_MspInit+0x1a0>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	61fb      	str	r3, [r7, #28]
 800124c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = nRF_B_SCK_Pin|nRF_B_MISO_Pin|nRF_B_MOSI_Pin;
 800124e:	23e0      	movs	r3, #224	; 0xe0
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125a:	2303      	movs	r3, #3
 800125c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800125e:	2305      	movs	r3, #5
 8001260:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001266:	4619      	mov	r1, r3
 8001268:	484b      	ldr	r0, [pc, #300]	; (8001398 <HAL_SPI_MspInit+0x1a4>)
 800126a:	f000 fb43 	bl	80018f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800126e:	e08a      	b.n	8001386 <HAL_SPI_MspInit+0x192>
  else if(hspi->Instance==SPI2)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a49      	ldr	r2, [pc, #292]	; (800139c <HAL_SPI_MspInit+0x1a8>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d14b      	bne.n	8001312 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	61bb      	str	r3, [r7, #24]
 800127e:	4b45      	ldr	r3, [pc, #276]	; (8001394 <HAL_SPI_MspInit+0x1a0>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	4a44      	ldr	r2, [pc, #272]	; (8001394 <HAL_SPI_MspInit+0x1a0>)
 8001284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001288:	6413      	str	r3, [r2, #64]	; 0x40
 800128a:	4b42      	ldr	r3, [pc, #264]	; (8001394 <HAL_SPI_MspInit+0x1a0>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001292:	61bb      	str	r3, [r7, #24]
 8001294:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	4b3e      	ldr	r3, [pc, #248]	; (8001394 <HAL_SPI_MspInit+0x1a0>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a3d      	ldr	r2, [pc, #244]	; (8001394 <HAL_SPI_MspInit+0x1a0>)
 80012a0:	f043 0304 	orr.w	r3, r3, #4
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b3b      	ldr	r3, [pc, #236]	; (8001394 <HAL_SPI_MspInit+0x1a0>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0304 	and.w	r3, r3, #4
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	4b37      	ldr	r3, [pc, #220]	; (8001394 <HAL_SPI_MspInit+0x1a0>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a36      	ldr	r2, [pc, #216]	; (8001394 <HAL_SPI_MspInit+0x1a0>)
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b34      	ldr	r3, [pc, #208]	; (8001394 <HAL_SPI_MspInit+0x1a0>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = nRF_EL_MISO_Pin|nRF_EL_MOSI_Pin;
 80012ce:	230c      	movs	r3, #12
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012de:	2305      	movs	r3, #5
 80012e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e6:	4619      	mov	r1, r3
 80012e8:	482d      	ldr	r0, [pc, #180]	; (80013a0 <HAL_SPI_MspInit+0x1ac>)
 80012ea:	f000 fb03 	bl	80018f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = nRF_EL_SCK_Pin;
 80012ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001300:	2305      	movs	r3, #5
 8001302:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(nRF_EL_SCK_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001308:	4619      	mov	r1, r3
 800130a:	4826      	ldr	r0, [pc, #152]	; (80013a4 <HAL_SPI_MspInit+0x1b0>)
 800130c:	f000 faf2 	bl	80018f4 <HAL_GPIO_Init>
}
 8001310:	e039      	b.n	8001386 <HAL_SPI_MspInit+0x192>
  else if(hspi->Instance==SPI3)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a24      	ldr	r2, [pc, #144]	; (80013a8 <HAL_SPI_MspInit+0x1b4>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d134      	bne.n	8001386 <HAL_SPI_MspInit+0x192>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <HAL_SPI_MspInit+0x1a0>)
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	4a1b      	ldr	r2, [pc, #108]	; (8001394 <HAL_SPI_MspInit+0x1a0>)
 8001326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800132a:	6413      	str	r3, [r2, #64]	; 0x40
 800132c:	4b19      	ldr	r3, [pc, #100]	; (8001394 <HAL_SPI_MspInit+0x1a0>)
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001338:	2300      	movs	r3, #0
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	4b15      	ldr	r3, [pc, #84]	; (8001394 <HAL_SPI_MspInit+0x1a0>)
 800133e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001340:	4a14      	ldr	r2, [pc, #80]	; (8001394 <HAL_SPI_MspInit+0x1a0>)
 8001342:	f043 0304 	orr.w	r3, r3, #4
 8001346:	6313      	str	r3, [r2, #48]	; 0x30
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <HAL_SPI_MspInit+0x1a0>)
 800134a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ESP32_SCK_Pin|ESP32_MISO_Pin|ESP32_MOSI_Pin;
 8001354:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001362:	2303      	movs	r3, #3
 8001364:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001366:	2306      	movs	r3, #6
 8001368:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800136a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136e:	4619      	mov	r1, r3
 8001370:	480b      	ldr	r0, [pc, #44]	; (80013a0 <HAL_SPI_MspInit+0x1ac>)
 8001372:	f000 fabf 	bl	80018f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	2033      	movs	r0, #51	; 0x33
 800137c:	f000 fa61 	bl	8001842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001380:	2033      	movs	r0, #51	; 0x33
 8001382:	f000 fa7a 	bl	800187a <HAL_NVIC_EnableIRQ>
}
 8001386:	bf00      	nop
 8001388:	3738      	adds	r7, #56	; 0x38
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40013000 	.word	0x40013000
 8001394:	40023800 	.word	0x40023800
 8001398:	40020000 	.word	0x40020000
 800139c:	40003800 	.word	0x40003800
 80013a0:	40020800 	.word	0x40020800
 80013a4:	40020400 	.word	0x40020400
 80013a8:	40003c00 	.word	0x40003c00

080013ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a19      	ldr	r2, [pc, #100]	; (8001430 <HAL_UART_MspInit+0x84>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d12b      	bne.n	8001426 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	4b18      	ldr	r3, [pc, #96]	; (8001434 <HAL_UART_MspInit+0x88>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	4a17      	ldr	r2, [pc, #92]	; (8001434 <HAL_UART_MspInit+0x88>)
 80013d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013dc:	6413      	str	r3, [r2, #64]	; 0x40
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <HAL_UART_MspInit+0x88>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <HAL_UART_MspInit+0x88>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a10      	ldr	r2, [pc, #64]	; (8001434 <HAL_UART_MspInit+0x88>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <HAL_UART_MspInit+0x88>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001406:	230c      	movs	r3, #12
 8001408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2302      	movs	r3, #2
 800140c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001412:	2303      	movs	r3, #3
 8001414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001416:	2307      	movs	r3, #7
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	4805      	ldr	r0, [pc, #20]	; (8001438 <HAL_UART_MspInit+0x8c>)
 8001422:	f000 fa67 	bl	80018f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001426:	bf00      	nop
 8001428:	3728      	adds	r7, #40	; 0x28
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40004400 	.word	0x40004400
 8001434:	40023800 	.word	0x40023800
 8001438:	40020000 	.word	0x40020000

0800143c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <NMI_Handler+0x4>

08001442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001446:	e7fe      	b.n	8001446 <HardFault_Handler+0x4>

08001448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800144c:	e7fe      	b.n	800144c <MemManage_Handler+0x4>

0800144e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001452:	e7fe      	b.n	8001452 <BusFault_Handler+0x4>

08001454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <UsageFault_Handler+0x4>

0800145a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001488:	f000 f8bc 	bl	8001604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}

08001490 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nRF_EL_IRQ_Pin);
 8001494:	2002      	movs	r0, #2
 8001496:	f000 fbe3 	bl	8001c60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}

0800149e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nRF_B_IRQ1_Pin);
 80014a2:	2010      	movs	r0, #16
 80014a4:	f000 fbdc 	bl	8001c60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}

080014ac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nRF_B_IRQ4_Pin);
 80014b0:	2040      	movs	r0, #64	; 0x40
 80014b2:	f000 fbd5 	bl	8001c60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}

080014ba <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nRF_B_IRQ2_Pin);
 80014be:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80014c2:	f000 fbcd 	bl	8001c60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(nRF_B_IRQ3_Pin);
 80014c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80014ca:	f000 fbc9 	bl	8001c60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&ESP32_hspi3);
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <SPI3_IRQHandler+0x10>)
 80014da:	f001 fca9 	bl	8002e30 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200001c4 	.word	0x200001c4

080014e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <SystemInit+0x20>)
 80014ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014f2:	4a05      	ldr	r2, [pc, #20]	; (8001508 <SystemInit+0x20>)
 80014f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800150c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001544 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001510:	480d      	ldr	r0, [pc, #52]	; (8001548 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001512:	490e      	ldr	r1, [pc, #56]	; (800154c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001514:	4a0e      	ldr	r2, [pc, #56]	; (8001550 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001518:	e002      	b.n	8001520 <LoopCopyDataInit>

0800151a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800151c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151e:	3304      	adds	r3, #4

08001520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001524:	d3f9      	bcc.n	800151a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001526:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001528:	4c0b      	ldr	r4, [pc, #44]	; (8001558 <LoopFillZerobss+0x26>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800152c:	e001      	b.n	8001532 <LoopFillZerobss>

0800152e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001530:	3204      	adds	r2, #4

08001532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001534:	d3fb      	bcc.n	800152e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001536:	f7ff ffd7 	bl	80014e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800153a:	f002 ff75 	bl	8004428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800153e:	f7ff f825 	bl	800058c <main>
  bx  lr    
 8001542:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001544:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800154c:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8001550:	080044e0 	.word	0x080044e0
  ldr r2, =_sbss
 8001554:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8001558:	20000410 	.word	0x20000410

0800155c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800155c:	e7fe      	b.n	800155c <ADC_IRQHandler>
	...

08001560 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_Init+0x40>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0d      	ldr	r2, [pc, #52]	; (80015a0 <HAL_Init+0x40>)
 800156a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800156e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <HAL_Init+0x40>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <HAL_Init+0x40>)
 8001576:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800157a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <HAL_Init+0x40>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a07      	ldr	r2, [pc, #28]	; (80015a0 <HAL_Init+0x40>)
 8001582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001586:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001588:	2003      	movs	r0, #3
 800158a:	f000 f94f 	bl	800182c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800158e:	200f      	movs	r0, #15
 8001590:	f000 f808 	bl	80015a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001594:	f7ff fe06 	bl	80011a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40023c00 	.word	0x40023c00

080015a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_InitTick+0x54>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_InitTick+0x58>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4619      	mov	r1, r3
 80015b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80015be:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 f967 	bl	8001896 <HAL_SYSTICK_Config>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e00e      	b.n	80015f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b0f      	cmp	r3, #15
 80015d6:	d80a      	bhi.n	80015ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d8:	2200      	movs	r2, #0
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295
 80015e0:	f000 f92f 	bl	8001842 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e4:	4a06      	ldr	r2, [pc, #24]	; (8001600 <HAL_InitTick+0x5c>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e000      	b.n	80015f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	200000ec 	.word	0x200000ec
 80015fc:	200000f4 	.word	0x200000f4
 8001600:	200000f0 	.word	0x200000f0

08001604 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_IncTick+0x20>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_IncTick+0x24>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4413      	add	r3, r2
 8001614:	4a04      	ldr	r2, [pc, #16]	; (8001628 <HAL_IncTick+0x24>)
 8001616:	6013      	str	r3, [r2, #0]
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	200000f4 	.word	0x200000f4
 8001628:	2000040c 	.word	0x2000040c

0800162c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return uwTick;
 8001630:	4b03      	ldr	r3, [pc, #12]	; (8001640 <HAL_GetTick+0x14>)
 8001632:	681b      	ldr	r3, [r3, #0]
}
 8001634:	4618      	mov	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	2000040c 	.word	0x2000040c

08001644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800164c:	f7ff ffee 	bl	800162c <HAL_GetTick>
 8001650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800165c:	d005      	beq.n	800166a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800165e:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <HAL_Delay+0x44>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800166a:	bf00      	nop
 800166c:	f7ff ffde 	bl	800162c <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	429a      	cmp	r2, r3
 800167a:	d8f7      	bhi.n	800166c <HAL_Delay+0x28>
  {
  }
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200000f4 	.word	0x200000f4

0800168c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a8:	4013      	ands	r3, r2
 80016aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016be:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	60d3      	str	r3, [r2, #12]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <__NVIC_GetPriorityGrouping+0x18>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	0a1b      	lsrs	r3, r3, #8
 80016de:	f003 0307 	and.w	r3, r3, #7
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	db0b      	blt.n	800171a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	f003 021f 	and.w	r2, r3, #31
 8001708:	4907      	ldr	r1, [pc, #28]	; (8001728 <__NVIC_EnableIRQ+0x38>)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	095b      	lsrs	r3, r3, #5
 8001710:	2001      	movs	r0, #1
 8001712:	fa00 f202 	lsl.w	r2, r0, r2
 8001716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000e100 	.word	0xe000e100

0800172c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	6039      	str	r1, [r7, #0]
 8001736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173c:	2b00      	cmp	r3, #0
 800173e:	db0a      	blt.n	8001756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	b2da      	uxtb	r2, r3
 8001744:	490c      	ldr	r1, [pc, #48]	; (8001778 <__NVIC_SetPriority+0x4c>)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	0112      	lsls	r2, r2, #4
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	440b      	add	r3, r1
 8001750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001754:	e00a      	b.n	800176c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4908      	ldr	r1, [pc, #32]	; (800177c <__NVIC_SetPriority+0x50>)
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	3b04      	subs	r3, #4
 8001764:	0112      	lsls	r2, r2, #4
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	440b      	add	r3, r1
 800176a:	761a      	strb	r2, [r3, #24]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000e100 	.word	0xe000e100
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001780:	b480      	push	{r7}
 8001782:	b089      	sub	sp, #36	; 0x24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f1c3 0307 	rsb	r3, r3, #7
 800179a:	2b04      	cmp	r3, #4
 800179c:	bf28      	it	cs
 800179e:	2304      	movcs	r3, #4
 80017a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3304      	adds	r3, #4
 80017a6:	2b06      	cmp	r3, #6
 80017a8:	d902      	bls.n	80017b0 <NVIC_EncodePriority+0x30>
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3b03      	subs	r3, #3
 80017ae:	e000      	b.n	80017b2 <NVIC_EncodePriority+0x32>
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	f04f 32ff 	mov.w	r2, #4294967295
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43da      	mvns	r2, r3
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	401a      	ands	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c8:	f04f 31ff 	mov.w	r1, #4294967295
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	fa01 f303 	lsl.w	r3, r1, r3
 80017d2:	43d9      	mvns	r1, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d8:	4313      	orrs	r3, r2
         );
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3724      	adds	r7, #36	; 0x24
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017f8:	d301      	bcc.n	80017fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017fa:	2301      	movs	r3, #1
 80017fc:	e00f      	b.n	800181e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017fe:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <SysTick_Config+0x40>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001806:	210f      	movs	r1, #15
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	f7ff ff8e 	bl	800172c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <SysTick_Config+0x40>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001816:	4b04      	ldr	r3, [pc, #16]	; (8001828 <SysTick_Config+0x40>)
 8001818:	2207      	movs	r2, #7
 800181a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	e000e010 	.word	0xe000e010

0800182c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ff29 	bl	800168c <__NVIC_SetPriorityGrouping>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	4603      	mov	r3, r0
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
 800184e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001854:	f7ff ff3e 	bl	80016d4 <__NVIC_GetPriorityGrouping>
 8001858:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	68b9      	ldr	r1, [r7, #8]
 800185e:	6978      	ldr	r0, [r7, #20]
 8001860:	f7ff ff8e 	bl	8001780 <NVIC_EncodePriority>
 8001864:	4602      	mov	r2, r0
 8001866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186a:	4611      	mov	r1, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff5d 	bl	800172c <__NVIC_SetPriority>
}
 8001872:	bf00      	nop
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff31 	bl	80016f0 <__NVIC_EnableIRQ>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ffa2 	bl	80017e8 <SysTick_Config>
 80018a4:	4603      	mov	r3, r0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d004      	beq.n	80018cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2280      	movs	r2, #128	; 0x80
 80018c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e00c      	b.n	80018e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2205      	movs	r2, #5
 80018d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 0201 	bic.w	r2, r2, #1
 80018e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b089      	sub	sp, #36	; 0x24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
 800190e:	e16b      	b.n	8001be8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001910:	2201      	movs	r2, #1
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	4013      	ands	r3, r2
 8001922:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	429a      	cmp	r2, r3
 800192a:	f040 815a 	bne.w	8001be2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	2b01      	cmp	r3, #1
 8001938:	d005      	beq.n	8001946 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001942:	2b02      	cmp	r3, #2
 8001944:	d130      	bne.n	80019a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	2203      	movs	r2, #3
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	68da      	ldr	r2, [r3, #12]
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4313      	orrs	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800197c:	2201      	movs	r2, #1
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	091b      	lsrs	r3, r3, #4
 8001992:	f003 0201 	and.w	r2, r3, #1
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	d017      	beq.n	80019e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	2203      	movs	r2, #3
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d123      	bne.n	8001a38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	08da      	lsrs	r2, r3, #3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3208      	adds	r2, #8
 80019f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	220f      	movs	r2, #15
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4013      	ands	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	691a      	ldr	r2, [r3, #16]
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	08da      	lsrs	r2, r3, #3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3208      	adds	r2, #8
 8001a32:	69b9      	ldr	r1, [r7, #24]
 8001a34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	2203      	movs	r2, #3
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0203 	and.w	r2, r3, #3
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 80b4 	beq.w	8001be2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	4b60      	ldr	r3, [pc, #384]	; (8001c00 <HAL_GPIO_Init+0x30c>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	4a5f      	ldr	r2, [pc, #380]	; (8001c00 <HAL_GPIO_Init+0x30c>)
 8001a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a88:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8a:	4b5d      	ldr	r3, [pc, #372]	; (8001c00 <HAL_GPIO_Init+0x30c>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a96:	4a5b      	ldr	r2, [pc, #364]	; (8001c04 <HAL_GPIO_Init+0x310>)
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	089b      	lsrs	r3, r3, #2
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	220f      	movs	r2, #15
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a52      	ldr	r2, [pc, #328]	; (8001c08 <HAL_GPIO_Init+0x314>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d02b      	beq.n	8001b1a <HAL_GPIO_Init+0x226>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a51      	ldr	r2, [pc, #324]	; (8001c0c <HAL_GPIO_Init+0x318>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d025      	beq.n	8001b16 <HAL_GPIO_Init+0x222>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a50      	ldr	r2, [pc, #320]	; (8001c10 <HAL_GPIO_Init+0x31c>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d01f      	beq.n	8001b12 <HAL_GPIO_Init+0x21e>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a4f      	ldr	r2, [pc, #316]	; (8001c14 <HAL_GPIO_Init+0x320>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d019      	beq.n	8001b0e <HAL_GPIO_Init+0x21a>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a4e      	ldr	r2, [pc, #312]	; (8001c18 <HAL_GPIO_Init+0x324>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d013      	beq.n	8001b0a <HAL_GPIO_Init+0x216>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a4d      	ldr	r2, [pc, #308]	; (8001c1c <HAL_GPIO_Init+0x328>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d00d      	beq.n	8001b06 <HAL_GPIO_Init+0x212>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a4c      	ldr	r2, [pc, #304]	; (8001c20 <HAL_GPIO_Init+0x32c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d007      	beq.n	8001b02 <HAL_GPIO_Init+0x20e>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a4b      	ldr	r2, [pc, #300]	; (8001c24 <HAL_GPIO_Init+0x330>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d101      	bne.n	8001afe <HAL_GPIO_Init+0x20a>
 8001afa:	2307      	movs	r3, #7
 8001afc:	e00e      	b.n	8001b1c <HAL_GPIO_Init+0x228>
 8001afe:	2308      	movs	r3, #8
 8001b00:	e00c      	b.n	8001b1c <HAL_GPIO_Init+0x228>
 8001b02:	2306      	movs	r3, #6
 8001b04:	e00a      	b.n	8001b1c <HAL_GPIO_Init+0x228>
 8001b06:	2305      	movs	r3, #5
 8001b08:	e008      	b.n	8001b1c <HAL_GPIO_Init+0x228>
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	e006      	b.n	8001b1c <HAL_GPIO_Init+0x228>
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e004      	b.n	8001b1c <HAL_GPIO_Init+0x228>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e002      	b.n	8001b1c <HAL_GPIO_Init+0x228>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <HAL_GPIO_Init+0x228>
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	69fa      	ldr	r2, [r7, #28]
 8001b1e:	f002 0203 	and.w	r2, r2, #3
 8001b22:	0092      	lsls	r2, r2, #2
 8001b24:	4093      	lsls	r3, r2
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b2c:	4935      	ldr	r1, [pc, #212]	; (8001c04 <HAL_GPIO_Init+0x310>)
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	089b      	lsrs	r3, r3, #2
 8001b32:	3302      	adds	r3, #2
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b3a:	4b3b      	ldr	r3, [pc, #236]	; (8001c28 <HAL_GPIO_Init+0x334>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4013      	ands	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b5e:	4a32      	ldr	r2, [pc, #200]	; (8001c28 <HAL_GPIO_Init+0x334>)
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b64:	4b30      	ldr	r3, [pc, #192]	; (8001c28 <HAL_GPIO_Init+0x334>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b88:	4a27      	ldr	r2, [pc, #156]	; (8001c28 <HAL_GPIO_Init+0x334>)
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b8e:	4b26      	ldr	r3, [pc, #152]	; (8001c28 <HAL_GPIO_Init+0x334>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bb2:	4a1d      	ldr	r2, [pc, #116]	; (8001c28 <HAL_GPIO_Init+0x334>)
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bb8:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <HAL_GPIO_Init+0x334>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bdc:	4a12      	ldr	r2, [pc, #72]	; (8001c28 <HAL_GPIO_Init+0x334>)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3301      	adds	r3, #1
 8001be6:	61fb      	str	r3, [r7, #28]
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	2b0f      	cmp	r3, #15
 8001bec:	f67f ae90 	bls.w	8001910 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bf0:	bf00      	nop
 8001bf2:	bf00      	nop
 8001bf4:	3724      	adds	r7, #36	; 0x24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40013800 	.word	0x40013800
 8001c08:	40020000 	.word	0x40020000
 8001c0c:	40020400 	.word	0x40020400
 8001c10:	40020800 	.word	0x40020800
 8001c14:	40020c00 	.word	0x40020c00
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40021400 	.word	0x40021400
 8001c20:	40021800 	.word	0x40021800
 8001c24:	40021c00 	.word	0x40021c00
 8001c28:	40013c00 	.word	0x40013c00

08001c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	807b      	strh	r3, [r7, #2]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c3c:	787b      	ldrb	r3, [r7, #1]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c42:	887a      	ldrh	r2, [r7, #2]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c48:	e003      	b.n	8001c52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c4a:	887b      	ldrh	r3, [r7, #2]
 8001c4c:	041a      	lsls	r2, r3, #16
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	619a      	str	r2, [r3, #24]
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c6c:	695a      	ldr	r2, [r3, #20]
 8001c6e:	88fb      	ldrh	r3, [r7, #6]
 8001c70:	4013      	ands	r3, r2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d006      	beq.n	8001c84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c76:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c78:	88fb      	ldrh	r3, [r7, #6]
 8001c7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c7c:	88fb      	ldrh	r3, [r7, #6]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fc56 	bl	8000530 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40013c00 	.word	0x40013c00

08001c90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e267      	b.n	8002172 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d075      	beq.n	8001d9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cae:	4b88      	ldr	r3, [pc, #544]	; (8001ed0 <HAL_RCC_OscConfig+0x240>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d00c      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cba:	4b85      	ldr	r3, [pc, #532]	; (8001ed0 <HAL_RCC_OscConfig+0x240>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d112      	bne.n	8001cec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cc6:	4b82      	ldr	r3, [pc, #520]	; (8001ed0 <HAL_RCC_OscConfig+0x240>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cd2:	d10b      	bne.n	8001cec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd4:	4b7e      	ldr	r3, [pc, #504]	; (8001ed0 <HAL_RCC_OscConfig+0x240>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d05b      	beq.n	8001d98 <HAL_RCC_OscConfig+0x108>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d157      	bne.n	8001d98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e242      	b.n	8002172 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf4:	d106      	bne.n	8001d04 <HAL_RCC_OscConfig+0x74>
 8001cf6:	4b76      	ldr	r3, [pc, #472]	; (8001ed0 <HAL_RCC_OscConfig+0x240>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a75      	ldr	r2, [pc, #468]	; (8001ed0 <HAL_RCC_OscConfig+0x240>)
 8001cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	e01d      	b.n	8001d40 <HAL_RCC_OscConfig+0xb0>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d0c:	d10c      	bne.n	8001d28 <HAL_RCC_OscConfig+0x98>
 8001d0e:	4b70      	ldr	r3, [pc, #448]	; (8001ed0 <HAL_RCC_OscConfig+0x240>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a6f      	ldr	r2, [pc, #444]	; (8001ed0 <HAL_RCC_OscConfig+0x240>)
 8001d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	4b6d      	ldr	r3, [pc, #436]	; (8001ed0 <HAL_RCC_OscConfig+0x240>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a6c      	ldr	r2, [pc, #432]	; (8001ed0 <HAL_RCC_OscConfig+0x240>)
 8001d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	e00b      	b.n	8001d40 <HAL_RCC_OscConfig+0xb0>
 8001d28:	4b69      	ldr	r3, [pc, #420]	; (8001ed0 <HAL_RCC_OscConfig+0x240>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a68      	ldr	r2, [pc, #416]	; (8001ed0 <HAL_RCC_OscConfig+0x240>)
 8001d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d32:	6013      	str	r3, [r2, #0]
 8001d34:	4b66      	ldr	r3, [pc, #408]	; (8001ed0 <HAL_RCC_OscConfig+0x240>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a65      	ldr	r2, [pc, #404]	; (8001ed0 <HAL_RCC_OscConfig+0x240>)
 8001d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d013      	beq.n	8001d70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7ff fc70 	bl	800162c <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d50:	f7ff fc6c 	bl	800162c <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b64      	cmp	r3, #100	; 0x64
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e207      	b.n	8002172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d62:	4b5b      	ldr	r3, [pc, #364]	; (8001ed0 <HAL_RCC_OscConfig+0x240>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0xc0>
 8001d6e:	e014      	b.n	8001d9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d70:	f7ff fc5c 	bl	800162c <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d78:	f7ff fc58 	bl	800162c <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	; 0x64
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e1f3      	b.n	8002172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d8a:	4b51      	ldr	r3, [pc, #324]	; (8001ed0 <HAL_RCC_OscConfig+0x240>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCC_OscConfig+0xe8>
 8001d96:	e000      	b.n	8001d9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d063      	beq.n	8001e6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001da6:	4b4a      	ldr	r3, [pc, #296]	; (8001ed0 <HAL_RCC_OscConfig+0x240>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00b      	beq.n	8001dca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001db2:	4b47      	ldr	r3, [pc, #284]	; (8001ed0 <HAL_RCC_OscConfig+0x240>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dba:	2b08      	cmp	r3, #8
 8001dbc:	d11c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dbe:	4b44      	ldr	r3, [pc, #272]	; (8001ed0 <HAL_RCC_OscConfig+0x240>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d116      	bne.n	8001df8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dca:	4b41      	ldr	r3, [pc, #260]	; (8001ed0 <HAL_RCC_OscConfig+0x240>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d005      	beq.n	8001de2 <HAL_RCC_OscConfig+0x152>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d001      	beq.n	8001de2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e1c7      	b.n	8002172 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de2:	4b3b      	ldr	r3, [pc, #236]	; (8001ed0 <HAL_RCC_OscConfig+0x240>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4937      	ldr	r1, [pc, #220]	; (8001ed0 <HAL_RCC_OscConfig+0x240>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001df6:	e03a      	b.n	8001e6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d020      	beq.n	8001e42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e00:	4b34      	ldr	r3, [pc, #208]	; (8001ed4 <HAL_RCC_OscConfig+0x244>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e06:	f7ff fc11 	bl	800162c <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e0e:	f7ff fc0d 	bl	800162c <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e1a8      	b.n	8002172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e20:	4b2b      	ldr	r3, [pc, #172]	; (8001ed0 <HAL_RCC_OscConfig+0x240>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2c:	4b28      	ldr	r3, [pc, #160]	; (8001ed0 <HAL_RCC_OscConfig+0x240>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	4925      	ldr	r1, [pc, #148]	; (8001ed0 <HAL_RCC_OscConfig+0x240>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	600b      	str	r3, [r1, #0]
 8001e40:	e015      	b.n	8001e6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e42:	4b24      	ldr	r3, [pc, #144]	; (8001ed4 <HAL_RCC_OscConfig+0x244>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e48:	f7ff fbf0 	bl	800162c <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e50:	f7ff fbec 	bl	800162c <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e187      	b.n	8002172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e62:	4b1b      	ldr	r3, [pc, #108]	; (8001ed0 <HAL_RCC_OscConfig+0x240>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d036      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d016      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e82:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <HAL_RCC_OscConfig+0x248>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e88:	f7ff fbd0 	bl	800162c <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e90:	f7ff fbcc 	bl	800162c <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e167      	b.n	8002172 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea2:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <HAL_RCC_OscConfig+0x240>)
 8001ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0x200>
 8001eae:	e01b      	b.n	8001ee8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb0:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <HAL_RCC_OscConfig+0x248>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb6:	f7ff fbb9 	bl	800162c <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ebc:	e00e      	b.n	8001edc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ebe:	f7ff fbb5 	bl	800162c <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d907      	bls.n	8001edc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e150      	b.n	8002172 <HAL_RCC_OscConfig+0x4e2>
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	42470000 	.word	0x42470000
 8001ed8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001edc:	4b88      	ldr	r3, [pc, #544]	; (8002100 <HAL_RCC_OscConfig+0x470>)
 8001ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1ea      	bne.n	8001ebe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 8097 	beq.w	8002024 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001efa:	4b81      	ldr	r3, [pc, #516]	; (8002100 <HAL_RCC_OscConfig+0x470>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10f      	bne.n	8001f26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	4b7d      	ldr	r3, [pc, #500]	; (8002100 <HAL_RCC_OscConfig+0x470>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	4a7c      	ldr	r2, [pc, #496]	; (8002100 <HAL_RCC_OscConfig+0x470>)
 8001f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f14:	6413      	str	r3, [r2, #64]	; 0x40
 8001f16:	4b7a      	ldr	r3, [pc, #488]	; (8002100 <HAL_RCC_OscConfig+0x470>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f22:	2301      	movs	r3, #1
 8001f24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f26:	4b77      	ldr	r3, [pc, #476]	; (8002104 <HAL_RCC_OscConfig+0x474>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d118      	bne.n	8001f64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f32:	4b74      	ldr	r3, [pc, #464]	; (8002104 <HAL_RCC_OscConfig+0x474>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a73      	ldr	r2, [pc, #460]	; (8002104 <HAL_RCC_OscConfig+0x474>)
 8001f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f3e:	f7ff fb75 	bl	800162c <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f46:	f7ff fb71 	bl	800162c <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e10c      	b.n	8002172 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f58:	4b6a      	ldr	r3, [pc, #424]	; (8002104 <HAL_RCC_OscConfig+0x474>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f0      	beq.n	8001f46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d106      	bne.n	8001f7a <HAL_RCC_OscConfig+0x2ea>
 8001f6c:	4b64      	ldr	r3, [pc, #400]	; (8002100 <HAL_RCC_OscConfig+0x470>)
 8001f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f70:	4a63      	ldr	r2, [pc, #396]	; (8002100 <HAL_RCC_OscConfig+0x470>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	6713      	str	r3, [r2, #112]	; 0x70
 8001f78:	e01c      	b.n	8001fb4 <HAL_RCC_OscConfig+0x324>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2b05      	cmp	r3, #5
 8001f80:	d10c      	bne.n	8001f9c <HAL_RCC_OscConfig+0x30c>
 8001f82:	4b5f      	ldr	r3, [pc, #380]	; (8002100 <HAL_RCC_OscConfig+0x470>)
 8001f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f86:	4a5e      	ldr	r2, [pc, #376]	; (8002100 <HAL_RCC_OscConfig+0x470>)
 8001f88:	f043 0304 	orr.w	r3, r3, #4
 8001f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f8e:	4b5c      	ldr	r3, [pc, #368]	; (8002100 <HAL_RCC_OscConfig+0x470>)
 8001f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f92:	4a5b      	ldr	r2, [pc, #364]	; (8002100 <HAL_RCC_OscConfig+0x470>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	6713      	str	r3, [r2, #112]	; 0x70
 8001f9a:	e00b      	b.n	8001fb4 <HAL_RCC_OscConfig+0x324>
 8001f9c:	4b58      	ldr	r3, [pc, #352]	; (8002100 <HAL_RCC_OscConfig+0x470>)
 8001f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa0:	4a57      	ldr	r2, [pc, #348]	; (8002100 <HAL_RCC_OscConfig+0x470>)
 8001fa2:	f023 0301 	bic.w	r3, r3, #1
 8001fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa8:	4b55      	ldr	r3, [pc, #340]	; (8002100 <HAL_RCC_OscConfig+0x470>)
 8001faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fac:	4a54      	ldr	r2, [pc, #336]	; (8002100 <HAL_RCC_OscConfig+0x470>)
 8001fae:	f023 0304 	bic.w	r3, r3, #4
 8001fb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d015      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fbc:	f7ff fb36 	bl	800162c <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc2:	e00a      	b.n	8001fda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fc4:	f7ff fb32 	bl	800162c <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e0cb      	b.n	8002172 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fda:	4b49      	ldr	r3, [pc, #292]	; (8002100 <HAL_RCC_OscConfig+0x470>)
 8001fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0ee      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x334>
 8001fe6:	e014      	b.n	8002012 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe8:	f7ff fb20 	bl	800162c <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fee:	e00a      	b.n	8002006 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ff0:	f7ff fb1c 	bl	800162c <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e0b5      	b.n	8002172 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002006:	4b3e      	ldr	r3, [pc, #248]	; (8002100 <HAL_RCC_OscConfig+0x470>)
 8002008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1ee      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002012:	7dfb      	ldrb	r3, [r7, #23]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d105      	bne.n	8002024 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002018:	4b39      	ldr	r3, [pc, #228]	; (8002100 <HAL_RCC_OscConfig+0x470>)
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	4a38      	ldr	r2, [pc, #224]	; (8002100 <HAL_RCC_OscConfig+0x470>)
 800201e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002022:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 80a1 	beq.w	8002170 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800202e:	4b34      	ldr	r3, [pc, #208]	; (8002100 <HAL_RCC_OscConfig+0x470>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 030c 	and.w	r3, r3, #12
 8002036:	2b08      	cmp	r3, #8
 8002038:	d05c      	beq.n	80020f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	2b02      	cmp	r3, #2
 8002040:	d141      	bne.n	80020c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002042:	4b31      	ldr	r3, [pc, #196]	; (8002108 <HAL_RCC_OscConfig+0x478>)
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002048:	f7ff faf0 	bl	800162c <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002050:	f7ff faec 	bl	800162c <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e087      	b.n	8002172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002062:	4b27      	ldr	r3, [pc, #156]	; (8002100 <HAL_RCC_OscConfig+0x470>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f0      	bne.n	8002050 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69da      	ldr	r2, [r3, #28]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	019b      	lsls	r3, r3, #6
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	085b      	lsrs	r3, r3, #1
 8002086:	3b01      	subs	r3, #1
 8002088:	041b      	lsls	r3, r3, #16
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	061b      	lsls	r3, r3, #24
 8002092:	491b      	ldr	r1, [pc, #108]	; (8002100 <HAL_RCC_OscConfig+0x470>)
 8002094:	4313      	orrs	r3, r2
 8002096:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <HAL_RCC_OscConfig+0x478>)
 800209a:	2201      	movs	r2, #1
 800209c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209e:	f7ff fac5 	bl	800162c <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a6:	f7ff fac1 	bl	800162c <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e05c      	b.n	8002172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b8:	4b11      	ldr	r3, [pc, #68]	; (8002100 <HAL_RCC_OscConfig+0x470>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0f0      	beq.n	80020a6 <HAL_RCC_OscConfig+0x416>
 80020c4:	e054      	b.n	8002170 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <HAL_RCC_OscConfig+0x478>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020cc:	f7ff faae 	bl	800162c <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d4:	f7ff faaa 	bl	800162c <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e045      	b.n	8002172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e6:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_RCC_OscConfig+0x470>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x444>
 80020f2:	e03d      	b.n	8002170 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d107      	bne.n	800210c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e038      	b.n	8002172 <HAL_RCC_OscConfig+0x4e2>
 8002100:	40023800 	.word	0x40023800
 8002104:	40007000 	.word	0x40007000
 8002108:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800210c:	4b1b      	ldr	r3, [pc, #108]	; (800217c <HAL_RCC_OscConfig+0x4ec>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d028      	beq.n	800216c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002124:	429a      	cmp	r2, r3
 8002126:	d121      	bne.n	800216c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002132:	429a      	cmp	r2, r3
 8002134:	d11a      	bne.n	800216c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800213c:	4013      	ands	r3, r2
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002142:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002144:	4293      	cmp	r3, r2
 8002146:	d111      	bne.n	800216c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002152:	085b      	lsrs	r3, r3, #1
 8002154:	3b01      	subs	r3, #1
 8002156:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002158:	429a      	cmp	r2, r3
 800215a:	d107      	bne.n	800216c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002166:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002168:	429a      	cmp	r2, r3
 800216a:	d001      	beq.n	8002170 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40023800 	.word	0x40023800

08002180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e0cc      	b.n	800232e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002194:	4b68      	ldr	r3, [pc, #416]	; (8002338 <HAL_RCC_ClockConfig+0x1b8>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d90c      	bls.n	80021bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a2:	4b65      	ldr	r3, [pc, #404]	; (8002338 <HAL_RCC_ClockConfig+0x1b8>)
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021aa:	4b63      	ldr	r3, [pc, #396]	; (8002338 <HAL_RCC_ClockConfig+0x1b8>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d001      	beq.n	80021bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e0b8      	b.n	800232e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d020      	beq.n	800220a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021d4:	4b59      	ldr	r3, [pc, #356]	; (800233c <HAL_RCC_ClockConfig+0x1bc>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	4a58      	ldr	r2, [pc, #352]	; (800233c <HAL_RCC_ClockConfig+0x1bc>)
 80021da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021ec:	4b53      	ldr	r3, [pc, #332]	; (800233c <HAL_RCC_ClockConfig+0x1bc>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	4a52      	ldr	r2, [pc, #328]	; (800233c <HAL_RCC_ClockConfig+0x1bc>)
 80021f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f8:	4b50      	ldr	r3, [pc, #320]	; (800233c <HAL_RCC_ClockConfig+0x1bc>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	494d      	ldr	r1, [pc, #308]	; (800233c <HAL_RCC_ClockConfig+0x1bc>)
 8002206:	4313      	orrs	r3, r2
 8002208:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d044      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d107      	bne.n	800222e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221e:	4b47      	ldr	r3, [pc, #284]	; (800233c <HAL_RCC_ClockConfig+0x1bc>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d119      	bne.n	800225e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e07f      	b.n	800232e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d003      	beq.n	800223e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800223a:	2b03      	cmp	r3, #3
 800223c:	d107      	bne.n	800224e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223e:	4b3f      	ldr	r3, [pc, #252]	; (800233c <HAL_RCC_ClockConfig+0x1bc>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d109      	bne.n	800225e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e06f      	b.n	800232e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224e:	4b3b      	ldr	r3, [pc, #236]	; (800233c <HAL_RCC_ClockConfig+0x1bc>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e067      	b.n	800232e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800225e:	4b37      	ldr	r3, [pc, #220]	; (800233c <HAL_RCC_ClockConfig+0x1bc>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f023 0203 	bic.w	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	4934      	ldr	r1, [pc, #208]	; (800233c <HAL_RCC_ClockConfig+0x1bc>)
 800226c:	4313      	orrs	r3, r2
 800226e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002270:	f7ff f9dc 	bl	800162c <HAL_GetTick>
 8002274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002276:	e00a      	b.n	800228e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002278:	f7ff f9d8 	bl	800162c <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	f241 3288 	movw	r2, #5000	; 0x1388
 8002286:	4293      	cmp	r3, r2
 8002288:	d901      	bls.n	800228e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e04f      	b.n	800232e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228e:	4b2b      	ldr	r3, [pc, #172]	; (800233c <HAL_RCC_ClockConfig+0x1bc>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 020c 	and.w	r2, r3, #12
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	429a      	cmp	r2, r3
 800229e:	d1eb      	bne.n	8002278 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022a0:	4b25      	ldr	r3, [pc, #148]	; (8002338 <HAL_RCC_ClockConfig+0x1b8>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d20c      	bcs.n	80022c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	4b22      	ldr	r3, [pc, #136]	; (8002338 <HAL_RCC_ClockConfig+0x1b8>)
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b6:	4b20      	ldr	r3, [pc, #128]	; (8002338 <HAL_RCC_ClockConfig+0x1b8>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d001      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e032      	b.n	800232e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d008      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022d4:	4b19      	ldr	r3, [pc, #100]	; (800233c <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	4916      	ldr	r1, [pc, #88]	; (800233c <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d009      	beq.n	8002306 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022f2:	4b12      	ldr	r3, [pc, #72]	; (800233c <HAL_RCC_ClockConfig+0x1bc>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	490e      	ldr	r1, [pc, #56]	; (800233c <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	4313      	orrs	r3, r2
 8002304:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002306:	f000 f821 	bl	800234c <HAL_RCC_GetSysClockFreq>
 800230a:	4602      	mov	r2, r0
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_RCC_ClockConfig+0x1bc>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	091b      	lsrs	r3, r3, #4
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	490a      	ldr	r1, [pc, #40]	; (8002340 <HAL_RCC_ClockConfig+0x1c0>)
 8002318:	5ccb      	ldrb	r3, [r1, r3]
 800231a:	fa22 f303 	lsr.w	r3, r2, r3
 800231e:	4a09      	ldr	r2, [pc, #36]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 8002320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002322:	4b09      	ldr	r3, [pc, #36]	; (8002348 <HAL_RCC_ClockConfig+0x1c8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff f93c 	bl	80015a4 <HAL_InitTick>

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40023c00 	.word	0x40023c00
 800233c:	40023800 	.word	0x40023800
 8002340:	080044b8 	.word	0x080044b8
 8002344:	200000ec 	.word	0x200000ec
 8002348:	200000f0 	.word	0x200000f0

0800234c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800234c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002350:	b090      	sub	sp, #64	; 0x40
 8002352:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	637b      	str	r3, [r7, #52]	; 0x34
 8002358:	2300      	movs	r3, #0
 800235a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800235c:	2300      	movs	r3, #0
 800235e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002360:	2300      	movs	r3, #0
 8002362:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002364:	4b59      	ldr	r3, [pc, #356]	; (80024cc <HAL_RCC_GetSysClockFreq+0x180>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 030c 	and.w	r3, r3, #12
 800236c:	2b08      	cmp	r3, #8
 800236e:	d00d      	beq.n	800238c <HAL_RCC_GetSysClockFreq+0x40>
 8002370:	2b08      	cmp	r3, #8
 8002372:	f200 80a1 	bhi.w	80024b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <HAL_RCC_GetSysClockFreq+0x34>
 800237a:	2b04      	cmp	r3, #4
 800237c:	d003      	beq.n	8002386 <HAL_RCC_GetSysClockFreq+0x3a>
 800237e:	e09b      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002380:	4b53      	ldr	r3, [pc, #332]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002382:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002384:	e09b      	b.n	80024be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002386:	4b53      	ldr	r3, [pc, #332]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002388:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800238a:	e098      	b.n	80024be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800238c:	4b4f      	ldr	r3, [pc, #316]	; (80024cc <HAL_RCC_GetSysClockFreq+0x180>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002394:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002396:	4b4d      	ldr	r3, [pc, #308]	; (80024cc <HAL_RCC_GetSysClockFreq+0x180>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d028      	beq.n	80023f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023a2:	4b4a      	ldr	r3, [pc, #296]	; (80024cc <HAL_RCC_GetSysClockFreq+0x180>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	099b      	lsrs	r3, r3, #6
 80023a8:	2200      	movs	r2, #0
 80023aa:	623b      	str	r3, [r7, #32]
 80023ac:	627a      	str	r2, [r7, #36]	; 0x24
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80023b4:	2100      	movs	r1, #0
 80023b6:	4b47      	ldr	r3, [pc, #284]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80023b8:	fb03 f201 	mul.w	r2, r3, r1
 80023bc:	2300      	movs	r3, #0
 80023be:	fb00 f303 	mul.w	r3, r0, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	4a43      	ldr	r2, [pc, #268]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80023c6:	fba0 1202 	umull	r1, r2, r0, r2
 80023ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023cc:	460a      	mov	r2, r1
 80023ce:	62ba      	str	r2, [r7, #40]	; 0x28
 80023d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023d2:	4413      	add	r3, r2
 80023d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d8:	2200      	movs	r2, #0
 80023da:	61bb      	str	r3, [r7, #24]
 80023dc:	61fa      	str	r2, [r7, #28]
 80023de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80023e6:	f7fd feef 	bl	80001c8 <__aeabi_uldivmod>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4613      	mov	r3, r2
 80023f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023f2:	e053      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023f4:	4b35      	ldr	r3, [pc, #212]	; (80024cc <HAL_RCC_GetSysClockFreq+0x180>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	099b      	lsrs	r3, r3, #6
 80023fa:	2200      	movs	r2, #0
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	617a      	str	r2, [r7, #20]
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002406:	f04f 0b00 	mov.w	fp, #0
 800240a:	4652      	mov	r2, sl
 800240c:	465b      	mov	r3, fp
 800240e:	f04f 0000 	mov.w	r0, #0
 8002412:	f04f 0100 	mov.w	r1, #0
 8002416:	0159      	lsls	r1, r3, #5
 8002418:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800241c:	0150      	lsls	r0, r2, #5
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	ebb2 080a 	subs.w	r8, r2, sl
 8002426:	eb63 090b 	sbc.w	r9, r3, fp
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	f04f 0300 	mov.w	r3, #0
 8002432:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002436:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800243a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800243e:	ebb2 0408 	subs.w	r4, r2, r8
 8002442:	eb63 0509 	sbc.w	r5, r3, r9
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	00eb      	lsls	r3, r5, #3
 8002450:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002454:	00e2      	lsls	r2, r4, #3
 8002456:	4614      	mov	r4, r2
 8002458:	461d      	mov	r5, r3
 800245a:	eb14 030a 	adds.w	r3, r4, sl
 800245e:	603b      	str	r3, [r7, #0]
 8002460:	eb45 030b 	adc.w	r3, r5, fp
 8002464:	607b      	str	r3, [r7, #4]
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	f04f 0300 	mov.w	r3, #0
 800246e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002472:	4629      	mov	r1, r5
 8002474:	028b      	lsls	r3, r1, #10
 8002476:	4621      	mov	r1, r4
 8002478:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800247c:	4621      	mov	r1, r4
 800247e:	028a      	lsls	r2, r1, #10
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002486:	2200      	movs	r2, #0
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	60fa      	str	r2, [r7, #12]
 800248c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002490:	f7fd fe9a 	bl	80001c8 <__aeabi_uldivmod>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4613      	mov	r3, r2
 800249a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800249c:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <HAL_RCC_GetSysClockFreq+0x180>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	0c1b      	lsrs	r3, r3, #16
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	3301      	adds	r3, #1
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80024ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024b6:	e002      	b.n	80024be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024b8:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80024ba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3740      	adds	r7, #64	; 0x40
 80024c4:	46bd      	mov	sp, r7
 80024c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024ca:	bf00      	nop
 80024cc:	40023800 	.word	0x40023800
 80024d0:	00f42400 	.word	0x00f42400
 80024d4:	017d7840 	.word	0x017d7840

080024d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024dc:	4b03      	ldr	r3, [pc, #12]	; (80024ec <HAL_RCC_GetHCLKFreq+0x14>)
 80024de:	681b      	ldr	r3, [r3, #0]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	200000ec 	.word	0x200000ec

080024f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024f4:	f7ff fff0 	bl	80024d8 <HAL_RCC_GetHCLKFreq>
 80024f8:	4602      	mov	r2, r0
 80024fa:	4b05      	ldr	r3, [pc, #20]	; (8002510 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	0a9b      	lsrs	r3, r3, #10
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	4903      	ldr	r1, [pc, #12]	; (8002514 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002506:	5ccb      	ldrb	r3, [r1, r3]
 8002508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800250c:	4618      	mov	r0, r3
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40023800 	.word	0x40023800
 8002514:	080044c8 	.word	0x080044c8

08002518 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800251c:	f7ff ffdc 	bl	80024d8 <HAL_RCC_GetHCLKFreq>
 8002520:	4602      	mov	r2, r0
 8002522:	4b05      	ldr	r3, [pc, #20]	; (8002538 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	0b5b      	lsrs	r3, r3, #13
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	4903      	ldr	r1, [pc, #12]	; (800253c <HAL_RCC_GetPCLK2Freq+0x24>)
 800252e:	5ccb      	ldrb	r3, [r1, r3]
 8002530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002534:	4618      	mov	r0, r3
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40023800 	.word	0x40023800
 800253c:	080044c8 	.word	0x080044c8

08002540 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e07b      	b.n	800264a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	2b00      	cmp	r3, #0
 8002558:	d108      	bne.n	800256c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002562:	d009      	beq.n	8002578 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	61da      	str	r2, [r3, #28]
 800256a:	e005      	b.n	8002578 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d106      	bne.n	8002598 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7fe fe2e 	bl	80011f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2202      	movs	r2, #2
 800259c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80025c0:	431a      	orrs	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	431a      	orrs	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025e8:	431a      	orrs	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025fc:	ea42 0103 	orr.w	r1, r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002604:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	0c1b      	lsrs	r3, r3, #16
 8002616:	f003 0104 	and.w	r1, r3, #4
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	f003 0210 	and.w	r2, r3, #16
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	69da      	ldr	r2, [r3, #28]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002638:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b088      	sub	sp, #32
 8002656:	af00      	add	r7, sp, #0
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	603b      	str	r3, [r7, #0]
 800265e:	4613      	mov	r3, r2
 8002660:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800266c:	2b01      	cmp	r3, #1
 800266e:	d101      	bne.n	8002674 <HAL_SPI_Transmit+0x22>
 8002670:	2302      	movs	r3, #2
 8002672:	e126      	b.n	80028c2 <HAL_SPI_Transmit+0x270>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800267c:	f7fe ffd6 	bl	800162c <HAL_GetTick>
 8002680:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002682:	88fb      	ldrh	r3, [r7, #6]
 8002684:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b01      	cmp	r3, #1
 8002690:	d002      	beq.n	8002698 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002692:	2302      	movs	r3, #2
 8002694:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002696:	e10b      	b.n	80028b0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <HAL_SPI_Transmit+0x52>
 800269e:	88fb      	ldrh	r3, [r7, #6]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d102      	bne.n	80026aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80026a8:	e102      	b.n	80028b0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2203      	movs	r2, #3
 80026ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	88fa      	ldrh	r2, [r7, #6]
 80026c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	88fa      	ldrh	r2, [r7, #6]
 80026c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026f0:	d10f      	bne.n	8002712 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002700:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002710:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271c:	2b40      	cmp	r3, #64	; 0x40
 800271e:	d007      	beq.n	8002730 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800272e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002738:	d14b      	bne.n	80027d2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d002      	beq.n	8002748 <HAL_SPI_Transmit+0xf6>
 8002742:	8afb      	ldrh	r3, [r7, #22]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d13e      	bne.n	80027c6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	881a      	ldrh	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002758:	1c9a      	adds	r2, r3, #2
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002762:	b29b      	uxth	r3, r3
 8002764:	3b01      	subs	r3, #1
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800276c:	e02b      	b.n	80027c6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b02      	cmp	r3, #2
 800277a:	d112      	bne.n	80027a2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002780:	881a      	ldrh	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	1c9a      	adds	r2, r3, #2
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002796:	b29b      	uxth	r3, r3
 8002798:	3b01      	subs	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	86da      	strh	r2, [r3, #54]	; 0x36
 80027a0:	e011      	b.n	80027c6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027a2:	f7fe ff43 	bl	800162c <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d803      	bhi.n	80027ba <HAL_SPI_Transmit+0x168>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b8:	d102      	bne.n	80027c0 <HAL_SPI_Transmit+0x16e>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d102      	bne.n	80027c6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80027c4:	e074      	b.n	80028b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1ce      	bne.n	800276e <HAL_SPI_Transmit+0x11c>
 80027d0:	e04c      	b.n	800286c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d002      	beq.n	80027e0 <HAL_SPI_Transmit+0x18e>
 80027da:	8afb      	ldrh	r3, [r7, #22]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d140      	bne.n	8002862 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	330c      	adds	r3, #12
 80027ea:	7812      	ldrb	r2, [r2, #0]
 80027ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	1c5a      	adds	r2, r3, #1
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	3b01      	subs	r3, #1
 8002800:	b29a      	uxth	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002806:	e02c      	b.n	8002862 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b02      	cmp	r3, #2
 8002814:	d113      	bne.n	800283e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	330c      	adds	r3, #12
 8002820:	7812      	ldrb	r2, [r2, #0]
 8002822:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002832:	b29b      	uxth	r3, r3
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	86da      	strh	r2, [r3, #54]	; 0x36
 800283c:	e011      	b.n	8002862 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800283e:	f7fe fef5 	bl	800162c <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d803      	bhi.n	8002856 <HAL_SPI_Transmit+0x204>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002854:	d102      	bne.n	800285c <HAL_SPI_Transmit+0x20a>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d102      	bne.n	8002862 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002860:	e026      	b.n	80028b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002866:	b29b      	uxth	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1cd      	bne.n	8002808 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	6839      	ldr	r1, [r7, #0]
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 fce9 	bl	8003248 <SPI_EndRxTxTransaction>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d002      	beq.n	8002882 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2220      	movs	r2, #32
 8002880:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10a      	bne.n	80028a0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800288a:	2300      	movs	r3, #0
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d002      	beq.n	80028ae <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	77fb      	strb	r3, [r7, #31]
 80028ac:	e000      	b.n	80028b0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80028ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3720      	adds	r7, #32
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b088      	sub	sp, #32
 80028ce:	af02      	add	r7, sp, #8
 80028d0:	60f8      	str	r0, [r7, #12]
 80028d2:	60b9      	str	r1, [r7, #8]
 80028d4:	603b      	str	r3, [r7, #0]
 80028d6:	4613      	mov	r3, r2
 80028d8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028e6:	d112      	bne.n	800290e <HAL_SPI_Receive+0x44>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10e      	bne.n	800290e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2204      	movs	r2, #4
 80028f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80028f8:	88fa      	ldrh	r2, [r7, #6]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	4613      	mov	r3, r2
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	68b9      	ldr	r1, [r7, #8]
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 f8f1 	bl	8002aec <HAL_SPI_TransmitReceive>
 800290a:	4603      	mov	r3, r0
 800290c:	e0ea      	b.n	8002ae4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <HAL_SPI_Receive+0x52>
 8002918:	2302      	movs	r3, #2
 800291a:	e0e3      	b.n	8002ae4 <HAL_SPI_Receive+0x21a>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002924:	f7fe fe82 	bl	800162c <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b01      	cmp	r3, #1
 8002934:	d002      	beq.n	800293c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002936:	2302      	movs	r3, #2
 8002938:	75fb      	strb	r3, [r7, #23]
    goto error;
 800293a:	e0ca      	b.n	8002ad2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <HAL_SPI_Receive+0x7e>
 8002942:	88fb      	ldrh	r3, [r7, #6]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d102      	bne.n	800294e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800294c:	e0c1      	b.n	8002ad2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2204      	movs	r2, #4
 8002952:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	88fa      	ldrh	r2, [r7, #6]
 8002966:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	88fa      	ldrh	r2, [r7, #6]
 800296c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002994:	d10f      	bne.n	80029b6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80029b4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c0:	2b40      	cmp	r3, #64	; 0x40
 80029c2:	d007      	beq.n	80029d4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d162      	bne.n	8002aa2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80029dc:	e02e      	b.n	8002a3c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d115      	bne.n	8002a18 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f103 020c 	add.w	r2, r3, #12
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f8:	7812      	ldrb	r2, [r2, #0]
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a02:	1c5a      	adds	r2, r3, #1
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a16:	e011      	b.n	8002a3c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a18:	f7fe fe08 	bl	800162c <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d803      	bhi.n	8002a30 <HAL_SPI_Receive+0x166>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2e:	d102      	bne.n	8002a36 <HAL_SPI_Receive+0x16c>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d102      	bne.n	8002a3c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002a3a:	e04a      	b.n	8002ad2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1cb      	bne.n	80029de <HAL_SPI_Receive+0x114>
 8002a46:	e031      	b.n	8002aac <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d113      	bne.n	8002a7e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a60:	b292      	uxth	r2, r2
 8002a62:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a68:	1c9a      	adds	r2, r3, #2
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a7c:	e011      	b.n	8002aa2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a7e:	f7fe fdd5 	bl	800162c <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d803      	bhi.n	8002a96 <HAL_SPI_Receive+0x1cc>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a94:	d102      	bne.n	8002a9c <HAL_SPI_Receive+0x1d2>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d102      	bne.n	8002aa2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002aa0:	e017      	b.n	8002ad2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1cd      	bne.n	8002a48 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	6839      	ldr	r1, [r7, #0]
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 fb63 	bl	800317c <SPI_EndRxTransaction>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	75fb      	strb	r3, [r7, #23]
 8002ace:	e000      	b.n	8002ad2 <HAL_SPI_Receive+0x208>
  }

error :
 8002ad0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08c      	sub	sp, #48	; 0x30
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002afa:	2301      	movs	r3, #1
 8002afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d101      	bne.n	8002b12 <HAL_SPI_TransmitReceive+0x26>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	e18a      	b.n	8002e28 <HAL_SPI_TransmitReceive+0x33c>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b1a:	f7fe fd87 	bl	800162c <HAL_GetTick>
 8002b1e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002b30:	887b      	ldrh	r3, [r7, #2]
 8002b32:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d00f      	beq.n	8002b5c <HAL_SPI_TransmitReceive+0x70>
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b42:	d107      	bne.n	8002b54 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d103      	bne.n	8002b54 <HAL_SPI_TransmitReceive+0x68>
 8002b4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d003      	beq.n	8002b5c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002b54:	2302      	movs	r3, #2
 8002b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002b5a:	e15b      	b.n	8002e14 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d005      	beq.n	8002b6e <HAL_SPI_TransmitReceive+0x82>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d002      	beq.n	8002b6e <HAL_SPI_TransmitReceive+0x82>
 8002b68:	887b      	ldrh	r3, [r7, #2]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d103      	bne.n	8002b76 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002b74:	e14e      	b.n	8002e14 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d003      	beq.n	8002b8a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2205      	movs	r2, #5
 8002b86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	887a      	ldrh	r2, [r7, #2]
 8002b9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	887a      	ldrh	r2, [r7, #2]
 8002ba0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	887a      	ldrh	r2, [r7, #2]
 8002bac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	887a      	ldrh	r2, [r7, #2]
 8002bb2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bca:	2b40      	cmp	r3, #64	; 0x40
 8002bcc:	d007      	beq.n	8002bde <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bdc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002be6:	d178      	bne.n	8002cda <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d002      	beq.n	8002bf6 <HAL_SPI_TransmitReceive+0x10a>
 8002bf0:	8b7b      	ldrh	r3, [r7, #26]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d166      	bne.n	8002cc4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	881a      	ldrh	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	1c9a      	adds	r2, r3, #2
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c1a:	e053      	b.n	8002cc4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d11b      	bne.n	8002c62 <HAL_SPI_TransmitReceive+0x176>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d016      	beq.n	8002c62 <HAL_SPI_TransmitReceive+0x176>
 8002c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d113      	bne.n	8002c62 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	881a      	ldrh	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	1c9a      	adds	r2, r3, #2
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d119      	bne.n	8002ca4 <HAL_SPI_TransmitReceive+0x1b8>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d014      	beq.n	8002ca4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c84:	b292      	uxth	r2, r2
 8002c86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8c:	1c9a      	adds	r2, r3, #2
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002ca4:	f7fe fcc2 	bl	800162c <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d807      	bhi.n	8002cc4 <HAL_SPI_TransmitReceive+0x1d8>
 8002cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cba:	d003      	beq.n	8002cc4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002cc2:	e0a7      	b.n	8002e14 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1a6      	bne.n	8002c1c <HAL_SPI_TransmitReceive+0x130>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1a1      	bne.n	8002c1c <HAL_SPI_TransmitReceive+0x130>
 8002cd8:	e07c      	b.n	8002dd4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <HAL_SPI_TransmitReceive+0x1fc>
 8002ce2:	8b7b      	ldrh	r3, [r7, #26]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d16b      	bne.n	8002dc0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	330c      	adds	r3, #12
 8002cf2:	7812      	ldrb	r2, [r2, #0]
 8002cf4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	3b01      	subs	r3, #1
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d0e:	e057      	b.n	8002dc0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d11c      	bne.n	8002d58 <HAL_SPI_TransmitReceive+0x26c>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d017      	beq.n	8002d58 <HAL_SPI_TransmitReceive+0x26c>
 8002d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d114      	bne.n	8002d58 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	330c      	adds	r3, #12
 8002d38:	7812      	ldrb	r2, [r2, #0]
 8002d3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d119      	bne.n	8002d9a <HAL_SPI_TransmitReceive+0x2ae>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d014      	beq.n	8002d9a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d96:	2301      	movs	r3, #1
 8002d98:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d9a:	f7fe fc47 	bl	800162c <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d803      	bhi.n	8002db2 <HAL_SPI_TransmitReceive+0x2c6>
 8002daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db0:	d102      	bne.n	8002db8 <HAL_SPI_TransmitReceive+0x2cc>
 8002db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d103      	bne.n	8002dc0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002dbe:	e029      	b.n	8002e14 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1a2      	bne.n	8002d10 <HAL_SPI_TransmitReceive+0x224>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d19d      	bne.n	8002d10 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 fa35 	bl	8003248 <SPI_EndRxTxTransaction>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d006      	beq.n	8002df2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2220      	movs	r2, #32
 8002dee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002df0:	e010      	b.n	8002e14 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10b      	bne.n	8002e12 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	617b      	str	r3, [r7, #20]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	e000      	b.n	8002e14 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002e12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3730      	adds	r7, #48	; 0x30
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b088      	sub	sp, #32
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	099b      	lsrs	r3, r3, #6
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10f      	bne.n	8002e74 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00a      	beq.n	8002e74 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	099b      	lsrs	r3, r3, #6
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d004      	beq.n	8002e74 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	4798      	blx	r3
    return;
 8002e72:	e0d7      	b.n	8003024 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	085b      	lsrs	r3, r3, #1
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00a      	beq.n	8002e96 <HAL_SPI_IRQHandler+0x66>
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	09db      	lsrs	r3, r3, #7
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d004      	beq.n	8002e96 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	4798      	blx	r3
    return;
 8002e94:	e0c6      	b.n	8003024 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	095b      	lsrs	r3, r3, #5
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10c      	bne.n	8002ebc <HAL_SPI_IRQHandler+0x8c>
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	099b      	lsrs	r3, r3, #6
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	0a1b      	lsrs	r3, r3, #8
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 80b4 	beq.w	8003024 <HAL_SPI_IRQHandler+0x1f4>
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	095b      	lsrs	r3, r3, #5
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 80ad 	beq.w	8003024 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	099b      	lsrs	r3, r3, #6
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d023      	beq.n	8002f1e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d011      	beq.n	8002f06 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee6:	f043 0204 	orr.w	r2, r3, #4
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	617b      	str	r3, [r7, #20]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	e00b      	b.n	8002f1e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f06:	2300      	movs	r3, #0
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	613b      	str	r3, [r7, #16]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	613b      	str	r3, [r7, #16]
 8002f1a:	693b      	ldr	r3, [r7, #16]
        return;
 8002f1c:	e082      	b.n	8003024 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	095b      	lsrs	r3, r3, #5
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d014      	beq.n	8002f54 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2e:	f043 0201 	orr.w	r2, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	0a1b      	lsrs	r3, r3, #8
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00c      	beq.n	8002f7a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f64:	f043 0208 	orr.w	r2, r3, #8
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60bb      	str	r3, [r7, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	60bb      	str	r3, [r7, #8]
 8002f78:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d04f      	beq.n	8003022 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f90:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d104      	bne.n	8002fae <HAL_SPI_IRQHandler+0x17e>
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d034      	beq.n	8003018 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0203 	bic.w	r2, r2, #3
 8002fbc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d011      	beq.n	8002fea <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fca:	4a18      	ldr	r2, [pc, #96]	; (800302c <HAL_SPI_IRQHandler+0x1fc>)
 8002fcc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fe fc6b 	bl	80018ae <HAL_DMA_Abort_IT>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d005      	beq.n	8002fea <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d016      	beq.n	8003020 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff6:	4a0d      	ldr	r2, [pc, #52]	; (800302c <HAL_SPI_IRQHandler+0x1fc>)
 8002ff8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fe fc55 	bl	80018ae <HAL_DMA_Abort_IT>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00a      	beq.n	8003020 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003016:	e003      	b.n	8003020 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f809 	bl	8003030 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800301e:	e000      	b.n	8003022 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003020:	bf00      	nop
    return;
 8003022:	bf00      	nop
  }
}
 8003024:	3720      	adds	r7, #32
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	08003045 	.word	0x08003045

08003030 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003050:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f7ff ffe6 	bl	8003030 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003064:	bf00      	nop
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	603b      	str	r3, [r7, #0]
 8003078:	4613      	mov	r3, r2
 800307a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800307c:	f7fe fad6 	bl	800162c <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003084:	1a9b      	subs	r3, r3, r2
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	4413      	add	r3, r2
 800308a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800308c:	f7fe face 	bl	800162c <HAL_GetTick>
 8003090:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003092:	4b39      	ldr	r3, [pc, #228]	; (8003178 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	015b      	lsls	r3, r3, #5
 8003098:	0d1b      	lsrs	r3, r3, #20
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	fb02 f303 	mul.w	r3, r2, r3
 80030a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030a2:	e054      	b.n	800314e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030aa:	d050      	beq.n	800314e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030ac:	f7fe fabe 	bl	800162c <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	69fa      	ldr	r2, [r7, #28]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d902      	bls.n	80030c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d13d      	bne.n	800313e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80030d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030da:	d111      	bne.n	8003100 <SPI_WaitFlagStateUntilTimeout+0x94>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030e4:	d004      	beq.n	80030f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ee:	d107      	bne.n	8003100 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003108:	d10f      	bne.n	800312a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003128:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e017      	b.n	800316e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	3b01      	subs	r3, #1
 800314c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	4013      	ands	r3, r2
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	429a      	cmp	r2, r3
 800315c:	bf0c      	ite	eq
 800315e:	2301      	moveq	r3, #1
 8003160:	2300      	movne	r3, #0
 8003162:	b2db      	uxtb	r3, r3
 8003164:	461a      	mov	r2, r3
 8003166:	79fb      	ldrb	r3, [r7, #7]
 8003168:	429a      	cmp	r2, r3
 800316a:	d19b      	bne.n	80030a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3720      	adds	r7, #32
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	200000ec 	.word	0x200000ec

0800317c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af02      	add	r7, sp, #8
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003190:	d111      	bne.n	80031b6 <SPI_EndRxTransaction+0x3a>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800319a:	d004      	beq.n	80031a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a4:	d107      	bne.n	80031b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031b4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031be:	d12a      	bne.n	8003216 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c8:	d012      	beq.n	80031f0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2200      	movs	r2, #0
 80031d2:	2180      	movs	r1, #128	; 0x80
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f7ff ff49 	bl	800306c <SPI_WaitFlagStateUntilTimeout>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d02d      	beq.n	800323c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e4:	f043 0220 	orr.w	r2, r3, #32
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e026      	b.n	800323e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2200      	movs	r2, #0
 80031f8:	2101      	movs	r1, #1
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f7ff ff36 	bl	800306c <SPI_WaitFlagStateUntilTimeout>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d01a      	beq.n	800323c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320a:	f043 0220 	orr.w	r2, r3, #32
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e013      	b.n	800323e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2200      	movs	r2, #0
 800321e:	2101      	movs	r1, #1
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f7ff ff23 	bl	800306c <SPI_WaitFlagStateUntilTimeout>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d007      	beq.n	800323c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003230:	f043 0220 	orr.w	r2, r3, #32
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e000      	b.n	800323e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af02      	add	r7, sp, #8
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003254:	4b1b      	ldr	r3, [pc, #108]	; (80032c4 <SPI_EndRxTxTransaction+0x7c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a1b      	ldr	r2, [pc, #108]	; (80032c8 <SPI_EndRxTxTransaction+0x80>)
 800325a:	fba2 2303 	umull	r2, r3, r2, r3
 800325e:	0d5b      	lsrs	r3, r3, #21
 8003260:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003264:	fb02 f303 	mul.w	r3, r2, r3
 8003268:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003272:	d112      	bne.n	800329a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2200      	movs	r2, #0
 800327c:	2180      	movs	r1, #128	; 0x80
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f7ff fef4 	bl	800306c <SPI_WaitFlagStateUntilTimeout>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d016      	beq.n	80032b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328e:	f043 0220 	orr.w	r2, r3, #32
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e00f      	b.n	80032ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00a      	beq.n	80032b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	3b01      	subs	r3, #1
 80032a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b0:	2b80      	cmp	r3, #128	; 0x80
 80032b2:	d0f2      	beq.n	800329a <SPI_EndRxTxTransaction+0x52>
 80032b4:	e000      	b.n	80032b8 <SPI_EndRxTxTransaction+0x70>
        break;
 80032b6:	bf00      	nop
  }

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	200000ec 	.word	0x200000ec
 80032c8:	165e9f81 	.word	0x165e9f81

080032cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e03f      	b.n	800335e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d106      	bne.n	80032f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7fe f85a 	bl	80013ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2224      	movs	r2, #36	; 0x24
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68da      	ldr	r2, [r3, #12]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800330e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f9cb 	bl	80036ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003324:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	695a      	ldr	r2, [r3, #20]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003334:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003344:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b08a      	sub	sp, #40	; 0x28
 800336a:	af02      	add	r7, sp, #8
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	603b      	str	r3, [r7, #0]
 8003372:	4613      	mov	r3, r2
 8003374:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b20      	cmp	r3, #32
 8003384:	d17c      	bne.n	8003480 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <HAL_UART_Transmit+0x2c>
 800338c:	88fb      	ldrh	r3, [r7, #6]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e075      	b.n	8003482 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800339c:	2b01      	cmp	r3, #1
 800339e:	d101      	bne.n	80033a4 <HAL_UART_Transmit+0x3e>
 80033a0:	2302      	movs	r3, #2
 80033a2:	e06e      	b.n	8003482 <HAL_UART_Transmit+0x11c>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2221      	movs	r2, #33	; 0x21
 80033b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033ba:	f7fe f937 	bl	800162c <HAL_GetTick>
 80033be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	88fa      	ldrh	r2, [r7, #6]
 80033c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	88fa      	ldrh	r2, [r7, #6]
 80033ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d4:	d108      	bne.n	80033e8 <HAL_UART_Transmit+0x82>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d104      	bne.n	80033e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80033de:	2300      	movs	r3, #0
 80033e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	61bb      	str	r3, [r7, #24]
 80033e6:	e003      	b.n	80033f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033ec:	2300      	movs	r3, #0
 80033ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80033f8:	e02a      	b.n	8003450 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	2200      	movs	r2, #0
 8003402:	2180      	movs	r1, #128	; 0x80
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 f8e2 	bl	80035ce <UART_WaitOnFlagUntilTimeout>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e036      	b.n	8003482 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10b      	bne.n	8003432 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	881b      	ldrh	r3, [r3, #0]
 800341e:	461a      	mov	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003428:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	3302      	adds	r3, #2
 800342e:	61bb      	str	r3, [r7, #24]
 8003430:	e007      	b.n	8003442 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	781a      	ldrb	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	3301      	adds	r3, #1
 8003440:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003446:	b29b      	uxth	r3, r3
 8003448:	3b01      	subs	r3, #1
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1cf      	bne.n	80033fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	2200      	movs	r2, #0
 8003462:	2140      	movs	r1, #64	; 0x40
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 f8b2 	bl	80035ce <UART_WaitOnFlagUntilTimeout>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e006      	b.n	8003482 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800347c:	2300      	movs	r3, #0
 800347e:	e000      	b.n	8003482 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003480:	2302      	movs	r3, #2
  }
}
 8003482:	4618      	mov	r0, r3
 8003484:	3720      	adds	r7, #32
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b08a      	sub	sp, #40	; 0x28
 800348e:	af02      	add	r7, sp, #8
 8003490:	60f8      	str	r0, [r7, #12]
 8003492:	60b9      	str	r1, [r7, #8]
 8003494:	603b      	str	r3, [r7, #0]
 8003496:	4613      	mov	r3, r2
 8003498:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b20      	cmp	r3, #32
 80034a8:	f040 808c 	bne.w	80035c4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <HAL_UART_Receive+0x2e>
 80034b2:	88fb      	ldrh	r3, [r7, #6]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e084      	b.n	80035c6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_UART_Receive+0x40>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e07d      	b.n	80035c6 <HAL_UART_Receive+0x13c>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2222      	movs	r2, #34	; 0x22
 80034dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034e6:	f7fe f8a1 	bl	800162c <HAL_GetTick>
 80034ea:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	88fa      	ldrh	r2, [r7, #6]
 80034f0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	88fa      	ldrh	r2, [r7, #6]
 80034f6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003500:	d108      	bne.n	8003514 <HAL_UART_Receive+0x8a>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d104      	bne.n	8003514 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800350a:	2300      	movs	r3, #0
 800350c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	61bb      	str	r3, [r7, #24]
 8003512:	e003      	b.n	800351c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003518:	2300      	movs	r3, #0
 800351a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003524:	e043      	b.n	80035ae <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2200      	movs	r2, #0
 800352e:	2120      	movs	r1, #32
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 f84c 	bl	80035ce <UART_WaitOnFlagUntilTimeout>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e042      	b.n	80035c6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10c      	bne.n	8003560 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	b29b      	uxth	r3, r3
 800354e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003552:	b29a      	uxth	r2, r3
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	3302      	adds	r3, #2
 800355c:	61bb      	str	r3, [r7, #24]
 800355e:	e01f      	b.n	80035a0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003568:	d007      	beq.n	800357a <HAL_UART_Receive+0xf0>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10a      	bne.n	8003588 <HAL_UART_Receive+0xfe>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d106      	bne.n	8003588 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	b2da      	uxtb	r2, r3
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	701a      	strb	r2, [r3, #0]
 8003586:	e008      	b.n	800359a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	b2db      	uxtb	r3, r3
 8003590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003594:	b2da      	uxtb	r2, r3
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	3301      	adds	r3, #1
 800359e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	3b01      	subs	r3, #1
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1b6      	bne.n	8003526 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	e000      	b.n	80035c6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80035c4:	2302      	movs	r3, #2
  }
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3720      	adds	r7, #32
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b090      	sub	sp, #64	; 0x40
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	60f8      	str	r0, [r7, #12]
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	603b      	str	r3, [r7, #0]
 80035da:	4613      	mov	r3, r2
 80035dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035de:	e050      	b.n	8003682 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e6:	d04c      	beq.n	8003682 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d007      	beq.n	80035fe <UART_WaitOnFlagUntilTimeout+0x30>
 80035ee:	f7fe f81d 	bl	800162c <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d241      	bcs.n	8003682 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	330c      	adds	r3, #12
 8003604:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003608:	e853 3f00 	ldrex	r3, [r3]
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003614:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	330c      	adds	r3, #12
 800361c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800361e:	637a      	str	r2, [r7, #52]	; 0x34
 8003620:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003622:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003624:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003626:	e841 2300 	strex	r3, r2, [r1]
 800362a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800362c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1e5      	bne.n	80035fe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	3314      	adds	r3, #20
 8003638:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	e853 3f00 	ldrex	r3, [r3]
 8003640:	613b      	str	r3, [r7, #16]
   return(result);
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	f023 0301 	bic.w	r3, r3, #1
 8003648:	63bb      	str	r3, [r7, #56]	; 0x38
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3314      	adds	r3, #20
 8003650:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003652:	623a      	str	r2, [r7, #32]
 8003654:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003656:	69f9      	ldr	r1, [r7, #28]
 8003658:	6a3a      	ldr	r2, [r7, #32]
 800365a:	e841 2300 	strex	r3, r2, [r1]
 800365e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1e5      	bne.n	8003632 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2220      	movs	r2, #32
 8003672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e00f      	b.n	80036a2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	4013      	ands	r3, r2
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	429a      	cmp	r2, r3
 8003690:	bf0c      	ite	eq
 8003692:	2301      	moveq	r3, #1
 8003694:	2300      	movne	r3, #0
 8003696:	b2db      	uxtb	r3, r3
 8003698:	461a      	mov	r2, r3
 800369a:	79fb      	ldrb	r3, [r7, #7]
 800369c:	429a      	cmp	r2, r3
 800369e:	d09f      	beq.n	80035e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3740      	adds	r7, #64	; 0x40
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036b0:	b0c0      	sub	sp, #256	; 0x100
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c8:	68d9      	ldr	r1, [r3, #12]
 80036ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	ea40 0301 	orr.w	r3, r0, r1
 80036d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003704:	f021 010c 	bic.w	r1, r1, #12
 8003708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003712:	430b      	orrs	r3, r1
 8003714:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003726:	6999      	ldr	r1, [r3, #24]
 8003728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	ea40 0301 	orr.w	r3, r0, r1
 8003732:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	4b8f      	ldr	r3, [pc, #572]	; (8003978 <UART_SetConfig+0x2cc>)
 800373c:	429a      	cmp	r2, r3
 800373e:	d005      	beq.n	800374c <UART_SetConfig+0xa0>
 8003740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	4b8d      	ldr	r3, [pc, #564]	; (800397c <UART_SetConfig+0x2d0>)
 8003748:	429a      	cmp	r2, r3
 800374a:	d104      	bne.n	8003756 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800374c:	f7fe fee4 	bl	8002518 <HAL_RCC_GetPCLK2Freq>
 8003750:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003754:	e003      	b.n	800375e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003756:	f7fe fecb 	bl	80024f0 <HAL_RCC_GetPCLK1Freq>
 800375a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800375e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003768:	f040 810c 	bne.w	8003984 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800376c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003770:	2200      	movs	r2, #0
 8003772:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003776:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800377a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800377e:	4622      	mov	r2, r4
 8003780:	462b      	mov	r3, r5
 8003782:	1891      	adds	r1, r2, r2
 8003784:	65b9      	str	r1, [r7, #88]	; 0x58
 8003786:	415b      	adcs	r3, r3
 8003788:	65fb      	str	r3, [r7, #92]	; 0x5c
 800378a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800378e:	4621      	mov	r1, r4
 8003790:	eb12 0801 	adds.w	r8, r2, r1
 8003794:	4629      	mov	r1, r5
 8003796:	eb43 0901 	adc.w	r9, r3, r1
 800379a:	f04f 0200 	mov.w	r2, #0
 800379e:	f04f 0300 	mov.w	r3, #0
 80037a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037ae:	4690      	mov	r8, r2
 80037b0:	4699      	mov	r9, r3
 80037b2:	4623      	mov	r3, r4
 80037b4:	eb18 0303 	adds.w	r3, r8, r3
 80037b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80037bc:	462b      	mov	r3, r5
 80037be:	eb49 0303 	adc.w	r3, r9, r3
 80037c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80037c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80037d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80037d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80037da:	460b      	mov	r3, r1
 80037dc:	18db      	adds	r3, r3, r3
 80037de:	653b      	str	r3, [r7, #80]	; 0x50
 80037e0:	4613      	mov	r3, r2
 80037e2:	eb42 0303 	adc.w	r3, r2, r3
 80037e6:	657b      	str	r3, [r7, #84]	; 0x54
 80037e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80037f0:	f7fc fcea 	bl	80001c8 <__aeabi_uldivmod>
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	4b61      	ldr	r3, [pc, #388]	; (8003980 <UART_SetConfig+0x2d4>)
 80037fa:	fba3 2302 	umull	r2, r3, r3, r2
 80037fe:	095b      	lsrs	r3, r3, #5
 8003800:	011c      	lsls	r4, r3, #4
 8003802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003806:	2200      	movs	r2, #0
 8003808:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800380c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003810:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003814:	4642      	mov	r2, r8
 8003816:	464b      	mov	r3, r9
 8003818:	1891      	adds	r1, r2, r2
 800381a:	64b9      	str	r1, [r7, #72]	; 0x48
 800381c:	415b      	adcs	r3, r3
 800381e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003820:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003824:	4641      	mov	r1, r8
 8003826:	eb12 0a01 	adds.w	sl, r2, r1
 800382a:	4649      	mov	r1, r9
 800382c:	eb43 0b01 	adc.w	fp, r3, r1
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800383c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003840:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003844:	4692      	mov	sl, r2
 8003846:	469b      	mov	fp, r3
 8003848:	4643      	mov	r3, r8
 800384a:	eb1a 0303 	adds.w	r3, sl, r3
 800384e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003852:	464b      	mov	r3, r9
 8003854:	eb4b 0303 	adc.w	r3, fp, r3
 8003858:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800385c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003868:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800386c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003870:	460b      	mov	r3, r1
 8003872:	18db      	adds	r3, r3, r3
 8003874:	643b      	str	r3, [r7, #64]	; 0x40
 8003876:	4613      	mov	r3, r2
 8003878:	eb42 0303 	adc.w	r3, r2, r3
 800387c:	647b      	str	r3, [r7, #68]	; 0x44
 800387e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003882:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003886:	f7fc fc9f 	bl	80001c8 <__aeabi_uldivmod>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	4611      	mov	r1, r2
 8003890:	4b3b      	ldr	r3, [pc, #236]	; (8003980 <UART_SetConfig+0x2d4>)
 8003892:	fba3 2301 	umull	r2, r3, r3, r1
 8003896:	095b      	lsrs	r3, r3, #5
 8003898:	2264      	movs	r2, #100	; 0x64
 800389a:	fb02 f303 	mul.w	r3, r2, r3
 800389e:	1acb      	subs	r3, r1, r3
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80038a6:	4b36      	ldr	r3, [pc, #216]	; (8003980 <UART_SetConfig+0x2d4>)
 80038a8:	fba3 2302 	umull	r2, r3, r3, r2
 80038ac:	095b      	lsrs	r3, r3, #5
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038b4:	441c      	add	r4, r3
 80038b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038ba:	2200      	movs	r2, #0
 80038bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80038c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80038c8:	4642      	mov	r2, r8
 80038ca:	464b      	mov	r3, r9
 80038cc:	1891      	adds	r1, r2, r2
 80038ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80038d0:	415b      	adcs	r3, r3
 80038d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038d8:	4641      	mov	r1, r8
 80038da:	1851      	adds	r1, r2, r1
 80038dc:	6339      	str	r1, [r7, #48]	; 0x30
 80038de:	4649      	mov	r1, r9
 80038e0:	414b      	adcs	r3, r1
 80038e2:	637b      	str	r3, [r7, #52]	; 0x34
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80038f0:	4659      	mov	r1, fp
 80038f2:	00cb      	lsls	r3, r1, #3
 80038f4:	4651      	mov	r1, sl
 80038f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038fa:	4651      	mov	r1, sl
 80038fc:	00ca      	lsls	r2, r1, #3
 80038fe:	4610      	mov	r0, r2
 8003900:	4619      	mov	r1, r3
 8003902:	4603      	mov	r3, r0
 8003904:	4642      	mov	r2, r8
 8003906:	189b      	adds	r3, r3, r2
 8003908:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800390c:	464b      	mov	r3, r9
 800390e:	460a      	mov	r2, r1
 8003910:	eb42 0303 	adc.w	r3, r2, r3
 8003914:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003924:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003928:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800392c:	460b      	mov	r3, r1
 800392e:	18db      	adds	r3, r3, r3
 8003930:	62bb      	str	r3, [r7, #40]	; 0x28
 8003932:	4613      	mov	r3, r2
 8003934:	eb42 0303 	adc.w	r3, r2, r3
 8003938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800393a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800393e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003942:	f7fc fc41 	bl	80001c8 <__aeabi_uldivmod>
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	4b0d      	ldr	r3, [pc, #52]	; (8003980 <UART_SetConfig+0x2d4>)
 800394c:	fba3 1302 	umull	r1, r3, r3, r2
 8003950:	095b      	lsrs	r3, r3, #5
 8003952:	2164      	movs	r1, #100	; 0x64
 8003954:	fb01 f303 	mul.w	r3, r1, r3
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	3332      	adds	r3, #50	; 0x32
 800395e:	4a08      	ldr	r2, [pc, #32]	; (8003980 <UART_SetConfig+0x2d4>)
 8003960:	fba2 2303 	umull	r2, r3, r2, r3
 8003964:	095b      	lsrs	r3, r3, #5
 8003966:	f003 0207 	and.w	r2, r3, #7
 800396a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4422      	add	r2, r4
 8003972:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003974:	e105      	b.n	8003b82 <UART_SetConfig+0x4d6>
 8003976:	bf00      	nop
 8003978:	40011000 	.word	0x40011000
 800397c:	40011400 	.word	0x40011400
 8003980:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003984:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003988:	2200      	movs	r2, #0
 800398a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800398e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003992:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003996:	4642      	mov	r2, r8
 8003998:	464b      	mov	r3, r9
 800399a:	1891      	adds	r1, r2, r2
 800399c:	6239      	str	r1, [r7, #32]
 800399e:	415b      	adcs	r3, r3
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
 80039a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039a6:	4641      	mov	r1, r8
 80039a8:	1854      	adds	r4, r2, r1
 80039aa:	4649      	mov	r1, r9
 80039ac:	eb43 0501 	adc.w	r5, r3, r1
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	00eb      	lsls	r3, r5, #3
 80039ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039be:	00e2      	lsls	r2, r4, #3
 80039c0:	4614      	mov	r4, r2
 80039c2:	461d      	mov	r5, r3
 80039c4:	4643      	mov	r3, r8
 80039c6:	18e3      	adds	r3, r4, r3
 80039c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039cc:	464b      	mov	r3, r9
 80039ce:	eb45 0303 	adc.w	r3, r5, r3
 80039d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039e6:	f04f 0200 	mov.w	r2, #0
 80039ea:	f04f 0300 	mov.w	r3, #0
 80039ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039f2:	4629      	mov	r1, r5
 80039f4:	008b      	lsls	r3, r1, #2
 80039f6:	4621      	mov	r1, r4
 80039f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039fc:	4621      	mov	r1, r4
 80039fe:	008a      	lsls	r2, r1, #2
 8003a00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a04:	f7fc fbe0 	bl	80001c8 <__aeabi_uldivmod>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4b60      	ldr	r3, [pc, #384]	; (8003b90 <UART_SetConfig+0x4e4>)
 8003a0e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	011c      	lsls	r4, r3, #4
 8003a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a28:	4642      	mov	r2, r8
 8003a2a:	464b      	mov	r3, r9
 8003a2c:	1891      	adds	r1, r2, r2
 8003a2e:	61b9      	str	r1, [r7, #24]
 8003a30:	415b      	adcs	r3, r3
 8003a32:	61fb      	str	r3, [r7, #28]
 8003a34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a38:	4641      	mov	r1, r8
 8003a3a:	1851      	adds	r1, r2, r1
 8003a3c:	6139      	str	r1, [r7, #16]
 8003a3e:	4649      	mov	r1, r9
 8003a40:	414b      	adcs	r3, r1
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	f04f 0200 	mov.w	r2, #0
 8003a48:	f04f 0300 	mov.w	r3, #0
 8003a4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a50:	4659      	mov	r1, fp
 8003a52:	00cb      	lsls	r3, r1, #3
 8003a54:	4651      	mov	r1, sl
 8003a56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a5a:	4651      	mov	r1, sl
 8003a5c:	00ca      	lsls	r2, r1, #3
 8003a5e:	4610      	mov	r0, r2
 8003a60:	4619      	mov	r1, r3
 8003a62:	4603      	mov	r3, r0
 8003a64:	4642      	mov	r2, r8
 8003a66:	189b      	adds	r3, r3, r2
 8003a68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a6c:	464b      	mov	r3, r9
 8003a6e:	460a      	mov	r2, r1
 8003a70:	eb42 0303 	adc.w	r3, r2, r3
 8003a74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a90:	4649      	mov	r1, r9
 8003a92:	008b      	lsls	r3, r1, #2
 8003a94:	4641      	mov	r1, r8
 8003a96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a9a:	4641      	mov	r1, r8
 8003a9c:	008a      	lsls	r2, r1, #2
 8003a9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003aa2:	f7fc fb91 	bl	80001c8 <__aeabi_uldivmod>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	4b39      	ldr	r3, [pc, #228]	; (8003b90 <UART_SetConfig+0x4e4>)
 8003aac:	fba3 1302 	umull	r1, r3, r3, r2
 8003ab0:	095b      	lsrs	r3, r3, #5
 8003ab2:	2164      	movs	r1, #100	; 0x64
 8003ab4:	fb01 f303 	mul.w	r3, r1, r3
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	3332      	adds	r3, #50	; 0x32
 8003abe:	4a34      	ldr	r2, [pc, #208]	; (8003b90 <UART_SetConfig+0x4e4>)
 8003ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac4:	095b      	lsrs	r3, r3, #5
 8003ac6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aca:	441c      	add	r4, r3
 8003acc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	673b      	str	r3, [r7, #112]	; 0x70
 8003ad4:	677a      	str	r2, [r7, #116]	; 0x74
 8003ad6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ada:	4642      	mov	r2, r8
 8003adc:	464b      	mov	r3, r9
 8003ade:	1891      	adds	r1, r2, r2
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	415b      	adcs	r3, r3
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003aea:	4641      	mov	r1, r8
 8003aec:	1851      	adds	r1, r2, r1
 8003aee:	6039      	str	r1, [r7, #0]
 8003af0:	4649      	mov	r1, r9
 8003af2:	414b      	adcs	r3, r1
 8003af4:	607b      	str	r3, [r7, #4]
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	f04f 0300 	mov.w	r3, #0
 8003afe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b02:	4659      	mov	r1, fp
 8003b04:	00cb      	lsls	r3, r1, #3
 8003b06:	4651      	mov	r1, sl
 8003b08:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b0c:	4651      	mov	r1, sl
 8003b0e:	00ca      	lsls	r2, r1, #3
 8003b10:	4610      	mov	r0, r2
 8003b12:	4619      	mov	r1, r3
 8003b14:	4603      	mov	r3, r0
 8003b16:	4642      	mov	r2, r8
 8003b18:	189b      	adds	r3, r3, r2
 8003b1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b1c:	464b      	mov	r3, r9
 8003b1e:	460a      	mov	r2, r1
 8003b20:	eb42 0303 	adc.w	r3, r2, r3
 8003b24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	663b      	str	r3, [r7, #96]	; 0x60
 8003b30:	667a      	str	r2, [r7, #100]	; 0x64
 8003b32:	f04f 0200 	mov.w	r2, #0
 8003b36:	f04f 0300 	mov.w	r3, #0
 8003b3a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b3e:	4649      	mov	r1, r9
 8003b40:	008b      	lsls	r3, r1, #2
 8003b42:	4641      	mov	r1, r8
 8003b44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b48:	4641      	mov	r1, r8
 8003b4a:	008a      	lsls	r2, r1, #2
 8003b4c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b50:	f7fc fb3a 	bl	80001c8 <__aeabi_uldivmod>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4b0d      	ldr	r3, [pc, #52]	; (8003b90 <UART_SetConfig+0x4e4>)
 8003b5a:	fba3 1302 	umull	r1, r3, r3, r2
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	2164      	movs	r1, #100	; 0x64
 8003b62:	fb01 f303 	mul.w	r3, r1, r3
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	3332      	adds	r3, #50	; 0x32
 8003b6c:	4a08      	ldr	r2, [pc, #32]	; (8003b90 <UART_SetConfig+0x4e4>)
 8003b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b72:	095b      	lsrs	r3, r3, #5
 8003b74:	f003 020f 	and.w	r2, r3, #15
 8003b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4422      	add	r2, r4
 8003b80:	609a      	str	r2, [r3, #8]
}
 8003b82:	bf00      	nop
 8003b84:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b8e:	bf00      	nop
 8003b90:	51eb851f 	.word	0x51eb851f

08003b94 <nRF24_CSN_Select>:
#include "main.h"

#define ELBC

void nRF24_CSN_Select(uint16_t Sel_CSN_Pin)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	80fb      	strh	r3, [r7, #6]
	switch (Sel_CSN_Pin)
 8003b9e:	88fb      	ldrh	r3, [r7, #6]
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d82c      	bhi.n	8003c00 <nRF24_CSN_Select+0x6c>
 8003ba6:	a201      	add	r2, pc, #4	; (adr r2, 8003bac <nRF24_CSN_Select+0x18>)
 8003ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bac:	08003bcd 	.word	0x08003bcd
 8003bb0:	08003bd9 	.word	0x08003bd9
 8003bb4:	08003be5 	.word	0x08003be5
 8003bb8:	08003bf3 	.word	0x08003bf3
 8003bbc:	08003bc1 	.word	0x08003bc1
	{
		case Sel_EL_Module:
			HAL_GPIO_WritePin(GPIOC, nRF_EL_CSN_Pin, GPIO_PIN_RESET);
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	4810      	ldr	r0, [pc, #64]	; (8003c08 <nRF24_CSN_Select+0x74>)
 8003bc6:	f7fe f831 	bl	8001c2c <HAL_GPIO_WritePin>
			break;
 8003bca:	e019      	b.n	8003c00 <nRF24_CSN_Select+0x6c>
		case Sel_B_Module1:
			HAL_GPIO_WritePin(GPIOC, nRF_B_CSN1_Pin, GPIO_PIN_RESET);
 8003bcc:	2200      	movs	r2, #0
 8003bce:	2120      	movs	r1, #32
 8003bd0:	480d      	ldr	r0, [pc, #52]	; (8003c08 <nRF24_CSN_Select+0x74>)
 8003bd2:	f7fe f82b 	bl	8001c2c <HAL_GPIO_WritePin>
			break;
 8003bd6:	e013      	b.n	8003c00 <nRF24_CSN_Select+0x6c>
		case Sel_B_Module2:
			HAL_GPIO_WritePin(GPIOB, nRF_B_CSN2_Pin, GPIO_PIN_RESET);
 8003bd8:	2200      	movs	r2, #0
 8003bda:	2102      	movs	r1, #2
 8003bdc:	480b      	ldr	r0, [pc, #44]	; (8003c0c <nRF24_CSN_Select+0x78>)
 8003bde:	f7fe f825 	bl	8001c2c <HAL_GPIO_WritePin>
			break;
 8003be2:	e00d      	b.n	8003c00 <nRF24_CSN_Select+0x6c>
		case Sel_B_Module3:
			HAL_GPIO_WritePin(GPIOB, nRF_B_CSN3_Pin, GPIO_PIN_RESET);
 8003be4:	2200      	movs	r2, #0
 8003be6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003bea:	4808      	ldr	r0, [pc, #32]	; (8003c0c <nRF24_CSN_Select+0x78>)
 8003bec:	f7fe f81e 	bl	8001c2c <HAL_GPIO_WritePin>
			break;
 8003bf0:	e006      	b.n	8003c00 <nRF24_CSN_Select+0x6c>
		case Sel_B_Module4:
			HAL_GPIO_WritePin(GPIOC, nRF_B_CSN4_Pin, GPIO_PIN_RESET);
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bf8:	4803      	ldr	r0, [pc, #12]	; (8003c08 <nRF24_CSN_Select+0x74>)
 8003bfa:	f7fe f817 	bl	8001c2c <HAL_GPIO_WritePin>
			break;
 8003bfe:	bf00      	nop
	}
}
 8003c00:	bf00      	nop
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40020800 	.word	0x40020800
 8003c0c:	40020400 	.word	0x40020400

08003c10 <nRF24_CSN_UnSelect>:

void nRF24_CSN_UnSelect(uint16_t Sel_CSN_Pin)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	80fb      	strh	r3, [r7, #6]
	switch (Sel_CSN_Pin)
 8003c1a:	88fb      	ldrh	r3, [r7, #6]
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d82c      	bhi.n	8003c7c <nRF24_CSN_UnSelect+0x6c>
 8003c22:	a201      	add	r2, pc, #4	; (adr r2, 8003c28 <nRF24_CSN_UnSelect+0x18>)
 8003c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c28:	08003c49 	.word	0x08003c49
 8003c2c:	08003c55 	.word	0x08003c55
 8003c30:	08003c61 	.word	0x08003c61
 8003c34:	08003c6f 	.word	0x08003c6f
 8003c38:	08003c3d 	.word	0x08003c3d
	{
		case Sel_EL_Module:
			HAL_GPIO_WritePin(GPIOC, nRF_EL_CSN_Pin, GPIO_PIN_SET);
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	2101      	movs	r1, #1
 8003c40:	4810      	ldr	r0, [pc, #64]	; (8003c84 <nRF24_CSN_UnSelect+0x74>)
 8003c42:	f7fd fff3 	bl	8001c2c <HAL_GPIO_WritePin>
			break;
 8003c46:	e019      	b.n	8003c7c <nRF24_CSN_UnSelect+0x6c>
		case Sel_B_Module1:
			HAL_GPIO_WritePin(GPIOC, nRF_B_CSN1_Pin, GPIO_PIN_SET);
 8003c48:	2201      	movs	r2, #1
 8003c4a:	2120      	movs	r1, #32
 8003c4c:	480d      	ldr	r0, [pc, #52]	; (8003c84 <nRF24_CSN_UnSelect+0x74>)
 8003c4e:	f7fd ffed 	bl	8001c2c <HAL_GPIO_WritePin>
			break;
 8003c52:	e013      	b.n	8003c7c <nRF24_CSN_UnSelect+0x6c>
		case Sel_B_Module2:
			HAL_GPIO_WritePin(GPIOB, nRF_B_CSN2_Pin, GPIO_PIN_SET);
 8003c54:	2201      	movs	r2, #1
 8003c56:	2102      	movs	r1, #2
 8003c58:	480b      	ldr	r0, [pc, #44]	; (8003c88 <nRF24_CSN_UnSelect+0x78>)
 8003c5a:	f7fd ffe7 	bl	8001c2c <HAL_GPIO_WritePin>
			break;
 8003c5e:	e00d      	b.n	8003c7c <nRF24_CSN_UnSelect+0x6c>
		case Sel_B_Module3:
			HAL_GPIO_WritePin(GPIOB, nRF_B_CSN3_Pin, GPIO_PIN_SET);
 8003c60:	2201      	movs	r2, #1
 8003c62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c66:	4808      	ldr	r0, [pc, #32]	; (8003c88 <nRF24_CSN_UnSelect+0x78>)
 8003c68:	f7fd ffe0 	bl	8001c2c <HAL_GPIO_WritePin>
			break;
 8003c6c:	e006      	b.n	8003c7c <nRF24_CSN_UnSelect+0x6c>
		case Sel_B_Module4:
			HAL_GPIO_WritePin(GPIOC, nRF_B_CSN4_Pin, GPIO_PIN_SET);
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c74:	4803      	ldr	r0, [pc, #12]	; (8003c84 <nRF24_CSN_UnSelect+0x74>)
 8003c76:	f7fd ffd9 	bl	8001c2c <HAL_GPIO_WritePin>
			break;
 8003c7a:	bf00      	nop
	}
}
 8003c7c:	bf00      	nop
 8003c7e:	3708      	adds	r7, #8
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40020800 	.word	0x40020800
 8003c88:	40020400 	.word	0x40020400

08003c8c <nRF24_CE_Enable>:

void nRF24_CE_Enable(uint16_t Sel_CE_Pin)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	80fb      	strh	r3, [r7, #6]
	switch (Sel_CE_Pin)
 8003c96:	88fb      	ldrh	r3, [r7, #6]
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d82b      	bhi.n	8003cf6 <nRF24_CE_Enable+0x6a>
 8003c9e:	a201      	add	r2, pc, #4	; (adr r2, 8003ca4 <nRF24_CE_Enable+0x18>)
 8003ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca4:	08003cc5 	.word	0x08003cc5
 8003ca8:	08003cd1 	.word	0x08003cd1
 8003cac:	08003cdd 	.word	0x08003cdd
 8003cb0:	08003ceb 	.word	0x08003ceb
 8003cb4:	08003cb9 	.word	0x08003cb9
	{
		case Sel_EL_Module:
			HAL_GPIO_WritePin(GPIOA, nRF_EL_CE_Pin, GPIO_PIN_SET);
 8003cb8:	2201      	movs	r2, #1
 8003cba:	2101      	movs	r1, #1
 8003cbc:	4810      	ldr	r0, [pc, #64]	; (8003d00 <nRF24_CE_Enable+0x74>)
 8003cbe:	f7fd ffb5 	bl	8001c2c <HAL_GPIO_WritePin>
			break;
 8003cc2:	e018      	b.n	8003cf6 <nRF24_CE_Enable+0x6a>
		case Sel_B_Module1:
			HAL_GPIO_WritePin(GPIOB, nRF_B_CE1_Pin, GPIO_PIN_SET);
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	480e      	ldr	r0, [pc, #56]	; (8003d04 <nRF24_CE_Enable+0x78>)
 8003cca:	f7fd ffaf 	bl	8001c2c <HAL_GPIO_WritePin>
			break;
 8003cce:	e012      	b.n	8003cf6 <nRF24_CE_Enable+0x6a>
		case Sel_B_Module2:
			HAL_GPIO_WritePin(GPIOB, nRF_B_CE2_Pin, GPIO_PIN_SET);
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	2104      	movs	r1, #4
 8003cd4:	480b      	ldr	r0, [pc, #44]	; (8003d04 <nRF24_CE_Enable+0x78>)
 8003cd6:	f7fd ffa9 	bl	8001c2c <HAL_GPIO_WritePin>
			break;
 8003cda:	e00c      	b.n	8003cf6 <nRF24_CE_Enable+0x6a>
		case Sel_B_Module3:
			HAL_GPIO_WritePin(GPIOB, nRF_B_CE3_Pin, GPIO_PIN_SET);
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ce2:	4808      	ldr	r0, [pc, #32]	; (8003d04 <nRF24_CE_Enable+0x78>)
 8003ce4:	f7fd ffa2 	bl	8001c2c <HAL_GPIO_WritePin>
			break;
 8003ce8:	e005      	b.n	8003cf6 <nRF24_CE_Enable+0x6a>
		case Sel_B_Module4:
			HAL_GPIO_WritePin(GPIOC, nRF_B_CE4_Pin, GPIO_PIN_SET);
 8003cea:	2201      	movs	r2, #1
 8003cec:	2180      	movs	r1, #128	; 0x80
 8003cee:	4806      	ldr	r0, [pc, #24]	; (8003d08 <nRF24_CE_Enable+0x7c>)
 8003cf0:	f7fd ff9c 	bl	8001c2c <HAL_GPIO_WritePin>
			break;
 8003cf4:	bf00      	nop
	}
}
 8003cf6:	bf00      	nop
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	40020000 	.word	0x40020000
 8003d04:	40020400 	.word	0x40020400
 8003d08:	40020800 	.word	0x40020800

08003d0c <nRF24_CE_Disable>:

void nRF24_CE_Disable(uint16_t Sel_CE_Pin)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	4603      	mov	r3, r0
 8003d14:	80fb      	strh	r3, [r7, #6]
	switch (Sel_CE_Pin)
 8003d16:	88fb      	ldrh	r3, [r7, #6]
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d82b      	bhi.n	8003d76 <nRF24_CE_Disable+0x6a>
 8003d1e:	a201      	add	r2, pc, #4	; (adr r2, 8003d24 <nRF24_CE_Disable+0x18>)
 8003d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d24:	08003d45 	.word	0x08003d45
 8003d28:	08003d51 	.word	0x08003d51
 8003d2c:	08003d5d 	.word	0x08003d5d
 8003d30:	08003d6b 	.word	0x08003d6b
 8003d34:	08003d39 	.word	0x08003d39
	{
	case Sel_EL_Module:
		HAL_GPIO_WritePin(GPIOA, nRF_EL_CE_Pin, GPIO_PIN_RESET);
 8003d38:	2200      	movs	r2, #0
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	4810      	ldr	r0, [pc, #64]	; (8003d80 <nRF24_CE_Disable+0x74>)
 8003d3e:	f7fd ff75 	bl	8001c2c <HAL_GPIO_WritePin>
		break;
 8003d42:	e018      	b.n	8003d76 <nRF24_CE_Disable+0x6a>
	case Sel_B_Module1:
		HAL_GPIO_WritePin(GPIOB, nRF_B_CE1_Pin, GPIO_PIN_RESET);
 8003d44:	2200      	movs	r2, #0
 8003d46:	2101      	movs	r1, #1
 8003d48:	480e      	ldr	r0, [pc, #56]	; (8003d84 <nRF24_CE_Disable+0x78>)
 8003d4a:	f7fd ff6f 	bl	8001c2c <HAL_GPIO_WritePin>
		break;
 8003d4e:	e012      	b.n	8003d76 <nRF24_CE_Disable+0x6a>
	case Sel_B_Module2:
		HAL_GPIO_WritePin(GPIOB, nRF_B_CE2_Pin, GPIO_PIN_RESET);
 8003d50:	2200      	movs	r2, #0
 8003d52:	2104      	movs	r1, #4
 8003d54:	480b      	ldr	r0, [pc, #44]	; (8003d84 <nRF24_CE_Disable+0x78>)
 8003d56:	f7fd ff69 	bl	8001c2c <HAL_GPIO_WritePin>
		break;
 8003d5a:	e00c      	b.n	8003d76 <nRF24_CE_Disable+0x6a>
	case Sel_B_Module3:
		HAL_GPIO_WritePin(GPIOB, nRF_B_CE3_Pin, GPIO_PIN_RESET);
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d62:	4808      	ldr	r0, [pc, #32]	; (8003d84 <nRF24_CE_Disable+0x78>)
 8003d64:	f7fd ff62 	bl	8001c2c <HAL_GPIO_WritePin>
		break;
 8003d68:	e005      	b.n	8003d76 <nRF24_CE_Disable+0x6a>
	case Sel_B_Module4:
		HAL_GPIO_WritePin(GPIOC, nRF_B_CE4_Pin, GPIO_PIN_RESET);
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	2180      	movs	r1, #128	; 0x80
 8003d6e:	4806      	ldr	r0, [pc, #24]	; (8003d88 <nRF24_CE_Disable+0x7c>)
 8003d70:	f7fd ff5c 	bl	8001c2c <HAL_GPIO_WritePin>
		break;
 8003d74:	bf00      	nop
	}
}
 8003d76:	bf00      	nop
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40020000 	.word	0x40020000
 8003d84:	40020400 	.word	0x40020400
 8003d88:	40020800 	.word	0x40020800

08003d8c <nRF24_WriteReg>:
// input:
//   Sel_CSN_Pin - Select the RF Module
//   reg - number of register to write
//   data - value to write
void nRF24_WriteReg(uint16_t Sel_CSN_Pin, uint8_t reg, uint8_t data)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	4603      	mov	r3, r0
 8003d94:	80fb      	strh	r3, [r7, #6]
 8003d96:	460b      	mov	r3, r1
 8003d98:	717b      	strb	r3, [r7, #5]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	713b      	strb	r3, [r7, #4]
	uint8_t buf[2];
	buf[0] = reg | 1<<5;                                  //Set the 6th bit of the reg to make it a write command
 8003d9e:	797b      	ldrb	r3, [r7, #5]
 8003da0:	f043 0320 	orr.w	r3, r3, #32
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	733b      	strb	r3, [r7, #12]
	buf[1] = data;
 8003da8:	793b      	ldrb	r3, [r7, #4]
 8003daa:	737b      	strb	r3, [r7, #13]

	nRF24_CSN_Select(Sel_CSN_Pin);                  //Pull CSN pin low to select the nRF24 on SPI BUS
 8003dac:	88fb      	ldrh	r3, [r7, #6]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff fef0 	bl	8003b94 <nRF24_CSN_Select>
	if(Sel_CSN_Pin != Sel_EL_Module)
 8003db4:	88fb      	ldrh	r3, [r7, #6]
 8003db6:	2b05      	cmp	r3, #5
 8003db8:	d00b      	beq.n	8003dd2 <nRF24_WriteReg+0x46>
	{
		HAL_SPI_Transmit(&Button_hspi1, buf, 2, 1000);    //Write command and register address (001AAAAA) and then the data to be written
 8003dba:	f107 010c 	add.w	r1, r7, #12
 8003dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	480c      	ldr	r0, [pc, #48]	; (8003df8 <nRF24_WriteReg+0x6c>)
 8003dc6:	f7fe fc44 	bl	8002652 <HAL_SPI_Transmit>
		nRF24_CSN_UnSelect(Sel_B_Module1);                //Pull CSN pin high to unselect the nRF24 on SPI BUS
 8003dca:	2001      	movs	r0, #1
 8003dcc:	f7ff ff20 	bl	8003c10 <nRF24_CSN_UnSelect>
 8003dd0:	e00a      	b.n	8003de8 <nRF24_WriteReg+0x5c>
	}
	else
	{
		HAL_SPI_Transmit(&EL_hspi2, buf, 2, 1000);        //Write command and register address (001AAAAA) and then the data to be written
 8003dd2:	f107 010c 	add.w	r1, r7, #12
 8003dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dda:	2202      	movs	r2, #2
 8003ddc:	4807      	ldr	r0, [pc, #28]	; (8003dfc <nRF24_WriteReg+0x70>)
 8003dde:	f7fe fc38 	bl	8002652 <HAL_SPI_Transmit>
		nRF24_CSN_UnSelect(Sel_EL_Module);                //Pull CSN pin high to unselect the nRF24 on SPI BUS
 8003de2:	2005      	movs	r0, #5
 8003de4:	f7ff ff14 	bl	8003c10 <nRF24_CSN_UnSelect>
	}
	nRF24_CSN_UnSelect(Sel_CSN_Pin);                  //Pull CSN pin low to select the nRF24 on SPI BUS
 8003de8:	88fb      	ldrh	r3, [r7, #6]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff ff10 	bl	8003c10 <nRF24_CSN_UnSelect>
}
 8003df0:	bf00      	nop
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	20000114 	.word	0x20000114
 8003dfc:	2000016c 	.word	0x2000016c

08003e00 <nRF24_WriteMBReg>:
//   Sel_CSN_Pin - Select the RF Module
//   reg - number of register to write
//   data - pointer to the buffer with data to write
//   size - number of bytes to write
void nRF24_WriteMBReg(uint16_t Sel_CSN_Pin, uint8_t reg, uint8_t *data, uint8_t size)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	603a      	str	r2, [r7, #0]
 8003e08:	461a      	mov	r2, r3
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	80fb      	strh	r3, [r7, #6]
 8003e0e:	460b      	mov	r3, r1
 8003e10:	717b      	strb	r3, [r7, #5]
 8003e12:	4613      	mov	r3, r2
 8003e14:	713b      	strb	r3, [r7, #4]
	uint8_t buf[2];
	buf[0] = reg | 1<<5;                                      //Set the 6th bit of the reg to make it a write command
 8003e16:	797b      	ldrb	r3, [r7, #5]
 8003e18:	f043 0320 	orr.w	r3, r3, #32
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	733b      	strb	r3, [r7, #12]
//	buf[1] = data;

	nRF24_CSN_Select(Sel_CSN_Pin);                      //Pull CSN pin low to select the nRF24 on SPI BUS
 8003e20:	88fb      	ldrh	r3, [r7, #6]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff feb6 	bl	8003b94 <nRF24_CSN_Select>
	if(Sel_CSN_Pin != Sel_EL_Module)
 8003e28:	88fb      	ldrh	r3, [r7, #6]
 8003e2a:	2b05      	cmp	r3, #5
 8003e2c:	d010      	beq.n	8003e50 <nRF24_WriteMBReg+0x50>
	{
		HAL_SPI_Transmit(&Button_hspi1, buf, 1, 1000);        //Write command and register address (001AAAAA)
 8003e2e:	f107 010c 	add.w	r1, r7, #12
 8003e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e36:	2201      	movs	r2, #1
 8003e38:	4811      	ldr	r0, [pc, #68]	; (8003e80 <nRF24_WriteMBReg+0x80>)
 8003e3a:	f7fe fc0a 	bl	8002652 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&Button_hspi1, data, size, 1000);    //Send the data to be written in that address
 8003e3e:	793b      	ldrb	r3, [r7, #4]
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e46:	6839      	ldr	r1, [r7, #0]
 8003e48:	480d      	ldr	r0, [pc, #52]	; (8003e80 <nRF24_WriteMBReg+0x80>)
 8003e4a:	f7fe fc02 	bl	8002652 <HAL_SPI_Transmit>
 8003e4e:	e00f      	b.n	8003e70 <nRF24_WriteMBReg+0x70>
	}
	else
	{
		HAL_SPI_Transmit(&EL_hspi2, buf, 1, 1000);            //Write command and register address (001AAAAA)
 8003e50:	f107 010c 	add.w	r1, r7, #12
 8003e54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e58:	2201      	movs	r2, #1
 8003e5a:	480a      	ldr	r0, [pc, #40]	; (8003e84 <nRF24_WriteMBReg+0x84>)
 8003e5c:	f7fe fbf9 	bl	8002652 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&EL_hspi2, data, size, 1000);        //Send the data to be written in that address
 8003e60:	793b      	ldrb	r3, [r7, #4]
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e68:	6839      	ldr	r1, [r7, #0]
 8003e6a:	4806      	ldr	r0, [pc, #24]	; (8003e84 <nRF24_WriteMBReg+0x84>)
 8003e6c:	f7fe fbf1 	bl	8002652 <HAL_SPI_Transmit>
	}
	nRF24_CSN_UnSelect(Sel_CSN_Pin);                    //Pull CSN pin high to unselect the nRF24 on SPI BUS
 8003e70:	88fb      	ldrh	r3, [r7, #6]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff fecc 	bl	8003c10 <nRF24_CSN_UnSelect>
}
 8003e78:	bf00      	nop
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	20000114 	.word	0x20000114
 8003e84:	2000016c 	.word	0x2000016c

08003e88 <nRF24_ReadReg>:
// Reads a value of register
// input:
//   Sel_CSN_Pin - Select the RF Module
//   reg - number of register to read
// return: value of register
uint8_t nRF24_ReadReg(uint16_t Sel_CSN_Pin, uint8_t reg) {
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	4603      	mov	r3, r0
 8003e90:	460a      	mov	r2, r1
 8003e92:	80fb      	strh	r3, [r7, #6]
 8003e94:	4613      	mov	r3, r2
 8003e96:	717b      	strb	r3, [r7, #5]

	uint8_t data = 0;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	73fb      	strb	r3, [r7, #15]

	nRF24_CSN_Select(Sel_CSN_Pin);                            //Pull CSN pin low to select the nRF24 on SPI BUS
 8003e9c:	88fb      	ldrh	r3, [r7, #6]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff fe78 	bl	8003b94 <nRF24_CSN_Select>
	if(Sel_CSN_Pin != Sel_EL_Module)
 8003ea4:	88fb      	ldrh	r3, [r7, #6]
 8003ea6:	2b05      	cmp	r3, #5
 8003ea8:	d00f      	beq.n	8003eca <nRF24_ReadReg+0x42>
	{
		HAL_SPI_Transmit(&Button_hspi1, &reg, 1, 1000);       //Sending the read command and register address (000AAAAA)
 8003eaa:	1d79      	adds	r1, r7, #5
 8003eac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	4812      	ldr	r0, [pc, #72]	; (8003efc <nRF24_ReadReg+0x74>)
 8003eb4:	f7fe fbcd 	bl	8002652 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&Button_hspi1, &data, 1, 1000);       //Reading the one byte received
 8003eb8:	f107 010f 	add.w	r1, r7, #15
 8003ebc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	480e      	ldr	r0, [pc, #56]	; (8003efc <nRF24_ReadReg+0x74>)
 8003ec4:	f7fe fd01 	bl	80028ca <HAL_SPI_Receive>
 8003ec8:	e00e      	b.n	8003ee8 <nRF24_ReadReg+0x60>
	}
	else
	{
		HAL_SPI_Transmit(&EL_hspi2, &reg, 1, 1000);           //Sending the read command and register address (000AAAAA)
 8003eca:	1d79      	adds	r1, r7, #5
 8003ecc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	480b      	ldr	r0, [pc, #44]	; (8003f00 <nRF24_ReadReg+0x78>)
 8003ed4:	f7fe fbbd 	bl	8002652 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&EL_hspi2, &data, 1, 1000);           //Reading the one byte received
 8003ed8:	f107 010f 	add.w	r1, r7, #15
 8003edc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	4807      	ldr	r0, [pc, #28]	; (8003f00 <nRF24_ReadReg+0x78>)
 8003ee4:	f7fe fcf1 	bl	80028ca <HAL_SPI_Receive>
	}
	nRF24_CSN_UnSelect(Sel_CSN_Pin);                          //Pull CSN pin high to unselect the nRF24 on SPI BUS
 8003ee8:	88fb      	ldrh	r3, [r7, #6]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff fe90 	bl	8003c10 <nRF24_CSN_UnSelect>

	return data;
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	20000114 	.word	0x20000114
 8003f00:	2000016c 	.word	0x2000016c

08003f04 <nRF24_Reset>:
// Reset all the nRF24's registers
// input:
//   Sel_CSN_Pin - Select the RF Module
//   reg - number of register to write
void nRF24_Reset(uint16_t Sel_CSN_Pin, uint8_t Reg)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	460a      	mov	r2, r1
 8003f0e:	80fb      	strh	r3, [r7, #6]
 8003f10:	4613      	mov	r3, r2
 8003f12:	717b      	strb	r3, [r7, #5]

		if(Reg == nRF24_REG_STATUS)
 8003f14:	797b      	ldrb	r3, [r7, #5]
 8003f16:	2b07      	cmp	r3, #7
 8003f18:	d106      	bne.n	8003f28 <nRF24_Reset+0x24>
		{
			nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_STATUS, 0x70);
 8003f1a:	88fb      	ldrh	r3, [r7, #6]
 8003f1c:	2270      	movs	r2, #112	; 0x70
 8003f1e:	2107      	movs	r1, #7
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff ff33 	bl	8003d8c <nRF24_WriteReg>
		}
		else if(Reg == nRF24_REG_FIFO_STATUS)
		{
			nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_FIFO_STATUS, 0x11);
		}
}
 8003f26:	e008      	b.n	8003f3a <nRF24_Reset+0x36>
		else if(Reg == nRF24_REG_FIFO_STATUS)
 8003f28:	797b      	ldrb	r3, [r7, #5]
 8003f2a:	2b17      	cmp	r3, #23
 8003f2c:	d105      	bne.n	8003f3a <nRF24_Reset+0x36>
			nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_FIFO_STATUS, 0x11);
 8003f2e:	88fb      	ldrh	r3, [r7, #6]
 8003f30:	2211      	movs	r2, #17
 8003f32:	2117      	movs	r1, #23
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff ff29 	bl	8003d8c <nRF24_WriteReg>
}
 8003f3a:	bf00      	nop
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <nRF24_Module_Setup>:


void nRF24_Module_Setup(uint16_t Sel_CSN_Pin, uint8_t mode, uint8_t RF_Ch, uint8_t *Tx_Addr, uint8_t *Rx_Addr, uint8_t RF_Power_Setup, uint8_t Payloadsize)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b088      	sub	sp, #32
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	603b      	str	r3, [r7, #0]
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	80fb      	strh	r3, [r7, #6]
 8003f50:	460b      	mov	r3, r1
 8003f52:	717b      	strb	r3, [r7, #5]
 8003f54:	4613      	mov	r3, r2
 8003f56:	713b      	strb	r3, [r7, #4]
	Pipe3_Addr = Cat_Mod_Pipe[0][0][3];
	Pipe4_Addr = Cat_Mod_Pipe[0][0][4];
	Pipe5_Addr = Cat_Mod_Pipe[0][0][5];*/

	uint8_t rx_addr_p0[5],rx_addr_p1[5],rx_addr_p2,rx_addr_p3,rx_addr_p4,rx_addr_p5;
	rx_addr_p0[0] = *Rx_Addr;
 8003f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	753b      	strb	r3, [r7, #20]
	rx_addr_p0[1] = *(Rx_Addr+1);
 8003f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f60:	785b      	ldrb	r3, [r3, #1]
 8003f62:	757b      	strb	r3, [r7, #21]
	rx_addr_p0[2] = *(Rx_Addr+2);
 8003f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f66:	789b      	ldrb	r3, [r3, #2]
 8003f68:	75bb      	strb	r3, [r7, #22]
	rx_addr_p0[3] = *(Rx_Addr+3);
 8003f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6c:	78db      	ldrb	r3, [r3, #3]
 8003f6e:	75fb      	strb	r3, [r7, #23]
	rx_addr_p0[4] = *(Rx_Addr+4);
 8003f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f72:	791b      	ldrb	r3, [r3, #4]
 8003f74:	763b      	strb	r3, [r7, #24]
	rx_addr_p1[0] = (*Rx_Addr)+1;
 8003f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	733b      	strb	r3, [r7, #12]
	rx_addr_p1[1] = *(Rx_Addr+1);
 8003f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f82:	785b      	ldrb	r3, [r3, #1]
 8003f84:	737b      	strb	r3, [r7, #13]
	rx_addr_p1[2] = *(Rx_Addr+2);
 8003f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f88:	789b      	ldrb	r3, [r3, #2]
 8003f8a:	73bb      	strb	r3, [r7, #14]
	rx_addr_p1[3] = *(Rx_Addr+3);
 8003f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8e:	78db      	ldrb	r3, [r3, #3]
 8003f90:	73fb      	strb	r3, [r7, #15]
	rx_addr_p1[4] = *(Rx_Addr+4);
 8003f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f94:	791b      	ldrb	r3, [r3, #4]
 8003f96:	743b      	strb	r3, [r7, #16]
	rx_addr_p2 = rx_addr_p1[0]+1;
 8003f98:	7b3b      	ldrb	r3, [r7, #12]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	77fb      	strb	r3, [r7, #31]
	rx_addr_p3 = rx_addr_p2+1;
 8003f9e:	7ffb      	ldrb	r3, [r7, #31]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	77bb      	strb	r3, [r7, #30]
	rx_addr_p4 = rx_addr_p3+1;
 8003fa4:	7fbb      	ldrb	r3, [r7, #30]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	777b      	strb	r3, [r7, #29]
	rx_addr_p5 = rx_addr_p4+1;
 8003faa:	7f7b      	ldrb	r3, [r7, #29]
 8003fac:	3301      	adds	r3, #1
 8003fae:	773b      	strb	r3, [r7, #28]

	switch(mode)
 8003fb0:	797b      	ldrb	r3, [r7, #5]
 8003fb2:	2b05      	cmp	r3, #5
 8003fb4:	f200 8082 	bhi.w	80040bc <nRF24_Module_Setup+0x178>
 8003fb8:	a201      	add	r2, pc, #4	; (adr r2, 8003fc0 <nRF24_Module_Setup+0x7c>)
 8003fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbe:	bf00      	nop
 8003fc0:	08003fd9 	.word	0x08003fd9
 8003fc4:	08003fff 	.word	0x08003fff
 8003fc8:	08004025 	.word	0x08004025
 8003fcc:	0800404b 	.word	0x0800404b
 8003fd0:	08004071 	.word	0x08004071
 8003fd4:	08004097 	.word	0x08004097
	{
    case Receiver_Mode_AA:
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_CONFIG, 0x09);                      //PRIM_RX=1, PWR_UP=0, EN_CRC=1
 8003fd8:	88fb      	ldrh	r3, [r7, #6]
 8003fda:	2209      	movs	r2, #9
 8003fdc:	2100      	movs	r1, #0
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7ff fed4 	bl	8003d8c <nRF24_WriteReg>
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_EN_AA, 0x3F);                       //Enable AA for all pipes
 8003fe4:	88fb      	ldrh	r3, [r7, #6]
 8003fe6:	223f      	movs	r2, #63	; 0x3f
 8003fe8:	2101      	movs	r1, #1
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff fece 	bl	8003d8c <nRF24_WriteReg>
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_EN_RXADDR, 0x3F);                   //Enable RX addresses for all pipes
 8003ff0:	88fb      	ldrh	r3, [r7, #6]
 8003ff2:	223f      	movs	r2, #63	; 0x3f
 8003ff4:	2102      	movs	r1, #2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff fec8 	bl	8003d8c <nRF24_WriteReg>
		break;
 8003ffc:	e05e      	b.n	80040bc <nRF24_Module_Setup+0x178>
    case Receiver_Mode_noAA_CRC:
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_CONFIG, 0x09);                      //PRIM_RX=1, PWR_UP=0, EN_CRC=1
 8003ffe:	88fb      	ldrh	r3, [r7, #6]
 8004000:	2209      	movs	r2, #9
 8004002:	2100      	movs	r1, #0
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff fec1 	bl	8003d8c <nRF24_WriteReg>
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 800400a:	88fb      	ldrh	r3, [r7, #6]
 800400c:	2200      	movs	r2, #0
 800400e:	2101      	movs	r1, #1
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff febb 	bl	8003d8c <nRF24_WriteReg>
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_EN_RXADDR, 0x3F);                   //Enable RX addresses for all pipes
 8004016:	88fb      	ldrh	r3, [r7, #6]
 8004018:	223f      	movs	r2, #63	; 0x3f
 800401a:	2102      	movs	r1, #2
 800401c:	4618      	mov	r0, r3
 800401e:	f7ff feb5 	bl	8003d8c <nRF24_WriteReg>
		break;
 8004022:	e04b      	b.n	80040bc <nRF24_Module_Setup+0x178>
    case Receiver_Mode_noAA_noCRC:
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_CONFIG, 0x01);                      //PRIM_RX=1, PWR_UP=0, EN_CRC=0
 8004024:	88fb      	ldrh	r3, [r7, #6]
 8004026:	2201      	movs	r2, #1
 8004028:	2100      	movs	r1, #0
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff feae 	bl	8003d8c <nRF24_WriteReg>
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 8004030:	88fb      	ldrh	r3, [r7, #6]
 8004032:	2200      	movs	r2, #0
 8004034:	2101      	movs	r1, #1
 8004036:	4618      	mov	r0, r3
 8004038:	f7ff fea8 	bl	8003d8c <nRF24_WriteReg>
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_EN_RXADDR, 0x3F);                   //Enable RX addresses for all pipes
 800403c:	88fb      	ldrh	r3, [r7, #6]
 800403e:	223f      	movs	r2, #63	; 0x3f
 8004040:	2102      	movs	r1, #2
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff fea2 	bl	8003d8c <nRF24_WriteReg>
		break;
 8004048:	e038      	b.n	80040bc <nRF24_Module_Setup+0x178>
    case Transmitter_Mode_AA:
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_CONFIG, 0x08);                      //PRIM_RX=0, PWR_UP=0, EN_CRC=1
 800404a:	88fb      	ldrh	r3, [r7, #6]
 800404c:	2208      	movs	r2, #8
 800404e:	2100      	movs	r1, #0
 8004050:	4618      	mov	r0, r3
 8004052:	f7ff fe9b 	bl	8003d8c <nRF24_WriteReg>
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_EN_AA, 0x3F);                       //Enable AA for all pipes
 8004056:	88fb      	ldrh	r3, [r7, #6]
 8004058:	223f      	movs	r2, #63	; 0x3f
 800405a:	2101      	movs	r1, #1
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff fe95 	bl	8003d8c <nRF24_WriteReg>
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_EN_RXADDR, 0x01);                   //Enable RX addresses for pipe0
 8004062:	88fb      	ldrh	r3, [r7, #6]
 8004064:	2201      	movs	r2, #1
 8004066:	2102      	movs	r1, #2
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff fe8f 	bl	8003d8c <nRF24_WriteReg>
		break;
 800406e:	e025      	b.n	80040bc <nRF24_Module_Setup+0x178>
    case Transmitter_Mode_noAA_CRC:
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_CONFIG, 0x08);                      //PRIM_RX=0, PWR_UP=0, EN_CRC=1
 8004070:	88fb      	ldrh	r3, [r7, #6]
 8004072:	2208      	movs	r2, #8
 8004074:	2100      	movs	r1, #0
 8004076:	4618      	mov	r0, r3
 8004078:	f7ff fe88 	bl	8003d8c <nRF24_WriteReg>
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 800407c:	88fb      	ldrh	r3, [r7, #6]
 800407e:	2200      	movs	r2, #0
 8004080:	2101      	movs	r1, #1
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff fe82 	bl	8003d8c <nRF24_WriteReg>
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_EN_RXADDR, 0x01);                   //Enable RX addresses for pipe0
 8004088:	88fb      	ldrh	r3, [r7, #6]
 800408a:	2201      	movs	r2, #1
 800408c:	2102      	movs	r1, #2
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff fe7c 	bl	8003d8c <nRF24_WriteReg>
		break;
 8004094:	e012      	b.n	80040bc <nRF24_Module_Setup+0x178>
    case Transmitter_Mode_noAA_noCRC:
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_CONFIG, 0x00);                      //PRIM_RX=0, PWR_UP=0, EN_CRC=0
 8004096:	88fb      	ldrh	r3, [r7, #6]
 8004098:	2200      	movs	r2, #0
 800409a:	2100      	movs	r1, #0
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff fe75 	bl	8003d8c <nRF24_WriteReg>
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 80040a2:	88fb      	ldrh	r3, [r7, #6]
 80040a4:	2200      	movs	r2, #0
 80040a6:	2101      	movs	r1, #1
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff fe6f 	bl	8003d8c <nRF24_WriteReg>
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_EN_RXADDR, 0x01);                   //Enable RX addresses for pipe0
 80040ae:	88fb      	ldrh	r3, [r7, #6]
 80040b0:	2201      	movs	r2, #1
 80040b2:	2102      	movs	r1, #2
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff fe69 	bl	8003d8c <nRF24_WriteReg>
		break;
 80040ba:	bf00      	nop
	}

	nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_SETUP_AW, 0x03);                        //5 Bytes Length Address
 80040bc:	88fb      	ldrh	r3, [r7, #6]
 80040be:	2203      	movs	r2, #3
 80040c0:	2103      	movs	r1, #3
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff fe62 	bl	8003d8c <nRF24_WriteReg>
	nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_SETUP_RETR, 0x8A);                      //ARD=2000us, ARC=10
 80040c8:	88fb      	ldrh	r3, [r7, #6]
 80040ca:	228a      	movs	r2, #138	; 0x8a
 80040cc:	2104      	movs	r1, #4
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff fe5c 	bl	8003d8c <nRF24_WriteReg>
	nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_RF_CH, RF_Ch);                          //Set the Frequency Channel to 2
 80040d4:	793a      	ldrb	r2, [r7, #4]
 80040d6:	88fb      	ldrh	r3, [r7, #6]
 80040d8:	2105      	movs	r1, #5
 80040da:	4618      	mov	r0, r3
 80040dc:	f7ff fe56 	bl	8003d8c <nRF24_WriteReg>

	nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_RF_SETUP, RF_Power_Setup);              //Power in dBm, Speed in Mbps, LNA_HCURR=1
 80040e0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80040e4:	88fb      	ldrh	r3, [r7, #6]
 80040e6:	2106      	movs	r1, #6
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff fe4f 	bl	8003d8c <nRF24_WriteReg>

	if((mode==Transmitter_Mode_AA)||(mode==Transmitter_Mode_noAA_CRC)||(mode==Transmitter_Mode_noAA_noCRC))
 80040ee:	797b      	ldrb	r3, [r7, #5]
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d005      	beq.n	8004100 <nRF24_Module_Setup+0x1bc>
 80040f4:	797b      	ldrb	r3, [r7, #5]
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d002      	beq.n	8004100 <nRF24_Module_Setup+0x1bc>
 80040fa:	797b      	ldrb	r3, [r7, #5]
 80040fc:	2b05      	cmp	r3, #5
 80040fe:	d10c      	bne.n	800411a <nRF24_Module_Setup+0x1d6>
	{
		nRF24_WriteMBReg(Sel_CSN_Pin, nRF24_REG_RX_ADDR_P0, Tx_Addr, 5);          //Set the Pipe0 address to {0x53, 0x52, 0x36, 0x34, 0x00}
 8004100:	88f8      	ldrh	r0, [r7, #6]
 8004102:	2305      	movs	r3, #5
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	210a      	movs	r1, #10
 8004108:	f7ff fe7a 	bl	8003e00 <nRF24_WriteMBReg>
		nRF24_WriteMBReg(Sel_CSN_Pin, nRF24_REG_TX_ADDR, Tx_Addr, 5);             //Set the TX address to {0x53, 0x52, 0x36, 0x34, 0x00}
 800410c:	88f8      	ldrh	r0, [r7, #6]
 800410e:	2305      	movs	r3, #5
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	2110      	movs	r1, #16
 8004114:	f7ff fe74 	bl	8003e00 <nRF24_WriteMBReg>
 8004118:	e034      	b.n	8004184 <nRF24_Module_Setup+0x240>
	}
	else if((mode==Receiver_Mode_AA)||(mode==Receiver_Mode_noAA_CRC)||(mode==Receiver_Mode_noAA_noCRC))
 800411a:	797b      	ldrb	r3, [r7, #5]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <nRF24_Module_Setup+0x1e8>
 8004120:	797b      	ldrb	r3, [r7, #5]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d002      	beq.n	800412c <nRF24_Module_Setup+0x1e8>
 8004126:	797b      	ldrb	r3, [r7, #5]
 8004128:	2b02      	cmp	r3, #2
 800412a:	d12b      	bne.n	8004184 <nRF24_Module_Setup+0x240>
	{
		nRF24_WriteMBReg(Sel_CSN_Pin, nRF24_REG_RX_ADDR_P0, rx_addr_p0, 5);       //Set the Pipe0 address
 800412c:	f107 0214 	add.w	r2, r7, #20
 8004130:	88f8      	ldrh	r0, [r7, #6]
 8004132:	2305      	movs	r3, #5
 8004134:	210a      	movs	r1, #10
 8004136:	f7ff fe63 	bl	8003e00 <nRF24_WriteMBReg>
		nRF24_WriteMBReg(Sel_CSN_Pin, nRF24_REG_RX_ADDR_P1, rx_addr_p1, 5);       //Set the Pipe1 address
 800413a:	f107 020c 	add.w	r2, r7, #12
 800413e:	88f8      	ldrh	r0, [r7, #6]
 8004140:	2305      	movs	r3, #5
 8004142:	210b      	movs	r1, #11
 8004144:	f7ff fe5c 	bl	8003e00 <nRF24_WriteMBReg>
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_RX_ADDR_P2, rx_addr_p2);            //Set the Pipe2 address
 8004148:	7ffa      	ldrb	r2, [r7, #31]
 800414a:	88fb      	ldrh	r3, [r7, #6]
 800414c:	210c      	movs	r1, #12
 800414e:	4618      	mov	r0, r3
 8004150:	f7ff fe1c 	bl	8003d8c <nRF24_WriteReg>
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_RX_ADDR_P3, rx_addr_p3);            //Set the Pipe3 address
 8004154:	7fba      	ldrb	r2, [r7, #30]
 8004156:	88fb      	ldrh	r3, [r7, #6]
 8004158:	210d      	movs	r1, #13
 800415a:	4618      	mov	r0, r3
 800415c:	f7ff fe16 	bl	8003d8c <nRF24_WriteReg>
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_RX_ADDR_P4, rx_addr_p4);            //Set the Pipe4 address
 8004160:	7f7a      	ldrb	r2, [r7, #29]
 8004162:	88fb      	ldrh	r3, [r7, #6]
 8004164:	210e      	movs	r1, #14
 8004166:	4618      	mov	r0, r3
 8004168:	f7ff fe10 	bl	8003d8c <nRF24_WriteReg>
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_RX_ADDR_P5, rx_addr_p5);            //Set the Pipe5 address
 800416c:	7f3a      	ldrb	r2, [r7, #28]
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	210f      	movs	r1, #15
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff fe0a 	bl	8003d8c <nRF24_WriteReg>
		nRF24_WriteMBReg(Sel_CSN_Pin, nRF24_REG_TX_ADDR, Tx_Addr, 5);             //Set the TX address
 8004178:	88f8      	ldrh	r0, [r7, #6]
 800417a:	2305      	movs	r3, #5
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	2110      	movs	r1, #16
 8004180:	f7ff fe3e 	bl	8003e00 <nRF24_WriteMBReg>
	}

	nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_RX_PW_P0, Payloadsize);                 //Set the Pipe0 Payload size
 8004184:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8004188:	88fb      	ldrh	r3, [r7, #6]
 800418a:	2111      	movs	r1, #17
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff fdfd 	bl	8003d8c <nRF24_WriteReg>
	nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_RX_PW_P1, Payloadsize);                 //Set the Pipe1 Payload size
 8004192:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8004196:	88fb      	ldrh	r3, [r7, #6]
 8004198:	2112      	movs	r1, #18
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff fdf6 	bl	8003d8c <nRF24_WriteReg>
	nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_RX_PW_P2, Payloadsize);                 //Set the Pipe2 Payload size
 80041a0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80041a4:	88fb      	ldrh	r3, [r7, #6]
 80041a6:	2113      	movs	r1, #19
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7ff fdef 	bl	8003d8c <nRF24_WriteReg>
	nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_RX_PW_P3, Payloadsize);                 //Set the Pipe3 Payload size
 80041ae:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80041b2:	88fb      	ldrh	r3, [r7, #6]
 80041b4:	2114      	movs	r1, #20
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff fde8 	bl	8003d8c <nRF24_WriteReg>
	nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_RX_PW_P4, Payloadsize);                 //Set the Pipe4 Payload size
 80041bc:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80041c0:	88fb      	ldrh	r3, [r7, #6]
 80041c2:	2115      	movs	r1, #21
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff fde1 	bl	8003d8c <nRF24_WriteReg>
	nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_RX_PW_P5, Payloadsize);                 //Set the Pipe5 Payload size
 80041ca:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80041ce:	88fb      	ldrh	r3, [r7, #6]
 80041d0:	2116      	movs	r1, #22
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff fdda 	bl	8003d8c <nRF24_WriteReg>
}
 80041d8:	bf00      	nop
 80041da:	3720      	adds	r7, #32
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <nRF24_Transmit>:


uint8_t nRF24_Transmit(uint16_t Sel_CSN_Pin, uint8_t *data, uint8_t Payload_Size)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	4603      	mov	r3, r0
 80041e8:	6039      	str	r1, [r7, #0]
 80041ea:	80fb      	strh	r3, [r7, #6]
 80041ec:	4613      	mov	r3, r2
 80041ee:	717b      	strb	r3, [r7, #5]
	uint8_t cmdtosend = 0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	737b      	strb	r3, [r7, #13]
	uint8_t Temp_Register;
    uint8_t Tr_Success = 0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	73bb      	strb	r3, [r7, #14]

	nRF24_CSN_Select(Sel_CSN_Pin);                                                      //Pull CSN pin low to select the module1 on SPI BUS
 80041f8:	88fb      	ldrh	r3, [r7, #6]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff fcca 	bl	8003b94 <nRF24_CSN_Select>


	cmdtosend = nRF24_CMD_W_TX_PAYLOAD;                                                 //Payload transmit command
 8004200:	23a0      	movs	r3, #160	; 0xa0
 8004202:	737b      	strb	r3, [r7, #13]
	if(Sel_CSN_Pin != Sel_EL_Module)
 8004204:	88fb      	ldrh	r3, [r7, #6]
 8004206:	2b05      	cmp	r3, #5
 8004208:	d00e      	beq.n	8004228 <nRF24_Transmit+0x48>
	{
		HAL_SPI_Transmit(&Button_hspi1, &cmdtosend, 1, 100);
 800420a:	f107 010d 	add.w	r1, r7, #13
 800420e:	2364      	movs	r3, #100	; 0x64
 8004210:	2201      	movs	r2, #1
 8004212:	482d      	ldr	r0, [pc, #180]	; (80042c8 <nRF24_Transmit+0xe8>)
 8004214:	f7fe fa1d 	bl	8002652 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&Button_hspi1, data, Payload_Size, 100);
 8004218:	797b      	ldrb	r3, [r7, #5]
 800421a:	b29a      	uxth	r2, r3
 800421c:	2364      	movs	r3, #100	; 0x64
 800421e:	6839      	ldr	r1, [r7, #0]
 8004220:	4829      	ldr	r0, [pc, #164]	; (80042c8 <nRF24_Transmit+0xe8>)
 8004222:	f7fe fa16 	bl	8002652 <HAL_SPI_Transmit>
 8004226:	e00d      	b.n	8004244 <nRF24_Transmit+0x64>
	}
	else
	{
		HAL_SPI_Transmit(&EL_hspi2, &cmdtosend, 1, 100);
 8004228:	f107 010d 	add.w	r1, r7, #13
 800422c:	2364      	movs	r3, #100	; 0x64
 800422e:	2201      	movs	r2, #1
 8004230:	4826      	ldr	r0, [pc, #152]	; (80042cc <nRF24_Transmit+0xec>)
 8004232:	f7fe fa0e 	bl	8002652 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&EL_hspi2, data, Payload_Size, 100);
 8004236:	797b      	ldrb	r3, [r7, #5]
 8004238:	b29a      	uxth	r2, r3
 800423a:	2364      	movs	r3, #100	; 0x64
 800423c:	6839      	ldr	r1, [r7, #0]
 800423e:	4823      	ldr	r0, [pc, #140]	; (80042cc <nRF24_Transmit+0xec>)
 8004240:	f7fe fa07 	bl	8002652 <HAL_SPI_Transmit>
	}
	nRF24_CE_Enable(Sel_CSN_Pin);                                                       //Enable the module1
 8004244:	88fb      	ldrh	r3, [r7, #6]
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff fd20 	bl	8003c8c <nRF24_CE_Enable>
	HAL_Delay(1);
 800424c:	2001      	movs	r0, #1
 800424e:	f7fd f9f9 	bl	8001644 <HAL_Delay>
	nRF24_CE_Disable(Sel_CSN_Pin);
 8004252:	88fb      	ldrh	r3, [r7, #6]
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff fd59 	bl	8003d0c <nRF24_CE_Disable>
	Temp_Register = nRF24_ReadReg(Sel_CSN_Pin, nRF24_REG_STATUS);                       //Reading the STATUS register
 800425a:	88fb      	ldrh	r3, [r7, #6]
 800425c:	2107      	movs	r1, #7
 800425e:	4618      	mov	r0, r3
 8004260:	f7ff fe12 	bl	8003e88 <nRF24_ReadReg>
 8004264:	4603      	mov	r3, r0
 8004266:	73fb      	strb	r3, [r7, #15]
	Temp_Register = nRF24_ReadReg(Sel_CSN_Pin, nRF24_REG_STATUS);                       //Reading the STATUS register
 8004268:	88fb      	ldrh	r3, [r7, #6]
 800426a:	2107      	movs	r1, #7
 800426c:	4618      	mov	r0, r3
 800426e:	f7ff fe0b 	bl	8003e88 <nRF24_ReadReg>
 8004272:	4603      	mov	r3, r0
 8004274:	73fb      	strb	r3, [r7, #15]
	if((Temp_Register & (1<<5)) != 0)                                                   //check TX_EMPTY flag to be 1 along with Reserved pin to be 0
 8004276:	7bfb      	ldrb	r3, [r7, #15]
 8004278:	f003 0320 	and.w	r3, r3, #32
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00b      	beq.n	8004298 <nRF24_Transmit+0xb8>
	{
#ifdef Debug
		HAL_UART_Transmit(&huart2, (uint8_t *)"\nData Transmitted Successfully\n",31,100);
#endif
		//Remove the interrupt pin
		Temp_Register = Temp_Register | (1<<5);                                         //Write 1 to TX_DS to reset it
 8004280:	7bfb      	ldrb	r3, [r7, #15]
 8004282:	f043 0320 	orr.w	r3, r3, #32
 8004286:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_STATUS, Temp_Register);
 8004288:	7bfa      	ldrb	r2, [r7, #15]
 800428a:	88fb      	ldrh	r3, [r7, #6]
 800428c:	2107      	movs	r1, #7
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff fd7c 	bl	8003d8c <nRF24_WriteReg>
		Tr_Success = 1;
 8004294:	2301      	movs	r3, #1
 8004296:	73bb      	strb	r3, [r7, #14]
	}
	if((Temp_Register & (1<<4)) != 0)                                                   //check TX_EMPTY flag to be 1 along with Reserved pin to be 0
 8004298:	7bfb      	ldrb	r3, [r7, #15]
 800429a:	f003 0310 	and.w	r3, r3, #16
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d009      	beq.n	80042b6 <nRF24_Transmit+0xd6>
	{
#ifdef Debug
		HAL_UART_Transmit(&huart2, (uint8_t *)"Maximum Retry Reached\n",22,100);
#endif
		//Remove the interrupt pin
		Temp_Register = Temp_Register | (1<<4);                                         //Write 1 to MAX_RT to reset it
 80042a2:	7bfb      	ldrb	r3, [r7, #15]
 80042a4:	f043 0310 	orr.w	r3, r3, #16
 80042a8:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_STATUS, Temp_Register);
 80042aa:	7bfa      	ldrb	r2, [r7, #15]
 80042ac:	88fb      	ldrh	r3, [r7, #6]
 80042ae:	2107      	movs	r1, #7
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff fd6b 	bl	8003d8c <nRF24_WriteReg>
	}

	//nRF24_SendCMD(Sel_CSN_Pin, nRF24_CMD_FLUSH_TX);

	nRF24_CSN_UnSelect(Sel_CSN_Pin);
 80042b6:	88fb      	ldrh	r3, [r7, #6]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7ff fca9 	bl	8003c10 <nRF24_CSN_UnSelect>
	return Tr_Success;
 80042be:	7bbb      	ldrb	r3, [r7, #14]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	20000114 	.word	0x20000114
 80042cc:	2000016c 	.word	0x2000016c

080042d0 <nRF24_Receive>:
    return Receiving_Pipe;
}


void nRF24_Receive(uint16_t Sel_CSN_Pin, uint8_t *data, uint8_t Payload_Size)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	4603      	mov	r3, r0
 80042d8:	6039      	str	r1, [r7, #0]
 80042da:	80fb      	strh	r3, [r7, #6]
 80042dc:	4613      	mov	r3, r2
 80042de:	717b      	strb	r3, [r7, #5]
	uint8_t cmdtosend = 0;
 80042e0:	2300      	movs	r3, #0
 80042e2:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp_Register = 0;
 80042e4:	2300      	movs	r3, #0
 80042e6:	73fb      	strb	r3, [r7, #15]

	if(Sel_CSN_Pin != Sel_EL_Module)
 80042e8:	88fb      	ldrh	r3, [r7, #6]
 80042ea:	2b05      	cmp	r3, #5
 80042ec:	d038      	beq.n	8004360 <nRF24_Receive+0x90>
	{
		nRF24_CSN_Select(Sel_CSN_Pin);                                                    //Pull CSN pin low to select the module1 on SPI BUS
 80042ee:	88fb      	ldrh	r3, [r7, #6]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff fc4f 	bl	8003b94 <nRF24_CSN_Select>
		cmdtosend = nRF24_CMD_R_RX_PAYLOAD;                                                 //Payload transmit command
 80042f6:	2361      	movs	r3, #97	; 0x61
 80042f8:	73bb      	strb	r3, [r7, #14]
		HAL_SPI_Transmit(&Button_hspi1, &cmdtosend, 1, 100);
 80042fa:	f107 010e 	add.w	r1, r7, #14
 80042fe:	2364      	movs	r3, #100	; 0x64
 8004300:	2201      	movs	r2, #1
 8004302:	4830      	ldr	r0, [pc, #192]	; (80043c4 <nRF24_Receive+0xf4>)
 8004304:	f7fe f9a5 	bl	8002652 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&Button_hspi1, data, Payload_Size, 100);                            //Receive the payload
 8004308:	797b      	ldrb	r3, [r7, #5]
 800430a:	b29a      	uxth	r2, r3
 800430c:	2364      	movs	r3, #100	; 0x64
 800430e:	6839      	ldr	r1, [r7, #0]
 8004310:	482c      	ldr	r0, [pc, #176]	; (80043c4 <nRF24_Receive+0xf4>)
 8004312:	f7fe fada 	bl	80028ca <HAL_SPI_Receive>
		HAL_Delay(1);
 8004316:	2001      	movs	r0, #1
 8004318:	f7fd f994 	bl	8001644 <HAL_Delay>
		Temp_Register = nRF24_ReadReg(Sel_CSN_Pin, nRF24_REG_STATUS);
 800431c:	88fb      	ldrh	r3, [r7, #6]
 800431e:	2107      	movs	r1, #7
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff fdb1 	bl	8003e88 <nRF24_ReadReg>
 8004326:	4603      	mov	r3, r0
 8004328:	73fb      	strb	r3, [r7, #15]
		Temp_Register = nRF24_ReadReg(Sel_CSN_Pin, nRF24_REG_STATUS);
 800432a:	88fb      	ldrh	r3, [r7, #6]
 800432c:	2107      	movs	r1, #7
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff fdaa 	bl	8003e88 <nRF24_ReadReg>
 8004334:	4603      	mov	r3, r0
 8004336:	73fb      	strb	r3, [r7, #15]
		if((Temp_Register & (1<<6)) != 0)                                                   //check TX_DR flag to reset the interrupt pin
 8004338:	7bfb      	ldrb	r3, [r7, #15]
 800433a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433e:	2b00      	cmp	r3, #0
 8004340:	d009      	beq.n	8004356 <nRF24_Receive+0x86>
		{
#ifdef Debug
			HAL_UART_Transmit(&huart2, (uint8_t *)"\nData Received in the RX FIFO\n",31,100);
#endif
			//Remove the interrupt pin
			Temp_Register = Temp_Register | (1<<6);                                         //Write 1 to TX_DR to reset interrupt pin
 8004342:	7bfb      	ldrb	r3, [r7, #15]
 8004344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004348:	73fb      	strb	r3, [r7, #15]
			nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_STATUS, Temp_Register);
 800434a:	7bfa      	ldrb	r2, [r7, #15]
 800434c:	88fb      	ldrh	r3, [r7, #6]
 800434e:	2107      	movs	r1, #7
 8004350:	4618      	mov	r0, r3
 8004352:	f7ff fd1b 	bl	8003d8c <nRF24_WriteReg>
#ifndef ELBC
		HAL_Delay(1);
		cmdtosend = nRF24_CMD_FLUSH_RX;                                                     //Flush the RX Buffer
		nRF24_SendCMD(Sel_CSN_Pin, cmdtosend);
#endif
		nRF24_CSN_UnSelect(Sel_CSN_Pin);
 8004356:	88fb      	ldrh	r3, [r7, #6]
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff fc59 	bl	8003c10 <nRF24_CSN_UnSelect>
		nRF24_SendCMD(Sel_EL_Module, cmdtosend);
#endif
		nRF24_CSN_UnSelect(Sel_CSN_Pin);                                     //Release the CSN pin to unselect the EdgeLED Module on SPI BUS
		//Release the CSN pin to unselect the module1 on SPI BUS
	}
}
 800435e:	e02d      	b.n	80043bc <nRF24_Receive+0xec>
		nRF24_CSN_Select(Sel_CSN_Pin);                                       //Pull CSN pin low to select the EdgeLED Module on SPI BUS
 8004360:	88fb      	ldrh	r3, [r7, #6]
 8004362:	4618      	mov	r0, r3
 8004364:	f7ff fc16 	bl	8003b94 <nRF24_CSN_Select>
		cmdtosend = nRF24_CMD_R_RX_PAYLOAD;                                    //Payload transmit command
 8004368:	2361      	movs	r3, #97	; 0x61
 800436a:	73bb      	strb	r3, [r7, #14]
		HAL_SPI_Transmit(&EL_hspi2, &cmdtosend, 1, 100);
 800436c:	f107 010e 	add.w	r1, r7, #14
 8004370:	2364      	movs	r3, #100	; 0x64
 8004372:	2201      	movs	r2, #1
 8004374:	4814      	ldr	r0, [pc, #80]	; (80043c8 <nRF24_Receive+0xf8>)
 8004376:	f7fe f96c 	bl	8002652 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&EL_hspi2, data, Payload_Size, 100);                             //Receive the payload
 800437a:	797b      	ldrb	r3, [r7, #5]
 800437c:	b29a      	uxth	r2, r3
 800437e:	2364      	movs	r3, #100	; 0x64
 8004380:	6839      	ldr	r1, [r7, #0]
 8004382:	4811      	ldr	r0, [pc, #68]	; (80043c8 <nRF24_Receive+0xf8>)
 8004384:	f7fe faa1 	bl	80028ca <HAL_SPI_Receive>
		Temp_Register = nRF24_ReadReg(Sel_CSN_Pin, nRF24_REG_STATUS);
 8004388:	88fb      	ldrh	r3, [r7, #6]
 800438a:	2107      	movs	r1, #7
 800438c:	4618      	mov	r0, r3
 800438e:	f7ff fd7b 	bl	8003e88 <nRF24_ReadReg>
 8004392:	4603      	mov	r3, r0
 8004394:	73fb      	strb	r3, [r7, #15]
		if((Temp_Register & (1<<6)) != 0)                                                   //check TX_DR flag to reset the interrupt pin
 8004396:	7bfb      	ldrb	r3, [r7, #15]
 8004398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439c:	2b00      	cmp	r3, #0
 800439e:	d009      	beq.n	80043b4 <nRF24_Receive+0xe4>
			Temp_Register = Temp_Register | (1<<6);                                         //Write 1 to TX_DR to reset interrupt pin
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
 80043a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043a6:	73fb      	strb	r3, [r7, #15]
			nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_STATUS, Temp_Register);
 80043a8:	7bfa      	ldrb	r2, [r7, #15]
 80043aa:	88fb      	ldrh	r3, [r7, #6]
 80043ac:	2107      	movs	r1, #7
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff fcec 	bl	8003d8c <nRF24_WriteReg>
		nRF24_CSN_UnSelect(Sel_CSN_Pin);                                     //Release the CSN pin to unselect the EdgeLED Module on SPI BUS
 80043b4:	88fb      	ldrh	r3, [r7, #6]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff fc2a 	bl	8003c10 <nRF24_CSN_UnSelect>
}
 80043bc:	bf00      	nop
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	20000114 	.word	0x20000114
 80043c8:	2000016c 	.word	0x2000016c

080043cc <nRF24_Power>:
	}
}


void nRF24_Power(uint16_t Sel_CSN_Pin, uint8_t On_Off_Cmd)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	4603      	mov	r3, r0
 80043d4:	460a      	mov	r2, r1
 80043d6:	80fb      	strh	r3, [r7, #6]
 80043d8:	4613      	mov	r3, r2
 80043da:	717b      	strb	r3, [r7, #5]
	uint8_t Temp_Reg;

	Temp_Reg = nRF24_ReadReg(Sel_CSN_Pin, nRF24_REG_CONFIG);
 80043dc:	88fb      	ldrh	r3, [r7, #6]
 80043de:	2100      	movs	r1, #0
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff fd51 	bl	8003e88 <nRF24_ReadReg>
 80043e6:	4603      	mov	r3, r0
 80043e8:	73fb      	strb	r3, [r7, #15]

	if(On_Off_Cmd == Power_Up)
 80043ea:	797b      	ldrb	r3, [r7, #5]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d10a      	bne.n	8004406 <nRF24_Power+0x3a>
	{
		Temp_Reg = Temp_Reg | (1<<1);
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
 80043f2:	f043 0302 	orr.w	r3, r3, #2
 80043f6:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_CONFIG, Temp_Reg);
 80043f8:	7bfa      	ldrb	r2, [r7, #15]
 80043fa:	88fb      	ldrh	r3, [r7, #6]
 80043fc:	2100      	movs	r1, #0
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff fcc4 	bl	8003d8c <nRF24_WriteReg>
	else if(On_Off_Cmd == Power_Down)
	{
		Temp_Reg = Temp_Reg & 0x7D;
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_CONFIG, Temp_Reg);
	}
}
 8004404:	e00c      	b.n	8004420 <nRF24_Power+0x54>
	else if(On_Off_Cmd == Power_Down)
 8004406:	797b      	ldrb	r3, [r7, #5]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d109      	bne.n	8004420 <nRF24_Power+0x54>
		Temp_Reg = Temp_Reg & 0x7D;
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	f003 037d 	and.w	r3, r3, #125	; 0x7d
 8004412:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(Sel_CSN_Pin, nRF24_REG_CONFIG, Temp_Reg);
 8004414:	7bfa      	ldrb	r2, [r7, #15]
 8004416:	88fb      	ldrh	r3, [r7, #6]
 8004418:	2100      	movs	r1, #0
 800441a:	4618      	mov	r0, r3
 800441c:	f7ff fcb6 	bl	8003d8c <nRF24_WriteReg>
}
 8004420:	bf00      	nop
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <__libc_init_array>:
 8004428:	b570      	push	{r4, r5, r6, lr}
 800442a:	4d0d      	ldr	r5, [pc, #52]	; (8004460 <__libc_init_array+0x38>)
 800442c:	4c0d      	ldr	r4, [pc, #52]	; (8004464 <__libc_init_array+0x3c>)
 800442e:	1b64      	subs	r4, r4, r5
 8004430:	10a4      	asrs	r4, r4, #2
 8004432:	2600      	movs	r6, #0
 8004434:	42a6      	cmp	r6, r4
 8004436:	d109      	bne.n	800444c <__libc_init_array+0x24>
 8004438:	4d0b      	ldr	r5, [pc, #44]	; (8004468 <__libc_init_array+0x40>)
 800443a:	4c0c      	ldr	r4, [pc, #48]	; (800446c <__libc_init_array+0x44>)
 800443c:	f000 f820 	bl	8004480 <_init>
 8004440:	1b64      	subs	r4, r4, r5
 8004442:	10a4      	asrs	r4, r4, #2
 8004444:	2600      	movs	r6, #0
 8004446:	42a6      	cmp	r6, r4
 8004448:	d105      	bne.n	8004456 <__libc_init_array+0x2e>
 800444a:	bd70      	pop	{r4, r5, r6, pc}
 800444c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004450:	4798      	blx	r3
 8004452:	3601      	adds	r6, #1
 8004454:	e7ee      	b.n	8004434 <__libc_init_array+0xc>
 8004456:	f855 3b04 	ldr.w	r3, [r5], #4
 800445a:	4798      	blx	r3
 800445c:	3601      	adds	r6, #1
 800445e:	e7f2      	b.n	8004446 <__libc_init_array+0x1e>
 8004460:	080044d8 	.word	0x080044d8
 8004464:	080044d8 	.word	0x080044d8
 8004468:	080044d8 	.word	0x080044d8
 800446c:	080044dc 	.word	0x080044dc

08004470 <memset>:
 8004470:	4402      	add	r2, r0
 8004472:	4603      	mov	r3, r0
 8004474:	4293      	cmp	r3, r2
 8004476:	d100      	bne.n	800447a <memset+0xa>
 8004478:	4770      	bx	lr
 800447a:	f803 1b01 	strb.w	r1, [r3], #1
 800447e:	e7f9      	b.n	8004474 <memset+0x4>

08004480 <_init>:
 8004480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004482:	bf00      	nop
 8004484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004486:	bc08      	pop	{r3}
 8004488:	469e      	mov	lr, r3
 800448a:	4770      	bx	lr

0800448c <_fini>:
 800448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448e:	bf00      	nop
 8004490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004492:	bc08      	pop	{r3}
 8004494:	469e      	mov	lr, r3
 8004496:	4770      	bx	lr
