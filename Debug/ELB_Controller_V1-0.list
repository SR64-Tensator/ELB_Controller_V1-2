
ELB_Controller_V1-0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007028  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  080071b8  080071b8  000171b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076a4  080076a4  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  080076a4  080076a4  000176a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076ac  080076ac  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076ac  080076ac  000176ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076b0  080076b0  000176b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  080076b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c4  2**0
                  CONTENTS
 10 .bss          000002a8  200000c4  200000c4  000200c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000036c  2000036c  000200c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000af45  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018e1  00000000  00000000  0002b039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f8  00000000  00000000  0002c920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000860  00000000  00000000  0002d218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ef96  00000000  00000000  0002da78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b3f2  00000000  00000000  0004ca0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ba8db  00000000  00000000  00057e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001126db  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002854  00000000  00000000  0011272c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c4 	.word	0x200000c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080071a0 	.word	0x080071a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c8 	.word	0x200000c8
 80001cc:	080071a0 	.word	0x080071a0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <EdgeLED_Color.0>:
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */


void EdgeLED_Color(uint8_t Button_Number, uint8_t Green, uint8_t Red, uint8_t Blue, uint8_t *Packet)
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	4604      	mov	r4, r0
 800058c:	4608      	mov	r0, r1
 800058e:	4611      	mov	r1, r2
 8000590:	461a      	mov	r2, r3
 8000592:	4623      	mov	r3, r4
 8000594:	71fb      	strb	r3, [r7, #7]
 8000596:	4603      	mov	r3, r0
 8000598:	71bb      	strb	r3, [r7, #6]
 800059a:	460b      	mov	r3, r1
 800059c:	717b      	strb	r3, [r7, #5]
 800059e:	4613      	mov	r3, r2
 80005a0:	713b      	strb	r3, [r7, #4]
 80005a2:	f8c7 c000 	str.w	ip, [r7]
	//Packet[0]=Button_Number;
	Packet[0]=0;
 80005a6:	69bb      	ldr	r3, [r7, #24]
 80005a8:	2200      	movs	r2, #0
 80005aa:	701a      	strb	r2, [r3, #0]
	Packet[1]=Green;
 80005ac:	69bb      	ldr	r3, [r7, #24]
 80005ae:	3301      	adds	r3, #1
 80005b0:	79ba      	ldrb	r2, [r7, #6]
 80005b2:	701a      	strb	r2, [r3, #0]
	Packet[2]=Red;
 80005b4:	69bb      	ldr	r3, [r7, #24]
 80005b6:	3302      	adds	r3, #2
 80005b8:	797a      	ldrb	r2, [r7, #5]
 80005ba:	701a      	strb	r2, [r3, #0]
	Packet[3]=Blue;
 80005bc:	69bb      	ldr	r3, [r7, #24]
 80005be:	3303      	adds	r3, #3
 80005c0:	793a      	ldrb	r2, [r7, #4]
 80005c2:	701a      	strb	r2, [r3, #0]

	nRF24_Transmit(Sel_EL_Module, Packet, 20);
 80005c4:	2214      	movs	r2, #20
 80005c6:	69b9      	ldr	r1, [r7, #24]
 80005c8:	2005      	movs	r0, #5
 80005ca:	f004 fcb3 	bl	8004f34 <nRF24_Transmit>
	nRF24_Transmit_Report(Sel_EL_Module);
 80005ce:	2005      	movs	r0, #5
 80005d0:	f005 fb4c 	bl	8005c6c <nRF24_Transmit_Report>
}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd90      	pop	{r4, r7, pc}

080005dc <main>:
{
 80005dc:	b5b0      	push	{r4, r5, r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af04      	add	r7, sp, #16
int main(void)
 80005e2:	f107 0318 	add.w	r3, r7, #24
 80005e6:	603b      	str	r3, [r7, #0]
  HAL_Init();
 80005e8:	f001 f8b2 	bl	8001750 <HAL_Init>
  SystemClock_Config();
 80005ec:	f000 fc70 	bl	8000ed0 <SystemClock_Config>
  MX_GPIO_Init();
 80005f0:	f000 fd98 	bl	8001124 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005f4:	f000 fcca 	bl	8000f8c <MX_SPI1_Init>
  MX_SPI2_Init();
 80005f8:	f000 fcfe 	bl	8000ff8 <MX_SPI2_Init>
  MX_SPI3_Init();
 80005fc:	f000 fd32 	bl	8001064 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8000600:	f000 fd66 	bl	80010d0 <MX_USART2_UART_Init>

  uint8_t count = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 10; i++)
 8000608:	2300      	movs	r3, #0
 800060a:	71bb      	strb	r3, [r7, #6]
 800060c:	e029      	b.n	8000662 <main+0x86>
  {
	  for (uint8_t j = 0; j < 4; j++)
 800060e:	2300      	movs	r3, #0
 8000610:	717b      	strb	r3, [r7, #5]
 8000612:	e020      	b.n	8000656 <main+0x7a>
	  {
		  for (uint8_t k = 0; k < 6; k++)
 8000614:	2300      	movs	r3, #0
 8000616:	713b      	strb	r3, [r7, #4]
 8000618:	e017      	b.n	800064a <main+0x6e>
		  {
			  Cat_Mod_Pipe[i][j][k] = count++;
 800061a:	79f9      	ldrb	r1, [r7, #7]
 800061c:	1c4b      	adds	r3, r1, #1
 800061e:	71fb      	strb	r3, [r7, #7]
 8000620:	79b8      	ldrb	r0, [r7, #6]
 8000622:	797b      	ldrb	r3, [r7, #5]
 8000624:	793c      	ldrb	r4, [r7, #4]
 8000626:	4d96      	ldr	r5, [pc, #600]	; (8000880 <main+0x2a4>)
 8000628:	461a      	mov	r2, r3
 800062a:	0052      	lsls	r2, r2, #1
 800062c:	441a      	add	r2, r3
 800062e:	0053      	lsls	r3, r2, #1
 8000630:	461a      	mov	r2, r3
 8000632:	4603      	mov	r3, r0
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	4403      	add	r3, r0
 8000638:	00db      	lsls	r3, r3, #3
 800063a:	4413      	add	r3, r2
 800063c:	442b      	add	r3, r5
 800063e:	4423      	add	r3, r4
 8000640:	460a      	mov	r2, r1
 8000642:	701a      	strb	r2, [r3, #0]
		  for (uint8_t k = 0; k < 6; k++)
 8000644:	793b      	ldrb	r3, [r7, #4]
 8000646:	3301      	adds	r3, #1
 8000648:	713b      	strb	r3, [r7, #4]
 800064a:	793b      	ldrb	r3, [r7, #4]
 800064c:	2b05      	cmp	r3, #5
 800064e:	d9e4      	bls.n	800061a <main+0x3e>
	  for (uint8_t j = 0; j < 4; j++)
 8000650:	797b      	ldrb	r3, [r7, #5]
 8000652:	3301      	adds	r3, #1
 8000654:	717b      	strb	r3, [r7, #5]
 8000656:	797b      	ldrb	r3, [r7, #5]
 8000658:	2b03      	cmp	r3, #3
 800065a:	d9db      	bls.n	8000614 <main+0x38>
  for (uint8_t i = 0; i < 10; i++)
 800065c:	79bb      	ldrb	r3, [r7, #6]
 800065e:	3301      	adds	r3, #1
 8000660:	71bb      	strb	r3, [r7, #6]
 8000662:	79bb      	ldrb	r3, [r7, #6]
 8000664:	2b09      	cmp	r3, #9
 8000666:	d9d2      	bls.n	800060e <main+0x32>
	      }
	  }
  }

  nRF24_Reset(Sel_B_Module1,nRF24_REG_STATUS);
 8000668:	2107      	movs	r1, #7
 800066a:	2001      	movs	r0, #1
 800066c:	f003 fd52 	bl	8004114 <nRF24_Reset>
  nRF24_Reset(Sel_B_Module2,nRF24_REG_STATUS);
 8000670:	2107      	movs	r1, #7
 8000672:	2002      	movs	r0, #2
 8000674:	f003 fd4e 	bl	8004114 <nRF24_Reset>
  nRF24_Reset(Sel_B_Module3,nRF24_REG_STATUS);
 8000678:	2107      	movs	r1, #7
 800067a:	2003      	movs	r0, #3
 800067c:	f003 fd4a 	bl	8004114 <nRF24_Reset>
  nRF24_Reset(Sel_B_Module4,nRF24_REG_STATUS);
 8000680:	2107      	movs	r1, #7
 8000682:	2004      	movs	r0, #4
 8000684:	f003 fd46 	bl	8004114 <nRF24_Reset>
  nRF24_Reset(Sel_EL_Module,nRF24_REG_STATUS);
 8000688:	2107      	movs	r1, #7
 800068a:	2005      	movs	r0, #5
 800068c:	f003 fd42 	bl	8004114 <nRF24_Reset>

  nRF24_Module_Setup(Sel_B_Module1, Receiver_Mode_noAA_noCRC,
 8000690:	4b7c      	ldr	r3, [pc, #496]	; (8000884 <main+0x2a8>)
 8000692:	781a      	ldrb	r2, [r3, #0]
 8000694:	4b7c      	ldr	r3, [pc, #496]	; (8000888 <main+0x2ac>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	9302      	str	r3, [sp, #8]
 800069a:	2303      	movs	r3, #3
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	4b7b      	ldr	r3, [pc, #492]	; (800088c <main+0x2b0>)
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	4b7b      	ldr	r3, [pc, #492]	; (8000890 <main+0x2b4>)
 80006a4:	2102      	movs	r1, #2
 80006a6:	2001      	movs	r0, #1
 80006a8:	f003 fdb6 	bl	8004218 <nRF24_Module_Setup>
		  RF_Channel_Module1, TxAddr_B_Module1, RxAddr_B_Module1,
		  MBPS1_0dBm, Packet_Size);
  nRF24_Power(Sel_B_Module1, Power_Up);
 80006ac:	2101      	movs	r1, #1
 80006ae:	2001      	movs	r0, #1
 80006b0:	f005 fa08 	bl	8005ac4 <nRF24_Power>
  nRF24_CE_Enable(Sel_B_Module1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f003 fa0b 	bl	8003ad0 <nRF24_CE_Enable>
  nRF24_Module_Setup(Sel_B_Module2, Receiver_Mode_noAA_noCRC,
 80006ba:	4b76      	ldr	r3, [pc, #472]	; (8000894 <main+0x2b8>)
 80006bc:	781a      	ldrb	r2, [r3, #0]
 80006be:	4b72      	ldr	r3, [pc, #456]	; (8000888 <main+0x2ac>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	9302      	str	r3, [sp, #8]
 80006c4:	2303      	movs	r3, #3
 80006c6:	9301      	str	r3, [sp, #4]
 80006c8:	4b73      	ldr	r3, [pc, #460]	; (8000898 <main+0x2bc>)
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	4b73      	ldr	r3, [pc, #460]	; (800089c <main+0x2c0>)
 80006ce:	2102      	movs	r1, #2
 80006d0:	2002      	movs	r0, #2
 80006d2:	f003 fda1 	bl	8004218 <nRF24_Module_Setup>
		  RF_Channel_Module2, TxAddr_B_Module2, RxAddr_B_Module2,
		  MBPS1_0dBm, Packet_Size);
  nRF24_Power(Sel_B_Module2, Power_Up);
 80006d6:	2101      	movs	r1, #1
 80006d8:	2002      	movs	r0, #2
 80006da:	f005 f9f3 	bl	8005ac4 <nRF24_Power>
  nRF24_CE_Enable(Sel_B_Module2);
 80006de:	2002      	movs	r0, #2
 80006e0:	f003 f9f6 	bl	8003ad0 <nRF24_CE_Enable>
  nRF24_Module_Setup(Sel_B_Module3, Receiver_Mode_noAA_noCRC,
 80006e4:	4b6e      	ldr	r3, [pc, #440]	; (80008a0 <main+0x2c4>)
 80006e6:	781a      	ldrb	r2, [r3, #0]
 80006e8:	4b67      	ldr	r3, [pc, #412]	; (8000888 <main+0x2ac>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	9302      	str	r3, [sp, #8]
 80006ee:	2303      	movs	r3, #3
 80006f0:	9301      	str	r3, [sp, #4]
 80006f2:	4b6c      	ldr	r3, [pc, #432]	; (80008a4 <main+0x2c8>)
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	4b6c      	ldr	r3, [pc, #432]	; (80008a8 <main+0x2cc>)
 80006f8:	2102      	movs	r1, #2
 80006fa:	2003      	movs	r0, #3
 80006fc:	f003 fd8c 	bl	8004218 <nRF24_Module_Setup>
		  RF_Channel_Module3, TxAddr_B_Module3, RxAddr_B_Module3,
		  MBPS1_0dBm, Packet_Size);
  nRF24_Power(Sel_B_Module3, Power_Up);
 8000700:	2101      	movs	r1, #1
 8000702:	2003      	movs	r0, #3
 8000704:	f005 f9de 	bl	8005ac4 <nRF24_Power>
  nRF24_CE_Enable(Sel_B_Module3);
 8000708:	2003      	movs	r0, #3
 800070a:	f003 f9e1 	bl	8003ad0 <nRF24_CE_Enable>
  nRF24_Module_Setup(Sel_B_Module4, Receiver_Mode_noAA_noCRC,
 800070e:	4b67      	ldr	r3, [pc, #412]	; (80008ac <main+0x2d0>)
 8000710:	781a      	ldrb	r2, [r3, #0]
 8000712:	4b5d      	ldr	r3, [pc, #372]	; (8000888 <main+0x2ac>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	9302      	str	r3, [sp, #8]
 8000718:	2303      	movs	r3, #3
 800071a:	9301      	str	r3, [sp, #4]
 800071c:	4b64      	ldr	r3, [pc, #400]	; (80008b0 <main+0x2d4>)
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	4b64      	ldr	r3, [pc, #400]	; (80008b4 <main+0x2d8>)
 8000722:	2102      	movs	r1, #2
 8000724:	2004      	movs	r0, #4
 8000726:	f003 fd77 	bl	8004218 <nRF24_Module_Setup>
		  RF_Channel_Module4, TxAddr_B_Module4, RxAddr_B_Module4,
		  MBPS1_0dBm, Packet_Size);
  nRF24_Power(Sel_B_Module4, Power_Up);
 800072a:	2101      	movs	r1, #1
 800072c:	2004      	movs	r0, #4
 800072e:	f005 f9c9 	bl	8005ac4 <nRF24_Power>
  nRF24_CE_Enable(Sel_B_Module4);
 8000732:	2004      	movs	r0, #4
 8000734:	f003 f9cc 	bl	8003ad0 <nRF24_CE_Enable>
  nRF24_Module_Setup(Sel_EL_Module, Transmitter_Mode_noAA_noCRC,
 8000738:	4b5f      	ldr	r3, [pc, #380]	; (80008b8 <main+0x2dc>)
 800073a:	781a      	ldrb	r2, [r3, #0]
 800073c:	4b52      	ldr	r3, [pc, #328]	; (8000888 <main+0x2ac>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	9302      	str	r3, [sp, #8]
 8000742:	2303      	movs	r3, #3
 8000744:	9301      	str	r3, [sp, #4]
 8000746:	4b5d      	ldr	r3, [pc, #372]	; (80008bc <main+0x2e0>)
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	4b5d      	ldr	r3, [pc, #372]	; (80008c0 <main+0x2e4>)
 800074c:	2105      	movs	r1, #5
 800074e:	2005      	movs	r0, #5
 8000750:	f003 fd62 	bl	8004218 <nRF24_Module_Setup>
		  RF_Channel_EL_Module, TxAddr_EL_Module, RxAddr_EL_Module,
		  MBPS1_0dBm, Packet_Size);
  nRF24_Power(Sel_EL_Module, Power_Up);
 8000754:	2101      	movs	r1, #1
 8000756:	2005      	movs	r0, #5
 8000758:	f005 f9b4 	bl	8005ac4 <nRF24_Power>
  nRF24_CE_Enable(Sel_EL_Module);
 800075c:	2005      	movs	r0, #5
 800075e:	f003 f9b7 	bl	8003ad0 <nRF24_CE_Enable>

  nRF24_Register_Display(Sel_B_Module1);
 8000762:	2001      	movs	r0, #1
 8000764:	f005 fe3e 	bl	80063e4 <nRF24_Register_Display>
  nRF24_Register_Display(Sel_B_Module2);
 8000768:	2002      	movs	r0, #2
 800076a:	f005 fe3b 	bl	80063e4 <nRF24_Register_Display>
  nRF24_Register_Display(Sel_B_Module3);
 800076e:	2003      	movs	r0, #3
 8000770:	f005 fe38 	bl	80063e4 <nRF24_Register_Display>
  nRF24_Register_Display(Sel_B_Module4);
 8000774:	2004      	movs	r0, #4
 8000776:	f005 fe35 	bl	80063e4 <nRF24_Register_Display>
  nRF24_Register_Display(Sel_EL_Module);
 800077a:	2005      	movs	r0, #5
 800077c:	f005 fe32 	bl	80063e4 <nRF24_Register_Display>
			  break;
		  default:
			  break;
		  }
	  }*/
	  Pipe_Num = isDataAvailable(Sel_B_Module1);
 8000780:	2001      	movs	r0, #1
 8000782:	f004 fdcd 	bl	8005320 <isDataAvailable>
 8000786:	4603      	mov	r3, r0
 8000788:	461a      	mov	r2, r3
 800078a:	4b4e      	ldr	r3, [pc, #312]	; (80008c4 <main+0x2e8>)
 800078c:	701a      	strb	r2, [r3, #0]
	  if ((Pipe_Num >= 0) && (Pipe_Num < 6))
 800078e:	4b4d      	ldr	r3, [pc, #308]	; (80008c4 <main+0x2e8>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b05      	cmp	r3, #5
 8000794:	f200 80b5 	bhi.w	8000902 <main+0x326>
	  {
		  nRF24_Receive_Report(Sel_B_Module1);
 8000798:	2001      	movs	r0, #1
 800079a:	f005 fd17 	bl	80061cc <nRF24_Receive_Report>
		  nRF24_Receive(Sel_B_Module1, Received_Data, Packet_Size);
 800079e:	4b3a      	ldr	r3, [pc, #232]	; (8000888 <main+0x2ac>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	461a      	mov	r2, r3
 80007a4:	4948      	ldr	r1, [pc, #288]	; (80008c8 <main+0x2ec>)
 80007a6:	2001      	movs	r0, #1
 80007a8:	f004 feac 	bl	8005504 <nRF24_Receive>
		  HAL_Delay(1);
 80007ac:	2001      	movs	r0, #1
 80007ae:	f001 f841 	bl	8001834 <HAL_Delay>
		  HAL_UART_Transmit(&huart2, (uint8_t*)"Module1 Data:",13, 1000);
 80007b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b6:	220d      	movs	r2, #13
 80007b8:	4944      	ldr	r1, [pc, #272]	; (80008cc <main+0x2f0>)
 80007ba:	4845      	ldr	r0, [pc, #276]	; (80008d0 <main+0x2f4>)
 80007bc:	f002 fd97 	bl	80032ee <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, Received_Data, Packet_Size, 1000);
 80007c0:	4b31      	ldr	r3, [pc, #196]	; (8000888 <main+0x2ac>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ca:	493f      	ldr	r1, [pc, #252]	; (80008c8 <main+0x2ec>)
 80007cc:	4840      	ldr	r0, [pc, #256]	; (80008d0 <main+0x2f4>)
 80007ce:	f002 fd8e 	bl	80032ee <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, (uint8_t*)"\n**********************\n\n",25, 100);
 80007d2:	2364      	movs	r3, #100	; 0x64
 80007d4:	2219      	movs	r2, #25
 80007d6:	493f      	ldr	r1, [pc, #252]	; (80008d4 <main+0x2f8>)
 80007d8:	483d      	ldr	r0, [pc, #244]	; (80008d0 <main+0x2f4>)
 80007da:	f002 fd88 	bl	80032ee <HAL_UART_Transmit>
		  switch(Pipe_Num)
 80007de:	4b39      	ldr	r3, [pc, #228]	; (80008c4 <main+0x2e8>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b05      	cmp	r3, #5
 80007e4:	d826      	bhi.n	8000834 <main+0x258>
 80007e6:	a201      	add	r2, pc, #4	; (adr r2, 80007ec <main+0x210>)
 80007e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ec:	08000805 	.word	0x08000805
 80007f0:	0800080d 	.word	0x0800080d
 80007f4:	08000815 	.word	0x08000815
 80007f8:	0800081d 	.word	0x0800081d
 80007fc:	08000825 	.word	0x08000825
 8000800:	0800082d 	.word	0x0800082d
		  {
		  case 0:
			  Rec_Module_Number = 0;
 8000804:	4b34      	ldr	r3, [pc, #208]	; (80008d8 <main+0x2fc>)
 8000806:	2200      	movs	r2, #0
 8000808:	701a      	strb	r2, [r3, #0]
			  break;
 800080a:	e014      	b.n	8000836 <main+0x25a>
		  case 1:
			  Rec_Module_Number = 1;
 800080c:	4b32      	ldr	r3, [pc, #200]	; (80008d8 <main+0x2fc>)
 800080e:	2201      	movs	r2, #1
 8000810:	701a      	strb	r2, [r3, #0]
			  break;
 8000812:	e010      	b.n	8000836 <main+0x25a>
		  case 2:
			  Rec_Module_Number = 2;
 8000814:	4b30      	ldr	r3, [pc, #192]	; (80008d8 <main+0x2fc>)
 8000816:	2202      	movs	r2, #2
 8000818:	701a      	strb	r2, [r3, #0]
			  break;
 800081a:	e00c      	b.n	8000836 <main+0x25a>
		  case 3:
			  Rec_Module_Number = 3;
 800081c:	4b2e      	ldr	r3, [pc, #184]	; (80008d8 <main+0x2fc>)
 800081e:	2203      	movs	r2, #3
 8000820:	701a      	strb	r2, [r3, #0]
			  break;
 8000822:	e008      	b.n	8000836 <main+0x25a>
		  case 4:
			  Rec_Module_Number = 4;
 8000824:	4b2c      	ldr	r3, [pc, #176]	; (80008d8 <main+0x2fc>)
 8000826:	2204      	movs	r2, #4
 8000828:	701a      	strb	r2, [r3, #0]
			  break;
 800082a:	e004      	b.n	8000836 <main+0x25a>
		  case 5:
			  Rec_Module_Number = 5;
 800082c:	4b2a      	ldr	r3, [pc, #168]	; (80008d8 <main+0x2fc>)
 800082e:	2205      	movs	r2, #5
 8000830:	701a      	strb	r2, [r3, #0]
			  break;
 8000832:	e000      	b.n	8000836 <main+0x25a>
		  default:
			  break;
 8000834:	bf00      	nop
		  }

		  if (strncmp((char*)Received_Data, "Key1", 4) == 0)
 8000836:	2204      	movs	r2, #4
 8000838:	4928      	ldr	r1, [pc, #160]	; (80008dc <main+0x300>)
 800083a:	4823      	ldr	r0, [pc, #140]	; (80008c8 <main+0x2ec>)
 800083c:	f006 f84e 	bl	80068dc <strncmp>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d103      	bne.n	800084e <main+0x272>
		  {
			  Button_Pressed=1;
 8000846:	4b26      	ldr	r3, [pc, #152]	; (80008e0 <main+0x304>)
 8000848:	2201      	movs	r2, #1
 800084a:	701a      	strb	r2, [r3, #0]
 800084c:	e059      	b.n	8000902 <main+0x326>
		  } else if (strncmp((char*)Received_Data, "Key2", 4) == 0)
 800084e:	2204      	movs	r2, #4
 8000850:	4924      	ldr	r1, [pc, #144]	; (80008e4 <main+0x308>)
 8000852:	481d      	ldr	r0, [pc, #116]	; (80008c8 <main+0x2ec>)
 8000854:	f006 f842 	bl	80068dc <strncmp>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d103      	bne.n	8000866 <main+0x28a>
		  {
			  Button_Pressed=2;
 800085e:	4b20      	ldr	r3, [pc, #128]	; (80008e0 <main+0x304>)
 8000860:	2202      	movs	r2, #2
 8000862:	701a      	strb	r2, [r3, #0]
 8000864:	e04d      	b.n	8000902 <main+0x326>
		  } else if (strncmp((char*)Received_Data, "Key3", 4) == 0)
 8000866:	2204      	movs	r2, #4
 8000868:	491f      	ldr	r1, [pc, #124]	; (80008e8 <main+0x30c>)
 800086a:	4817      	ldr	r0, [pc, #92]	; (80008c8 <main+0x2ec>)
 800086c:	f006 f836 	bl	80068dc <strncmp>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d13a      	bne.n	80008ec <main+0x310>
		  {
			  Button_Pressed=3;
 8000876:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <main+0x304>)
 8000878:	2203      	movs	r2, #3
 800087a:	701a      	strb	r2, [r3, #0]
 800087c:	e041      	b.n	8000902 <main+0x326>
 800087e:	bf00      	nop
 8000880:	2000022c 	.word	0x2000022c
 8000884:	2000004e 	.word	0x2000004e
 8000888:	2000004d 	.word	0x2000004d
 800088c:	20000008 	.word	0x20000008
 8000890:	20000000 	.word	0x20000000
 8000894:	2000004f 	.word	0x2000004f
 8000898:	20000018 	.word	0x20000018
 800089c:	20000010 	.word	0x20000010
 80008a0:	20000050 	.word	0x20000050
 80008a4:	20000028 	.word	0x20000028
 80008a8:	20000020 	.word	0x20000020
 80008ac:	20000051 	.word	0x20000051
 80008b0:	20000038 	.word	0x20000038
 80008b4:	20000030 	.word	0x20000030
 80008b8:	20000052 	.word	0x20000052
 80008bc:	20000048 	.word	0x20000048
 80008c0:	20000040 	.word	0x20000040
 80008c4:	20000350 	.word	0x20000350
 80008c8:	2000031c 	.word	0x2000031c
 80008cc:	080071b8 	.word	0x080071b8
 80008d0:	200001e8 	.word	0x200001e8
 80008d4:	080071c8 	.word	0x080071c8
 80008d8:	20000351 	.word	0x20000351
 80008dc:	080071e4 	.word	0x080071e4
 80008e0:	20000352 	.word	0x20000352
 80008e4:	080071ec 	.word	0x080071ec
 80008e8:	080071f4 	.word	0x080071f4
		  } else if (strncmp((char*)Received_Data, "Key4", 4) == 0)
 80008ec:	2204      	movs	r2, #4
 80008ee:	49b3      	ldr	r1, [pc, #716]	; (8000bbc <main+0x5e0>)
 80008f0:	48b3      	ldr	r0, [pc, #716]	; (8000bc0 <main+0x5e4>)
 80008f2:	f005 fff3 	bl	80068dc <strncmp>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d102      	bne.n	8000902 <main+0x326>
		  {
			  Button_Pressed=4;
 80008fc:	4bb1      	ldr	r3, [pc, #708]	; (8000bc4 <main+0x5e8>)
 80008fe:	2204      	movs	r2, #4
 8000900:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  Pipe_Num = isDataAvailable(Sel_B_Module2);
 8000902:	2002      	movs	r0, #2
 8000904:	f004 fd0c 	bl	8005320 <isDataAvailable>
 8000908:	4603      	mov	r3, r0
 800090a:	461a      	mov	r2, r3
 800090c:	4bae      	ldr	r3, [pc, #696]	; (8000bc8 <main+0x5ec>)
 800090e:	701a      	strb	r2, [r3, #0]
	  if ((Pipe_Num >= 0) && (Pipe_Num < 6))
 8000910:	4bad      	ldr	r3, [pc, #692]	; (8000bc8 <main+0x5ec>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b05      	cmp	r3, #5
 8000916:	d87d      	bhi.n	8000a14 <main+0x438>
	  {
		  nRF24_Receive_Report(Sel_B_Module2);
 8000918:	2002      	movs	r0, #2
 800091a:	f005 fc57 	bl	80061cc <nRF24_Receive_Report>
		  nRF24_Receive(Sel_B_Module2, Received_Data, Packet_Size);
 800091e:	4bab      	ldr	r3, [pc, #684]	; (8000bcc <main+0x5f0>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	461a      	mov	r2, r3
 8000924:	49a6      	ldr	r1, [pc, #664]	; (8000bc0 <main+0x5e4>)
 8000926:	2002      	movs	r0, #2
 8000928:	f004 fdec 	bl	8005504 <nRF24_Receive>
		  HAL_Delay(1);
 800092c:	2001      	movs	r0, #1
 800092e:	f000 ff81 	bl	8001834 <HAL_Delay>
		  HAL_UART_Transmit(&huart2, (uint8_t*)"Module2 Data:",13, 1000);
 8000932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000936:	220d      	movs	r2, #13
 8000938:	49a5      	ldr	r1, [pc, #660]	; (8000bd0 <main+0x5f4>)
 800093a:	48a6      	ldr	r0, [pc, #664]	; (8000bd4 <main+0x5f8>)
 800093c:	f002 fcd7 	bl	80032ee <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, Received_Data, Packet_Size, 1000);
 8000940:	4ba2      	ldr	r3, [pc, #648]	; (8000bcc <main+0x5f0>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b29a      	uxth	r2, r3
 8000946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094a:	499d      	ldr	r1, [pc, #628]	; (8000bc0 <main+0x5e4>)
 800094c:	48a1      	ldr	r0, [pc, #644]	; (8000bd4 <main+0x5f8>)
 800094e:	f002 fcce 	bl	80032ee <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, (uint8_t*)"\n**********************\n\n",25, 100);
 8000952:	2364      	movs	r3, #100	; 0x64
 8000954:	2219      	movs	r2, #25
 8000956:	49a0      	ldr	r1, [pc, #640]	; (8000bd8 <main+0x5fc>)
 8000958:	489e      	ldr	r0, [pc, #632]	; (8000bd4 <main+0x5f8>)
 800095a:	f002 fcc8 	bl	80032ee <HAL_UART_Transmit>
		  switch(Pipe_Num)
 800095e:	4b9a      	ldr	r3, [pc, #616]	; (8000bc8 <main+0x5ec>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b05      	cmp	r3, #5
 8000964:	d826      	bhi.n	80009b4 <main+0x3d8>
 8000966:	a201      	add	r2, pc, #4	; (adr r2, 800096c <main+0x390>)
 8000968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800096c:	08000985 	.word	0x08000985
 8000970:	0800098d 	.word	0x0800098d
 8000974:	08000995 	.word	0x08000995
 8000978:	0800099d 	.word	0x0800099d
 800097c:	080009a5 	.word	0x080009a5
 8000980:	080009ad 	.word	0x080009ad
		  {
		  case 0:
			  Rec_Module_Number = 6;
 8000984:	4b95      	ldr	r3, [pc, #596]	; (8000bdc <main+0x600>)
 8000986:	2206      	movs	r2, #6
 8000988:	701a      	strb	r2, [r3, #0]
			  break;
 800098a:	e014      	b.n	80009b6 <main+0x3da>
		  case 1:
			  Rec_Module_Number = 7;
 800098c:	4b93      	ldr	r3, [pc, #588]	; (8000bdc <main+0x600>)
 800098e:	2207      	movs	r2, #7
 8000990:	701a      	strb	r2, [r3, #0]
			  break;
 8000992:	e010      	b.n	80009b6 <main+0x3da>
		  case 2:
			  Rec_Module_Number = 8;
 8000994:	4b91      	ldr	r3, [pc, #580]	; (8000bdc <main+0x600>)
 8000996:	2208      	movs	r2, #8
 8000998:	701a      	strb	r2, [r3, #0]
			  break;
 800099a:	e00c      	b.n	80009b6 <main+0x3da>
		  case 3:
			  Rec_Module_Number = 9;
 800099c:	4b8f      	ldr	r3, [pc, #572]	; (8000bdc <main+0x600>)
 800099e:	2209      	movs	r2, #9
 80009a0:	701a      	strb	r2, [r3, #0]
			  break;
 80009a2:	e008      	b.n	80009b6 <main+0x3da>
		  case 4:
			  Rec_Module_Number = 10;
 80009a4:	4b8d      	ldr	r3, [pc, #564]	; (8000bdc <main+0x600>)
 80009a6:	220a      	movs	r2, #10
 80009a8:	701a      	strb	r2, [r3, #0]
			  break;
 80009aa:	e004      	b.n	80009b6 <main+0x3da>
		  case 5:
			  Rec_Module_Number = 11;
 80009ac:	4b8b      	ldr	r3, [pc, #556]	; (8000bdc <main+0x600>)
 80009ae:	220b      	movs	r2, #11
 80009b0:	701a      	strb	r2, [r3, #0]
			  break;
 80009b2:	e000      	b.n	80009b6 <main+0x3da>
		  default:
			  break;
 80009b4:	bf00      	nop
		  }

		  if (strncmp((char*)Received_Data, "Key1", 4) == 0)
 80009b6:	2204      	movs	r2, #4
 80009b8:	4989      	ldr	r1, [pc, #548]	; (8000be0 <main+0x604>)
 80009ba:	4881      	ldr	r0, [pc, #516]	; (8000bc0 <main+0x5e4>)
 80009bc:	f005 ff8e 	bl	80068dc <strncmp>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d103      	bne.n	80009ce <main+0x3f2>
		  {
			  Button_Pressed=1;
 80009c6:	4b7f      	ldr	r3, [pc, #508]	; (8000bc4 <main+0x5e8>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
 80009cc:	e022      	b.n	8000a14 <main+0x438>
		  } else if (strncmp((char*)Received_Data, "Key2", 4) == 0)
 80009ce:	2204      	movs	r2, #4
 80009d0:	4984      	ldr	r1, [pc, #528]	; (8000be4 <main+0x608>)
 80009d2:	487b      	ldr	r0, [pc, #492]	; (8000bc0 <main+0x5e4>)
 80009d4:	f005 ff82 	bl	80068dc <strncmp>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d103      	bne.n	80009e6 <main+0x40a>
		  {
			  Button_Pressed=2;
 80009de:	4b79      	ldr	r3, [pc, #484]	; (8000bc4 <main+0x5e8>)
 80009e0:	2202      	movs	r2, #2
 80009e2:	701a      	strb	r2, [r3, #0]
 80009e4:	e016      	b.n	8000a14 <main+0x438>
		  } else if (strncmp((char*)Received_Data, "Key3", 4) == 0)
 80009e6:	2204      	movs	r2, #4
 80009e8:	497f      	ldr	r1, [pc, #508]	; (8000be8 <main+0x60c>)
 80009ea:	4875      	ldr	r0, [pc, #468]	; (8000bc0 <main+0x5e4>)
 80009ec:	f005 ff76 	bl	80068dc <strncmp>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d103      	bne.n	80009fe <main+0x422>
		  {
			  Button_Pressed=3;
 80009f6:	4b73      	ldr	r3, [pc, #460]	; (8000bc4 <main+0x5e8>)
 80009f8:	2203      	movs	r2, #3
 80009fa:	701a      	strb	r2, [r3, #0]
 80009fc:	e00a      	b.n	8000a14 <main+0x438>
		  } else if (strncmp((char*)Received_Data, "Key4", 4) == 0)
 80009fe:	2204      	movs	r2, #4
 8000a00:	496e      	ldr	r1, [pc, #440]	; (8000bbc <main+0x5e0>)
 8000a02:	486f      	ldr	r0, [pc, #444]	; (8000bc0 <main+0x5e4>)
 8000a04:	f005 ff6a 	bl	80068dc <strncmp>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d102      	bne.n	8000a14 <main+0x438>
		  {
			  Button_Pressed=4;
 8000a0e:	4b6d      	ldr	r3, [pc, #436]	; (8000bc4 <main+0x5e8>)
 8000a10:	2204      	movs	r2, #4
 8000a12:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  Pipe_Num = isDataAvailable(Sel_B_Module3);
 8000a14:	2003      	movs	r0, #3
 8000a16:	f004 fc83 	bl	8005320 <isDataAvailable>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b6a      	ldr	r3, [pc, #424]	; (8000bc8 <main+0x5ec>)
 8000a20:	701a      	strb	r2, [r3, #0]
	  if ((Pipe_Num >= 0) && (Pipe_Num < 6))
 8000a22:	4b69      	ldr	r3, [pc, #420]	; (8000bc8 <main+0x5ec>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b05      	cmp	r3, #5
 8000a28:	d87e      	bhi.n	8000b28 <main+0x54c>
	  {
		  nRF24_Receive_Report(Sel_B_Module3);
 8000a2a:	2003      	movs	r0, #3
 8000a2c:	f005 fbce 	bl	80061cc <nRF24_Receive_Report>
		  nRF24_Receive(Sel_B_Module3, Received_Data, Packet_Size);
 8000a30:	4b66      	ldr	r3, [pc, #408]	; (8000bcc <main+0x5f0>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	4962      	ldr	r1, [pc, #392]	; (8000bc0 <main+0x5e4>)
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f004 fd63 	bl	8005504 <nRF24_Receive>
		  HAL_Delay(1);
 8000a3e:	2001      	movs	r0, #1
 8000a40:	f000 fef8 	bl	8001834 <HAL_Delay>
		  HAL_UART_Transmit(&huart2, (uint8_t*)"Module3 Data:",13, 1000);
 8000a44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a48:	220d      	movs	r2, #13
 8000a4a:	4968      	ldr	r1, [pc, #416]	; (8000bec <main+0x610>)
 8000a4c:	4861      	ldr	r0, [pc, #388]	; (8000bd4 <main+0x5f8>)
 8000a4e:	f002 fc4e 	bl	80032ee <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, Received_Data, Packet_Size, 1000);
 8000a52:	4b5e      	ldr	r3, [pc, #376]	; (8000bcc <main+0x5f0>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a5c:	4958      	ldr	r1, [pc, #352]	; (8000bc0 <main+0x5e4>)
 8000a5e:	485d      	ldr	r0, [pc, #372]	; (8000bd4 <main+0x5f8>)
 8000a60:	f002 fc45 	bl	80032ee <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, (uint8_t*)"\n**********************\n\n",25, 100);
 8000a64:	2364      	movs	r3, #100	; 0x64
 8000a66:	2219      	movs	r2, #25
 8000a68:	495b      	ldr	r1, [pc, #364]	; (8000bd8 <main+0x5fc>)
 8000a6a:	485a      	ldr	r0, [pc, #360]	; (8000bd4 <main+0x5f8>)
 8000a6c:	f002 fc3f 	bl	80032ee <HAL_UART_Transmit>
		  switch(Pipe_Num)
 8000a70:	4b55      	ldr	r3, [pc, #340]	; (8000bc8 <main+0x5ec>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b05      	cmp	r3, #5
 8000a76:	d827      	bhi.n	8000ac8 <main+0x4ec>
 8000a78:	a201      	add	r2, pc, #4	; (adr r2, 8000a80 <main+0x4a4>)
 8000a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a7e:	bf00      	nop
 8000a80:	08000a99 	.word	0x08000a99
 8000a84:	08000aa1 	.word	0x08000aa1
 8000a88:	08000aa9 	.word	0x08000aa9
 8000a8c:	08000ab1 	.word	0x08000ab1
 8000a90:	08000ab9 	.word	0x08000ab9
 8000a94:	08000ac1 	.word	0x08000ac1
		  {
		  case 0:
			  Rec_Module_Number = 12;
 8000a98:	4b50      	ldr	r3, [pc, #320]	; (8000bdc <main+0x600>)
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	701a      	strb	r2, [r3, #0]
			  break;
 8000a9e:	e014      	b.n	8000aca <main+0x4ee>
		  case 1:
			  Rec_Module_Number = 13;
 8000aa0:	4b4e      	ldr	r3, [pc, #312]	; (8000bdc <main+0x600>)
 8000aa2:	220d      	movs	r2, #13
 8000aa4:	701a      	strb	r2, [r3, #0]
			  break;
 8000aa6:	e010      	b.n	8000aca <main+0x4ee>
		  case 2:
			  Rec_Module_Number = 14;
 8000aa8:	4b4c      	ldr	r3, [pc, #304]	; (8000bdc <main+0x600>)
 8000aaa:	220e      	movs	r2, #14
 8000aac:	701a      	strb	r2, [r3, #0]
			  break;
 8000aae:	e00c      	b.n	8000aca <main+0x4ee>
		  case 3:
			  Rec_Module_Number = 15;
 8000ab0:	4b4a      	ldr	r3, [pc, #296]	; (8000bdc <main+0x600>)
 8000ab2:	220f      	movs	r2, #15
 8000ab4:	701a      	strb	r2, [r3, #0]
			  break;
 8000ab6:	e008      	b.n	8000aca <main+0x4ee>
		  case 4:
			  Rec_Module_Number = 16;
 8000ab8:	4b48      	ldr	r3, [pc, #288]	; (8000bdc <main+0x600>)
 8000aba:	2210      	movs	r2, #16
 8000abc:	701a      	strb	r2, [r3, #0]
			  break;
 8000abe:	e004      	b.n	8000aca <main+0x4ee>
		  case 5:
			  Rec_Module_Number = 17;
 8000ac0:	4b46      	ldr	r3, [pc, #280]	; (8000bdc <main+0x600>)
 8000ac2:	2211      	movs	r2, #17
 8000ac4:	701a      	strb	r2, [r3, #0]
			  break;
 8000ac6:	e000      	b.n	8000aca <main+0x4ee>
		  default:
			  break;
 8000ac8:	bf00      	nop
		  }
		  if (strncmp((char*)Received_Data, "Key1", 4) == 0)
 8000aca:	2204      	movs	r2, #4
 8000acc:	4944      	ldr	r1, [pc, #272]	; (8000be0 <main+0x604>)
 8000ace:	483c      	ldr	r0, [pc, #240]	; (8000bc0 <main+0x5e4>)
 8000ad0:	f005 ff04 	bl	80068dc <strncmp>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d103      	bne.n	8000ae2 <main+0x506>
		  {
			  Button_Pressed=1;
 8000ada:	4b3a      	ldr	r3, [pc, #232]	; (8000bc4 <main+0x5e8>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	701a      	strb	r2, [r3, #0]
 8000ae0:	e022      	b.n	8000b28 <main+0x54c>
		  } else if (strncmp((char*)Received_Data, "Key2", 4) == 0)
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	493f      	ldr	r1, [pc, #252]	; (8000be4 <main+0x608>)
 8000ae6:	4836      	ldr	r0, [pc, #216]	; (8000bc0 <main+0x5e4>)
 8000ae8:	f005 fef8 	bl	80068dc <strncmp>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d103      	bne.n	8000afa <main+0x51e>
		  {
			  Button_Pressed=2;
 8000af2:	4b34      	ldr	r3, [pc, #208]	; (8000bc4 <main+0x5e8>)
 8000af4:	2202      	movs	r2, #2
 8000af6:	701a      	strb	r2, [r3, #0]
 8000af8:	e016      	b.n	8000b28 <main+0x54c>
		  } else if (strncmp((char*)Received_Data, "Key3", 4) == 0)
 8000afa:	2204      	movs	r2, #4
 8000afc:	493a      	ldr	r1, [pc, #232]	; (8000be8 <main+0x60c>)
 8000afe:	4830      	ldr	r0, [pc, #192]	; (8000bc0 <main+0x5e4>)
 8000b00:	f005 feec 	bl	80068dc <strncmp>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d103      	bne.n	8000b12 <main+0x536>
		  {
			  Button_Pressed=3;
 8000b0a:	4b2e      	ldr	r3, [pc, #184]	; (8000bc4 <main+0x5e8>)
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	701a      	strb	r2, [r3, #0]
 8000b10:	e00a      	b.n	8000b28 <main+0x54c>
		  } else if (strncmp((char*)Received_Data, "Key4", 4) == 0)
 8000b12:	2204      	movs	r2, #4
 8000b14:	4929      	ldr	r1, [pc, #164]	; (8000bbc <main+0x5e0>)
 8000b16:	482a      	ldr	r0, [pc, #168]	; (8000bc0 <main+0x5e4>)
 8000b18:	f005 fee0 	bl	80068dc <strncmp>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d102      	bne.n	8000b28 <main+0x54c>
		  {
			  Button_Pressed=4;
 8000b22:	4b28      	ldr	r3, [pc, #160]	; (8000bc4 <main+0x5e8>)
 8000b24:	2204      	movs	r2, #4
 8000b26:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  Pipe_Num = isDataAvailable(Sel_B_Module4);
 8000b28:	2004      	movs	r0, #4
 8000b2a:	f004 fbf9 	bl	8005320 <isDataAvailable>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b25      	ldr	r3, [pc, #148]	; (8000bc8 <main+0x5ec>)
 8000b34:	701a      	strb	r2, [r3, #0]
	  if ((Pipe_Num >= 0) && (Pipe_Num < 6))
 8000b36:	4b24      	ldr	r3, [pc, #144]	; (8000bc8 <main+0x5ec>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b05      	cmp	r3, #5
 8000b3c:	f200 809a 	bhi.w	8000c74 <main+0x698>
	  {
		  nRF24_Receive_Report(Sel_B_Module4);
 8000b40:	2004      	movs	r0, #4
 8000b42:	f005 fb43 	bl	80061cc <nRF24_Receive_Report>
		  nRF24_Receive(Sel_B_Module4, Received_Data, Packet_Size);
 8000b46:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <main+0x5f0>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	491c      	ldr	r1, [pc, #112]	; (8000bc0 <main+0x5e4>)
 8000b4e:	2004      	movs	r0, #4
 8000b50:	f004 fcd8 	bl	8005504 <nRF24_Receive>
		  HAL_Delay(1);
 8000b54:	2001      	movs	r0, #1
 8000b56:	f000 fe6d 	bl	8001834 <HAL_Delay>
		  HAL_UART_Transmit(&huart2, (uint8_t*)"Module4 Data:",13, 1000);
 8000b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5e:	220d      	movs	r2, #13
 8000b60:	4923      	ldr	r1, [pc, #140]	; (8000bf0 <main+0x614>)
 8000b62:	481c      	ldr	r0, [pc, #112]	; (8000bd4 <main+0x5f8>)
 8000b64:	f002 fbc3 	bl	80032ee <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, Received_Data, Packet_Size, 1000);
 8000b68:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <main+0x5f0>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b72:	4913      	ldr	r1, [pc, #76]	; (8000bc0 <main+0x5e4>)
 8000b74:	4817      	ldr	r0, [pc, #92]	; (8000bd4 <main+0x5f8>)
 8000b76:	f002 fbba 	bl	80032ee <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, (uint8_t*)"\n**********************\n\n",25, 100);
 8000b7a:	2364      	movs	r3, #100	; 0x64
 8000b7c:	2219      	movs	r2, #25
 8000b7e:	4916      	ldr	r1, [pc, #88]	; (8000bd8 <main+0x5fc>)
 8000b80:	4814      	ldr	r0, [pc, #80]	; (8000bd4 <main+0x5f8>)
 8000b82:	f002 fbb4 	bl	80032ee <HAL_UART_Transmit>
		  switch(Pipe_Num)
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <main+0x5ec>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b05      	cmp	r3, #5
 8000b8c:	d842      	bhi.n	8000c14 <main+0x638>
 8000b8e:	a201      	add	r2, pc, #4	; (adr r2, 8000b94 <main+0x5b8>)
 8000b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b94:	08000bad 	.word	0x08000bad
 8000b98:	08000bb5 	.word	0x08000bb5
 8000b9c:	08000bf5 	.word	0x08000bf5
 8000ba0:	08000bfd 	.word	0x08000bfd
 8000ba4:	08000c05 	.word	0x08000c05
 8000ba8:	08000c0d 	.word	0x08000c0d
		  {
		  case 0:
			  Rec_Module_Number = 18;
 8000bac:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <main+0x600>)
 8000bae:	2212      	movs	r2, #18
 8000bb0:	701a      	strb	r2, [r3, #0]
			  break;
 8000bb2:	e030      	b.n	8000c16 <main+0x63a>
		  case 1:
			  Rec_Module_Number = 19;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <main+0x600>)
 8000bb6:	2213      	movs	r2, #19
 8000bb8:	701a      	strb	r2, [r3, #0]
			  break;
 8000bba:	e02c      	b.n	8000c16 <main+0x63a>
 8000bbc:	080071fc 	.word	0x080071fc
 8000bc0:	2000031c 	.word	0x2000031c
 8000bc4:	20000352 	.word	0x20000352
 8000bc8:	20000350 	.word	0x20000350
 8000bcc:	2000004d 	.word	0x2000004d
 8000bd0:	08007204 	.word	0x08007204
 8000bd4:	200001e8 	.word	0x200001e8
 8000bd8:	080071c8 	.word	0x080071c8
 8000bdc:	20000351 	.word	0x20000351
 8000be0:	080071e4 	.word	0x080071e4
 8000be4:	080071ec 	.word	0x080071ec
 8000be8:	080071f4 	.word	0x080071f4
 8000bec:	08007214 	.word	0x08007214
 8000bf0:	08007224 	.word	0x08007224
		  case 2:
			  Rec_Module_Number = 20;
 8000bf4:	4bae      	ldr	r3, [pc, #696]	; (8000eb0 <main+0x8d4>)
 8000bf6:	2214      	movs	r2, #20
 8000bf8:	701a      	strb	r2, [r3, #0]
			  break;
 8000bfa:	e00c      	b.n	8000c16 <main+0x63a>
		  case 3:
			  Rec_Module_Number = 21;
 8000bfc:	4bac      	ldr	r3, [pc, #688]	; (8000eb0 <main+0x8d4>)
 8000bfe:	2215      	movs	r2, #21
 8000c00:	701a      	strb	r2, [r3, #0]
			  break;
 8000c02:	e008      	b.n	8000c16 <main+0x63a>
		  case 4:
			  Rec_Module_Number = 22;
 8000c04:	4baa      	ldr	r3, [pc, #680]	; (8000eb0 <main+0x8d4>)
 8000c06:	2216      	movs	r2, #22
 8000c08:	701a      	strb	r2, [r3, #0]
			  break;
 8000c0a:	e004      	b.n	8000c16 <main+0x63a>
		  case 5:
			  Rec_Module_Number = 23;
 8000c0c:	4ba8      	ldr	r3, [pc, #672]	; (8000eb0 <main+0x8d4>)
 8000c0e:	2217      	movs	r2, #23
 8000c10:	701a      	strb	r2, [r3, #0]
			  break;
 8000c12:	e000      	b.n	8000c16 <main+0x63a>
		  default:
			  break;
 8000c14:	bf00      	nop
		  }
		  if (strncmp((char*)Received_Data, "Key1", 4) == 0)
 8000c16:	2204      	movs	r2, #4
 8000c18:	49a6      	ldr	r1, [pc, #664]	; (8000eb4 <main+0x8d8>)
 8000c1a:	48a7      	ldr	r0, [pc, #668]	; (8000eb8 <main+0x8dc>)
 8000c1c:	f005 fe5e 	bl	80068dc <strncmp>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d103      	bne.n	8000c2e <main+0x652>
		  {
			  Button_Pressed=1;
 8000c26:	4ba5      	ldr	r3, [pc, #660]	; (8000ebc <main+0x8e0>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	701a      	strb	r2, [r3, #0]
 8000c2c:	e022      	b.n	8000c74 <main+0x698>
		  } else if (strncmp((char*)Received_Data, "Key2", 4) == 0)
 8000c2e:	2204      	movs	r2, #4
 8000c30:	49a3      	ldr	r1, [pc, #652]	; (8000ec0 <main+0x8e4>)
 8000c32:	48a1      	ldr	r0, [pc, #644]	; (8000eb8 <main+0x8dc>)
 8000c34:	f005 fe52 	bl	80068dc <strncmp>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d103      	bne.n	8000c46 <main+0x66a>
		  {
			  Button_Pressed=2;
 8000c3e:	4b9f      	ldr	r3, [pc, #636]	; (8000ebc <main+0x8e0>)
 8000c40:	2202      	movs	r2, #2
 8000c42:	701a      	strb	r2, [r3, #0]
 8000c44:	e016      	b.n	8000c74 <main+0x698>
		  } else if (strncmp((char*)Received_Data, "Key3", 4) == 0)
 8000c46:	2204      	movs	r2, #4
 8000c48:	499e      	ldr	r1, [pc, #632]	; (8000ec4 <main+0x8e8>)
 8000c4a:	489b      	ldr	r0, [pc, #620]	; (8000eb8 <main+0x8dc>)
 8000c4c:	f005 fe46 	bl	80068dc <strncmp>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d103      	bne.n	8000c5e <main+0x682>
		  {
			  Button_Pressed=3;
 8000c56:	4b99      	ldr	r3, [pc, #612]	; (8000ebc <main+0x8e0>)
 8000c58:	2203      	movs	r2, #3
 8000c5a:	701a      	strb	r2, [r3, #0]
 8000c5c:	e00a      	b.n	8000c74 <main+0x698>
		  } else if (strncmp((char*)Received_Data, "Key4", 4) == 0)
 8000c5e:	2204      	movs	r2, #4
 8000c60:	4999      	ldr	r1, [pc, #612]	; (8000ec8 <main+0x8ec>)
 8000c62:	4895      	ldr	r0, [pc, #596]	; (8000eb8 <main+0x8dc>)
 8000c64:	f005 fe3a 	bl	80068dc <strncmp>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d102      	bne.n	8000c74 <main+0x698>
		  {
			  Button_Pressed=4;
 8000c6e:	4b93      	ldr	r3, [pc, #588]	; (8000ebc <main+0x8e0>)
 8000c70:	2204      	movs	r2, #4
 8000c72:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  switch(Rec_Module_Number)
 8000c74:	4b8e      	ldr	r3, [pc, #568]	; (8000eb0 <main+0x8d4>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b03      	cmp	r3, #3
 8000c7a:	f200 8113 	bhi.w	8000ea4 <main+0x8c8>
 8000c7e:	a201      	add	r2, pc, #4	; (adr r2, 8000c84 <main+0x6a8>)
 8000c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c84:	08000c95 	.word	0x08000c95
 8000c88:	08000d19 	.word	0x08000d19
 8000c8c:	08000d9d 	.word	0x08000d9d
 8000c90:	08000e21 	.word	0x08000e21
	  {
	  case 0:
		  switch(Button_Pressed)
 8000c94:	4b89      	ldr	r3, [pc, #548]	; (8000ebc <main+0x8e0>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d83a      	bhi.n	8000d14 <main+0x738>
 8000c9e:	a201      	add	r2, pc, #4	; (adr r2, 8000ca4 <main+0x6c8>)
 8000ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca4:	08000cb5 	.word	0x08000cb5
 8000ca8:	08000ccd 	.word	0x08000ccd
 8000cac:	08000ce5 	.word	0x08000ce5
 8000cb0:	08000cfd 	.word	0x08000cfd
		  {
		  case 1:
			  EdgeLED_Color(Rec_Module_Number, 255, 255, 255, EdgeLED_Packet);
 8000cb4:	4b7e      	ldr	r3, [pc, #504]	; (8000eb0 <main+0x8d4>)
 8000cb6:	7818      	ldrb	r0, [r3, #0]
 8000cb8:	463b      	mov	r3, r7
 8000cba:	4a84      	ldr	r2, [pc, #528]	; (8000ecc <main+0x8f0>)
 8000cbc:	9200      	str	r2, [sp, #0]
 8000cbe:	469c      	mov	ip, r3
 8000cc0:	23ff      	movs	r3, #255	; 0xff
 8000cc2:	22ff      	movs	r2, #255	; 0xff
 8000cc4:	21ff      	movs	r1, #255	; 0xff
 8000cc6:	f7ff fc5d 	bl	8000584 <EdgeLED_Color.0>
			  break;
 8000cca:	e024      	b.n	8000d16 <main+0x73a>
		  case 2:
			  EdgeLED_Color(Rec_Module_Number, 255, 0, 0, EdgeLED_Packet);
 8000ccc:	4b78      	ldr	r3, [pc, #480]	; (8000eb0 <main+0x8d4>)
 8000cce:	7818      	ldrb	r0, [r3, #0]
 8000cd0:	463b      	mov	r3, r7
 8000cd2:	4a7e      	ldr	r2, [pc, #504]	; (8000ecc <main+0x8f0>)
 8000cd4:	9200      	str	r2, [sp, #0]
 8000cd6:	469c      	mov	ip, r3
 8000cd8:	2300      	movs	r3, #0
 8000cda:	2200      	movs	r2, #0
 8000cdc:	21ff      	movs	r1, #255	; 0xff
 8000cde:	f7ff fc51 	bl	8000584 <EdgeLED_Color.0>
			  break;
 8000ce2:	e018      	b.n	8000d16 <main+0x73a>
		  case 3:
			  EdgeLED_Color(Rec_Module_Number, 0, 255, 0, EdgeLED_Packet);
 8000ce4:	4b72      	ldr	r3, [pc, #456]	; (8000eb0 <main+0x8d4>)
 8000ce6:	7818      	ldrb	r0, [r3, #0]
 8000ce8:	463b      	mov	r3, r7
 8000cea:	4a78      	ldr	r2, [pc, #480]	; (8000ecc <main+0x8f0>)
 8000cec:	9200      	str	r2, [sp, #0]
 8000cee:	469c      	mov	ip, r3
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	22ff      	movs	r2, #255	; 0xff
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	f7ff fc45 	bl	8000584 <EdgeLED_Color.0>
			  break;
 8000cfa:	e00c      	b.n	8000d16 <main+0x73a>
		  case 4:
			  EdgeLED_Color(Rec_Module_Number, 0, 0, 255, EdgeLED_Packet);
 8000cfc:	4b6c      	ldr	r3, [pc, #432]	; (8000eb0 <main+0x8d4>)
 8000cfe:	7818      	ldrb	r0, [r3, #0]
 8000d00:	463b      	mov	r3, r7
 8000d02:	4a72      	ldr	r2, [pc, #456]	; (8000ecc <main+0x8f0>)
 8000d04:	9200      	str	r2, [sp, #0]
 8000d06:	469c      	mov	ip, r3
 8000d08:	23ff      	movs	r3, #255	; 0xff
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	f7ff fc39 	bl	8000584 <EdgeLED_Color.0>
			  break;
 8000d12:	e000      	b.n	8000d16 <main+0x73a>
		  default:
			  break;
 8000d14:	bf00      	nop
		  }
		  break;
 8000d16:	e0c6      	b.n	8000ea6 <main+0x8ca>
	  case 1:
		  switch(Button_Pressed)
 8000d18:	4b68      	ldr	r3, [pc, #416]	; (8000ebc <main+0x8e0>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	2b03      	cmp	r3, #3
 8000d20:	d83a      	bhi.n	8000d98 <main+0x7bc>
 8000d22:	a201      	add	r2, pc, #4	; (adr r2, 8000d28 <main+0x74c>)
 8000d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d28:	08000d39 	.word	0x08000d39
 8000d2c:	08000d51 	.word	0x08000d51
 8000d30:	08000d69 	.word	0x08000d69
 8000d34:	08000d81 	.word	0x08000d81
		  {
		  case 1:
			  EdgeLED_Color(Rec_Module_Number, 255, 255, 0, EdgeLED_Packet);
 8000d38:	4b5d      	ldr	r3, [pc, #372]	; (8000eb0 <main+0x8d4>)
 8000d3a:	7818      	ldrb	r0, [r3, #0]
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	4a63      	ldr	r2, [pc, #396]	; (8000ecc <main+0x8f0>)
 8000d40:	9200      	str	r2, [sp, #0]
 8000d42:	469c      	mov	ip, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	22ff      	movs	r2, #255	; 0xff
 8000d48:	21ff      	movs	r1, #255	; 0xff
 8000d4a:	f7ff fc1b 	bl	8000584 <EdgeLED_Color.0>
			  break;
 8000d4e:	e024      	b.n	8000d9a <main+0x7be>
		  case 2:
			  EdgeLED_Color(Rec_Module_Number, 255, 0, 255, EdgeLED_Packet);
 8000d50:	4b57      	ldr	r3, [pc, #348]	; (8000eb0 <main+0x8d4>)
 8000d52:	7818      	ldrb	r0, [r3, #0]
 8000d54:	463b      	mov	r3, r7
 8000d56:	4a5d      	ldr	r2, [pc, #372]	; (8000ecc <main+0x8f0>)
 8000d58:	9200      	str	r2, [sp, #0]
 8000d5a:	469c      	mov	ip, r3
 8000d5c:	23ff      	movs	r3, #255	; 0xff
 8000d5e:	2200      	movs	r2, #0
 8000d60:	21ff      	movs	r1, #255	; 0xff
 8000d62:	f7ff fc0f 	bl	8000584 <EdgeLED_Color.0>
			  break;
 8000d66:	e018      	b.n	8000d9a <main+0x7be>
		  case 3:
			  EdgeLED_Color(Rec_Module_Number, 0, 255, 255, EdgeLED_Packet);
 8000d68:	4b51      	ldr	r3, [pc, #324]	; (8000eb0 <main+0x8d4>)
 8000d6a:	7818      	ldrb	r0, [r3, #0]
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	4a57      	ldr	r2, [pc, #348]	; (8000ecc <main+0x8f0>)
 8000d70:	9200      	str	r2, [sp, #0]
 8000d72:	469c      	mov	ip, r3
 8000d74:	23ff      	movs	r3, #255	; 0xff
 8000d76:	22ff      	movs	r2, #255	; 0xff
 8000d78:	2100      	movs	r1, #0
 8000d7a:	f7ff fc03 	bl	8000584 <EdgeLED_Color.0>
			  break;
 8000d7e:	e00c      	b.n	8000d9a <main+0x7be>
		  case 4:
			  EdgeLED_Color(Rec_Module_Number, 125, 125, 125, EdgeLED_Packet);
 8000d80:	4b4b      	ldr	r3, [pc, #300]	; (8000eb0 <main+0x8d4>)
 8000d82:	7818      	ldrb	r0, [r3, #0]
 8000d84:	463b      	mov	r3, r7
 8000d86:	4a51      	ldr	r2, [pc, #324]	; (8000ecc <main+0x8f0>)
 8000d88:	9200      	str	r2, [sp, #0]
 8000d8a:	469c      	mov	ip, r3
 8000d8c:	237d      	movs	r3, #125	; 0x7d
 8000d8e:	227d      	movs	r2, #125	; 0x7d
 8000d90:	217d      	movs	r1, #125	; 0x7d
 8000d92:	f7ff fbf7 	bl	8000584 <EdgeLED_Color.0>
			  break;
 8000d96:	e000      	b.n	8000d9a <main+0x7be>
		  default:
			  break;
 8000d98:	bf00      	nop
		  }
		  break;
 8000d9a:	e084      	b.n	8000ea6 <main+0x8ca>
	  case 2:
		  switch(Button_Pressed)
 8000d9c:	4b47      	ldr	r3, [pc, #284]	; (8000ebc <main+0x8e0>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	3b01      	subs	r3, #1
 8000da2:	2b03      	cmp	r3, #3
 8000da4:	d83a      	bhi.n	8000e1c <main+0x840>
 8000da6:	a201      	add	r2, pc, #4	; (adr r2, 8000dac <main+0x7d0>)
 8000da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dac:	08000dbd 	.word	0x08000dbd
 8000db0:	08000dd5 	.word	0x08000dd5
 8000db4:	08000ded 	.word	0x08000ded
 8000db8:	08000e05 	.word	0x08000e05
		  {
		  case 1:
			  EdgeLED_Color(Rec_Module_Number, 66, 245, 230, EdgeLED_Packet);
 8000dbc:	4b3c      	ldr	r3, [pc, #240]	; (8000eb0 <main+0x8d4>)
 8000dbe:	7818      	ldrb	r0, [r3, #0]
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	4a42      	ldr	r2, [pc, #264]	; (8000ecc <main+0x8f0>)
 8000dc4:	9200      	str	r2, [sp, #0]
 8000dc6:	469c      	mov	ip, r3
 8000dc8:	23e6      	movs	r3, #230	; 0xe6
 8000dca:	22f5      	movs	r2, #245	; 0xf5
 8000dcc:	2142      	movs	r1, #66	; 0x42
 8000dce:	f7ff fbd9 	bl	8000584 <EdgeLED_Color.0>
			  break;
 8000dd2:	e024      	b.n	8000e1e <main+0x842>
		  case 2:
			  EdgeLED_Color(Rec_Module_Number, 144, 245, 66, EdgeLED_Packet);
 8000dd4:	4b36      	ldr	r3, [pc, #216]	; (8000eb0 <main+0x8d4>)
 8000dd6:	7818      	ldrb	r0, [r3, #0]
 8000dd8:	463b      	mov	r3, r7
 8000dda:	4a3c      	ldr	r2, [pc, #240]	; (8000ecc <main+0x8f0>)
 8000ddc:	9200      	str	r2, [sp, #0]
 8000dde:	469c      	mov	ip, r3
 8000de0:	2342      	movs	r3, #66	; 0x42
 8000de2:	22f5      	movs	r2, #245	; 0xf5
 8000de4:	2190      	movs	r1, #144	; 0x90
 8000de6:	f7ff fbcd 	bl	8000584 <EdgeLED_Color.0>
			  break;
 8000dea:	e018      	b.n	8000e1e <main+0x842>
		  case 3:
			  EdgeLED_Color(Rec_Module_Number, 245, 66, 66, EdgeLED_Packet);
 8000dec:	4b30      	ldr	r3, [pc, #192]	; (8000eb0 <main+0x8d4>)
 8000dee:	7818      	ldrb	r0, [r3, #0]
 8000df0:	463b      	mov	r3, r7
 8000df2:	4a36      	ldr	r2, [pc, #216]	; (8000ecc <main+0x8f0>)
 8000df4:	9200      	str	r2, [sp, #0]
 8000df6:	469c      	mov	ip, r3
 8000df8:	2342      	movs	r3, #66	; 0x42
 8000dfa:	2242      	movs	r2, #66	; 0x42
 8000dfc:	21f5      	movs	r1, #245	; 0xf5
 8000dfe:	f7ff fbc1 	bl	8000584 <EdgeLED_Color.0>
			  break;
 8000e02:	e00c      	b.n	8000e1e <main+0x842>
		  case 4:
			  EdgeLED_Color(Rec_Module_Number, 227, 66, 245, EdgeLED_Packet);
 8000e04:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <main+0x8d4>)
 8000e06:	7818      	ldrb	r0, [r3, #0]
 8000e08:	463b      	mov	r3, r7
 8000e0a:	4a30      	ldr	r2, [pc, #192]	; (8000ecc <main+0x8f0>)
 8000e0c:	9200      	str	r2, [sp, #0]
 8000e0e:	469c      	mov	ip, r3
 8000e10:	23f5      	movs	r3, #245	; 0xf5
 8000e12:	2242      	movs	r2, #66	; 0x42
 8000e14:	21e3      	movs	r1, #227	; 0xe3
 8000e16:	f7ff fbb5 	bl	8000584 <EdgeLED_Color.0>
			  break;
 8000e1a:	e000      	b.n	8000e1e <main+0x842>
		  default:
			  break;
 8000e1c:	bf00      	nop
		  }
		  break;
 8000e1e:	e042      	b.n	8000ea6 <main+0x8ca>
	  case 3:
		  switch(Button_Pressed)
 8000e20:	4b26      	ldr	r3, [pc, #152]	; (8000ebc <main+0x8e0>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	3b01      	subs	r3, #1
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	d83a      	bhi.n	8000ea0 <main+0x8c4>
 8000e2a:	a201      	add	r2, pc, #4	; (adr r2, 8000e30 <main+0x854>)
 8000e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e30:	08000e41 	.word	0x08000e41
 8000e34:	08000e59 	.word	0x08000e59
 8000e38:	08000e71 	.word	0x08000e71
 8000e3c:	08000e89 	.word	0x08000e89
		  {
		  case 1:
			  EdgeLED_Color(Rec_Module_Number, 39, 41, 82, EdgeLED_Packet);
 8000e40:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <main+0x8d4>)
 8000e42:	7818      	ldrb	r0, [r3, #0]
 8000e44:	463b      	mov	r3, r7
 8000e46:	4a21      	ldr	r2, [pc, #132]	; (8000ecc <main+0x8f0>)
 8000e48:	9200      	str	r2, [sp, #0]
 8000e4a:	469c      	mov	ip, r3
 8000e4c:	2352      	movs	r3, #82	; 0x52
 8000e4e:	2229      	movs	r2, #41	; 0x29
 8000e50:	2127      	movs	r1, #39	; 0x27
 8000e52:	f7ff fb97 	bl	8000584 <EdgeLED_Color.0>
			  break;
 8000e56:	e024      	b.n	8000ea2 <main+0x8c6>
		  case 2:
			  EdgeLED_Color(Rec_Module_Number, 82, 39, 79, EdgeLED_Packet);
 8000e58:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <main+0x8d4>)
 8000e5a:	7818      	ldrb	r0, [r3, #0]
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	4a1b      	ldr	r2, [pc, #108]	; (8000ecc <main+0x8f0>)
 8000e60:	9200      	str	r2, [sp, #0]
 8000e62:	469c      	mov	ip, r3
 8000e64:	234f      	movs	r3, #79	; 0x4f
 8000e66:	2227      	movs	r2, #39	; 0x27
 8000e68:	2152      	movs	r1, #82	; 0x52
 8000e6a:	f7ff fb8b 	bl	8000584 <EdgeLED_Color.0>
			  break;
 8000e6e:	e018      	b.n	8000ea2 <main+0x8c6>
		  case 3:
			  EdgeLED_Color(Rec_Module_Number, 114, 145, 81, EdgeLED_Packet);
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <main+0x8d4>)
 8000e72:	7818      	ldrb	r0, [r3, #0]
 8000e74:	463b      	mov	r3, r7
 8000e76:	4a15      	ldr	r2, [pc, #84]	; (8000ecc <main+0x8f0>)
 8000e78:	9200      	str	r2, [sp, #0]
 8000e7a:	469c      	mov	ip, r3
 8000e7c:	2351      	movs	r3, #81	; 0x51
 8000e7e:	2291      	movs	r2, #145	; 0x91
 8000e80:	2172      	movs	r1, #114	; 0x72
 8000e82:	f7ff fb7f 	bl	8000584 <EdgeLED_Color.0>
			  break;
 8000e86:	e00c      	b.n	8000ea2 <main+0x8c6>
		  case 4:
			  EdgeLED_Color(Rec_Module_Number, 48, 71, 64, EdgeLED_Packet);
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <main+0x8d4>)
 8000e8a:	7818      	ldrb	r0, [r3, #0]
 8000e8c:	463b      	mov	r3, r7
 8000e8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ecc <main+0x8f0>)
 8000e90:	9200      	str	r2, [sp, #0]
 8000e92:	469c      	mov	ip, r3
 8000e94:	2340      	movs	r3, #64	; 0x40
 8000e96:	2247      	movs	r2, #71	; 0x47
 8000e98:	2130      	movs	r1, #48	; 0x30
 8000e9a:	f7ff fb73 	bl	8000584 <EdgeLED_Color.0>
			  break;
 8000e9e:	e000      	b.n	8000ea2 <main+0x8c6>
		  default:
			  break;
 8000ea0:	bf00      	nop
		  }
		  break;
 8000ea2:	e000      	b.n	8000ea6 <main+0x8ca>
	  default:
		  break;
 8000ea4:	bf00      	nop
	  }

	  Rec_Module_Number=254;
 8000ea6:	4b02      	ldr	r3, [pc, #8]	; (8000eb0 <main+0x8d4>)
 8000ea8:	22fe      	movs	r2, #254	; 0xfe
 8000eaa:	701a      	strb	r2, [r3, #0]
	  Pipe_Num = isDataAvailable(Sel_B_Module1);
 8000eac:	e468      	b.n	8000780 <main+0x1a4>
 8000eae:	bf00      	nop
 8000eb0:	20000351 	.word	0x20000351
 8000eb4:	080071e4 	.word	0x080071e4
 8000eb8:	2000031c 	.word	0x2000031c
 8000ebc:	20000352 	.word	0x20000352
 8000ec0:	080071ec 	.word	0x080071ec
 8000ec4:	080071f4 	.word	0x080071f4
 8000ec8:	080071fc 	.word	0x080071fc
 8000ecc:	2000033c 	.word	0x2000033c

08000ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b094      	sub	sp, #80	; 0x50
 8000ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed6:	f107 0320 	add.w	r3, r7, #32
 8000eda:	2230      	movs	r2, #48	; 0x30
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f005 fcd4 	bl	800688c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <SystemClock_Config+0xb4>)
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	4a21      	ldr	r2, [pc, #132]	; (8000f84 <SystemClock_Config+0xb4>)
 8000efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f02:	6413      	str	r3, [r2, #64]	; 0x40
 8000f04:	4b1f      	ldr	r3, [pc, #124]	; (8000f84 <SystemClock_Config+0xb4>)
 8000f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f10:	2300      	movs	r3, #0
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <SystemClock_Config+0xb8>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a1b      	ldr	r2, [pc, #108]	; (8000f88 <SystemClock_Config+0xb8>)
 8000f1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f1e:	6013      	str	r3, [r2, #0]
 8000f20:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <SystemClock_Config+0xb8>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f30:	2301      	movs	r3, #1
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f34:	2310      	movs	r3, #16
 8000f36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3c:	f107 0320 	add.w	r3, r7, #32
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 ff87 	bl	8001e54 <HAL_RCC_OscConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000f4c:	f000 fa04 	bl	8001358 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f50:	230f      	movs	r3, #15
 8000f52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f54:	2300      	movs	r3, #0
 8000f56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f001 f9ea 	bl	8002344 <HAL_RCC_ClockConfig>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000f76:	f000 f9ef 	bl	8001358 <Error_Handler>
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	3750      	adds	r7, #80	; 0x50
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40007000 	.word	0x40007000

08000f8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  Button_hspi1.Instance = SPI1;
 8000f90:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000f92:	4a18      	ldr	r2, [pc, #96]	; (8000ff4 <MX_SPI1_Init+0x68>)
 8000f94:	601a      	str	r2, [r3, #0]
  Button_hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f96:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000f98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f9c:	605a      	str	r2, [r3, #4]
  Button_hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f9e:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  Button_hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  Button_hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  Button_hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	615a      	str	r2, [r3, #20]
  Button_hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fbc:	619a      	str	r2, [r3, #24]
  Button_hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	61da      	str	r2, [r3, #28]
  Button_hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	621a      	str	r2, [r3, #32]
  Button_hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	625a      	str	r2, [r3, #36]	; 0x24
  Button_hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	629a      	str	r2, [r3, #40]	; 0x28
  Button_hspi1.Init.CRCPolynomial = 10;
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fd8:	220a      	movs	r2, #10
 8000fda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&Button_hspi1) != HAL_OK)
 8000fdc:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fde:	f001 fb91 	bl	8002704 <HAL_SPI_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fe8:	f000 f9b6 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	200000e0 	.word	0x200000e0
 8000ff4:	40013000 	.word	0x40013000

08000ff8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  EL_hspi2.Instance = SPI2;
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <MX_SPI2_Init+0x64>)
 8000ffe:	4a18      	ldr	r2, [pc, #96]	; (8001060 <MX_SPI2_Init+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  EL_hspi2.Init.Mode = SPI_MODE_MASTER;
 8001002:	4b16      	ldr	r3, [pc, #88]	; (800105c <MX_SPI2_Init+0x64>)
 8001004:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001008:	605a      	str	r2, [r3, #4]
  EL_hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800100a:	4b14      	ldr	r3, [pc, #80]	; (800105c <MX_SPI2_Init+0x64>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  EL_hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <MX_SPI2_Init+0x64>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
  EL_hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_SPI2_Init+0x64>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  EL_hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_SPI2_Init+0x64>)
 800101e:	2200      	movs	r2, #0
 8001020:	615a      	str	r2, [r3, #20]
  EL_hspi2.Init.NSS = SPI_NSS_SOFT;
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <MX_SPI2_Init+0x64>)
 8001024:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001028:	619a      	str	r2, [r3, #24]
  EL_hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800102a:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_SPI2_Init+0x64>)
 800102c:	2200      	movs	r2, #0
 800102e:	61da      	str	r2, [r3, #28]
  EL_hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <MX_SPI2_Init+0x64>)
 8001032:	2200      	movs	r2, #0
 8001034:	621a      	str	r2, [r3, #32]
  EL_hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_SPI2_Init+0x64>)
 8001038:	2200      	movs	r2, #0
 800103a:	625a      	str	r2, [r3, #36]	; 0x24
  EL_hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <MX_SPI2_Init+0x64>)
 800103e:	2200      	movs	r2, #0
 8001040:	629a      	str	r2, [r3, #40]	; 0x28
  EL_hspi2.Init.CRCPolynomial = 10;
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_SPI2_Init+0x64>)
 8001044:	220a      	movs	r2, #10
 8001046:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&EL_hspi2) != HAL_OK)
 8001048:	4804      	ldr	r0, [pc, #16]	; (800105c <MX_SPI2_Init+0x64>)
 800104a:	f001 fb5b 	bl	8002704 <HAL_SPI_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001054:	f000 f980 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000138 	.word	0x20000138
 8001060:	40003800 	.word	0x40003800

08001064 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  ESP32_hspi3.Instance = SPI3;
 8001068:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <MX_SPI3_Init+0x64>)
 800106a:	4a18      	ldr	r2, [pc, #96]	; (80010cc <MX_SPI3_Init+0x68>)
 800106c:	601a      	str	r2, [r3, #0]
  ESP32_hspi3.Init.Mode = SPI_MODE_MASTER;
 800106e:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <MX_SPI3_Init+0x64>)
 8001070:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001074:	605a      	str	r2, [r3, #4]
  ESP32_hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <MX_SPI3_Init+0x64>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  ESP32_hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <MX_SPI3_Init+0x64>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  ESP32_hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_SPI3_Init+0x64>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  ESP32_hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_SPI3_Init+0x64>)
 800108a:	2200      	movs	r2, #0
 800108c:	615a      	str	r2, [r3, #20]
  ESP32_hspi3.Init.NSS = SPI_NSS_SOFT;
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <MX_SPI3_Init+0x64>)
 8001090:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001094:	619a      	str	r2, [r3, #24]
  ESP32_hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_SPI3_Init+0x64>)
 8001098:	2200      	movs	r2, #0
 800109a:	61da      	str	r2, [r3, #28]
  ESP32_hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <MX_SPI3_Init+0x64>)
 800109e:	2200      	movs	r2, #0
 80010a0:	621a      	str	r2, [r3, #32]
  ESP32_hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MX_SPI3_Init+0x64>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	625a      	str	r2, [r3, #36]	; 0x24
  ESP32_hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <MX_SPI3_Init+0x64>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	629a      	str	r2, [r3, #40]	; 0x28
  ESP32_hspi3.Init.CRCPolynomial = 10;
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <MX_SPI3_Init+0x64>)
 80010b0:	220a      	movs	r2, #10
 80010b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&ESP32_hspi3) != HAL_OK)
 80010b4:	4804      	ldr	r0, [pc, #16]	; (80010c8 <MX_SPI3_Init+0x64>)
 80010b6:	f001 fb25 	bl	8002704 <HAL_SPI_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80010c0:	f000 f94a 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000190 	.word	0x20000190
 80010cc:	40003c00 	.word	0x40003c00

080010d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <MX_USART2_UART_Init+0x4c>)
 80010d6:	4a12      	ldr	r2, [pc, #72]	; (8001120 <MX_USART2_UART_Init+0x50>)
 80010d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <MX_USART2_UART_Init+0x4c>)
 80010dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <MX_USART2_UART_Init+0x4c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <MX_USART2_UART_Init+0x4c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ee:	4b0b      	ldr	r3, [pc, #44]	; (800111c <MX_USART2_UART_Init+0x4c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010f4:	4b09      	ldr	r3, [pc, #36]	; (800111c <MX_USART2_UART_Init+0x4c>)
 80010f6:	220c      	movs	r2, #12
 80010f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <MX_USART2_UART_Init+0x4c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <MX_USART2_UART_Init+0x4c>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <MX_USART2_UART_Init+0x4c>)
 8001108:	f002 f8a4 	bl	8003254 <HAL_UART_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001112:	f000 f921 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200001e8 	.word	0x200001e8
 8001120:	40004400 	.word	0x40004400

08001124 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	4b81      	ldr	r3, [pc, #516]	; (8001344 <MX_GPIO_Init+0x220>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a80      	ldr	r2, [pc, #512]	; (8001344 <MX_GPIO_Init+0x220>)
 8001144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b7e      	ldr	r3, [pc, #504]	; (8001344 <MX_GPIO_Init+0x220>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b7a      	ldr	r3, [pc, #488]	; (8001344 <MX_GPIO_Init+0x220>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a79      	ldr	r2, [pc, #484]	; (8001344 <MX_GPIO_Init+0x220>)
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b77      	ldr	r3, [pc, #476]	; (8001344 <MX_GPIO_Init+0x220>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	4b73      	ldr	r3, [pc, #460]	; (8001344 <MX_GPIO_Init+0x220>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a72      	ldr	r2, [pc, #456]	; (8001344 <MX_GPIO_Init+0x220>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b70      	ldr	r3, [pc, #448]	; (8001344 <MX_GPIO_Init+0x220>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	4b6c      	ldr	r3, [pc, #432]	; (8001344 <MX_GPIO_Init+0x220>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a6b      	ldr	r2, [pc, #428]	; (8001344 <MX_GPIO_Init+0x220>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b69      	ldr	r3, [pc, #420]	; (8001344 <MX_GPIO_Init+0x220>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	603b      	str	r3, [r7, #0]
 80011ae:	4b65      	ldr	r3, [pc, #404]	; (8001344 <MX_GPIO_Init+0x220>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a64      	ldr	r2, [pc, #400]	; (8001344 <MX_GPIO_Init+0x220>)
 80011b4:	f043 0308 	orr.w	r3, r3, #8
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b62      	ldr	r3, [pc, #392]	; (8001344 <MX_GPIO_Init+0x220>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	603b      	str	r3, [r7, #0]
 80011c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, nRF_EL_CSN_Pin|nRF_B_CSN1_Pin|nRF_B_CSN4_Pin, GPIO_PIN_SET);
 80011c6:	2201      	movs	r2, #1
 80011c8:	f240 1121 	movw	r1, #289	; 0x121
 80011cc:	485e      	ldr	r0, [pc, #376]	; (8001348 <MX_GPIO_Init+0x224>)
 80011ce:	f000 fe03 	bl	8001dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nRF_EL_CE_Pin|T_LED1_Pin, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f240 2101 	movw	r1, #513	; 0x201
 80011d8:	485c      	ldr	r0, [pc, #368]	; (800134c <MX_GPIO_Init+0x228>)
 80011da:	f000 fdfd 	bl	8001dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, nRF_B_CE1_Pin|nRF_B_CE2_Pin|nRF_B_CE3_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	f242 0105 	movw	r1, #8197	; 0x2005
 80011e4:	485a      	ldr	r0, [pc, #360]	; (8001350 <MX_GPIO_Init+0x22c>)
 80011e6:	f000 fdf7 	bl	8001dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, nRF_B_CSN2_Pin|nRF_B_CSN3_Pin, GPIO_PIN_SET);
 80011ea:	2201      	movs	r2, #1
 80011ec:	f640 0102 	movw	r1, #2050	; 0x802
 80011f0:	4857      	ldr	r0, [pc, #348]	; (8001350 <MX_GPIO_Init+0x22c>)
 80011f2:	f000 fdf1 	bl	8001dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, nRF_B_CE4_Pin|T_LED2_Pin, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 7120 	mov.w	r1, #640	; 0x280
 80011fc:	4852      	ldr	r0, [pc, #328]	; (8001348 <MX_GPIO_Init+0x224>)
 80011fe:	f000 fdeb 	bl	8001dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_CS_GPIO_Port, ESP32_CS_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	2104      	movs	r1, #4
 8001206:	4853      	ldr	r0, [pc, #332]	; (8001354 <MX_GPIO_Init+0x230>)
 8001208:	f000 fde6 	bl	8001dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : nRF_EL_CSN_Pin nRF_B_CSN1_Pin nRF_B_CE4_Pin nRF_B_CSN4_Pin */
  GPIO_InitStruct.Pin = nRF_EL_CSN_Pin|nRF_B_CSN1_Pin|nRF_B_CE4_Pin|nRF_B_CSN4_Pin;
 800120c:	f240 13a1 	movw	r3, #417	; 0x1a1
 8001210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001212:	2301      	movs	r3, #1
 8001214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800121a:	2302      	movs	r3, #2
 800121c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	4619      	mov	r1, r3
 8001224:	4848      	ldr	r0, [pc, #288]	; (8001348 <MX_GPIO_Init+0x224>)
 8001226:	f000 fc3b 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : nRF_EL_IRQ_Pin nRF_B_IRQ1_Pin nRF_B_IRQ4_Pin */
  GPIO_InitStruct.Pin = nRF_EL_IRQ_Pin|nRF_B_IRQ1_Pin|nRF_B_IRQ4_Pin;
 800122a:	2352      	movs	r3, #82	; 0x52
 800122c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800122e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4619      	mov	r1, r3
 800123e:	4842      	ldr	r0, [pc, #264]	; (8001348 <MX_GPIO_Init+0x224>)
 8001240:	f000 fc2e 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : nRF_EL_CE_Pin */
  GPIO_InitStruct.Pin = nRF_EL_CE_Pin;
 8001244:	2301      	movs	r3, #1
 8001246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001248:	2301      	movs	r3, #1
 800124a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001250:	2302      	movs	r3, #2
 8001252:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nRF_EL_CE_GPIO_Port, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	483c      	ldr	r0, [pc, #240]	; (800134c <MX_GPIO_Init+0x228>)
 800125c:	f000 fc20 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : nRF_B_CE1_Pin nRF_B_CSN2_Pin nRF_B_CE2_Pin nRF_B_CSN3_Pin
                           nRF_B_CE3_Pin */
  GPIO_InitStruct.Pin = nRF_B_CE1_Pin|nRF_B_CSN2_Pin|nRF_B_CE2_Pin|nRF_B_CSN3_Pin
 8001260:	f642 0307 	movw	r3, #10247	; 0x2807
 8001264:	617b      	str	r3, [r7, #20]
                          |nRF_B_CE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001266:	2301      	movs	r3, #1
 8001268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800126e:	2302      	movs	r3, #2
 8001270:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	4835      	ldr	r0, [pc, #212]	; (8001350 <MX_GPIO_Init+0x22c>)
 800127a:	f000 fc11 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : nRF_B_IRQ2_Pin nRF_B_IRQ3_Pin */
  GPIO_InitStruct.Pin = nRF_B_IRQ2_Pin|nRF_B_IRQ3_Pin;
 800127e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001282:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001284:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001288:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	482e      	ldr	r0, [pc, #184]	; (8001350 <MX_GPIO_Init+0x22c>)
 8001296:	f000 fc03 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_LED2_Pin */
  GPIO_InitStruct.Pin = T_LED2_Pin;
 800129a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800129e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a0:	2301      	movs	r3, #1
 80012a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	2300      	movs	r3, #0
 80012aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(T_LED2_GPIO_Port, &GPIO_InitStruct);
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4619      	mov	r1, r3
 80012b2:	4825      	ldr	r0, [pc, #148]	; (8001348 <MX_GPIO_Init+0x224>)
 80012b4:	f000 fbf4 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_Key2_Pin T_Key1_Pin */
  GPIO_InitStruct.Pin = T_Key2_Pin|T_Key1_Pin;
 80012b8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80012bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012c2:	2302      	movs	r3, #2
 80012c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	481f      	ldr	r0, [pc, #124]	; (800134c <MX_GPIO_Init+0x228>)
 80012ce:	f000 fbe7 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_LED1_Pin */
  GPIO_InitStruct.Pin = T_LED1_Pin;
 80012d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	2301      	movs	r3, #1
 80012da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(T_LED1_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	4818      	ldr	r0, [pc, #96]	; (800134c <MX_GPIO_Init+0x228>)
 80012ec:	f000 fbd8 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP32_CS_Pin */
  GPIO_InitStruct.Pin = ESP32_CS_Pin;
 80012f0:	2304      	movs	r3, #4
 80012f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012fc:	2302      	movs	r3, #2
 80012fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESP32_CS_GPIO_Port, &GPIO_InitStruct);
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4619      	mov	r1, r3
 8001306:	4813      	ldr	r0, [pc, #76]	; (8001354 <MX_GPIO_Init+0x230>)
 8001308:	f000 fbca 	bl	8001aa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800130c:	2200      	movs	r2, #0
 800130e:	2100      	movs	r1, #0
 8001310:	2007      	movs	r0, #7
 8001312:	f000 fb8e 	bl	8001a32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001316:	2007      	movs	r0, #7
 8001318:	f000 fba7 	bl	8001a6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800131c:	2200      	movs	r2, #0
 800131e:	2100      	movs	r1, #0
 8001320:	200a      	movs	r0, #10
 8001322:	f000 fb86 	bl	8001a32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001326:	200a      	movs	r0, #10
 8001328:	f000 fb9f 	bl	8001a6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800132c:	2200      	movs	r2, #0
 800132e:	2100      	movs	r1, #0
 8001330:	2017      	movs	r0, #23
 8001332:	f000 fb7e 	bl	8001a32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001336:	2017      	movs	r0, #23
 8001338:	f000 fb97 	bl	8001a6a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800133c:	bf00      	nop
 800133e:	3728      	adds	r7, #40	; 0x28
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40023800 	.word	0x40023800
 8001348:	40020800 	.word	0x40020800
 800134c:	40020000 	.word	0x40020000
 8001350:	40020400 	.word	0x40020400
 8001354:	40020c00 	.word	0x40020c00

08001358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800135c:	b672      	cpsid	i
}
 800135e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001360:	e7fe      	b.n	8001360 <Error_Handler+0x8>
	...

08001364 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <HAL_MspInit+0x4c>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	4a0f      	ldr	r2, [pc, #60]	; (80013b0 <HAL_MspInit+0x4c>)
 8001374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001378:	6453      	str	r3, [r2, #68]	; 0x44
 800137a:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <HAL_MspInit+0x4c>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	603b      	str	r3, [r7, #0]
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <HAL_MspInit+0x4c>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	4a08      	ldr	r2, [pc, #32]	; (80013b0 <HAL_MspInit+0x4c>)
 8001390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001394:	6413      	str	r3, [r2, #64]	; 0x40
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_MspInit+0x4c>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800

080013b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08e      	sub	sp, #56	; 0x38
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a5b      	ldr	r2, [pc, #364]	; (8001540 <HAL_SPI_MspInit+0x18c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d12c      	bne.n	8001430 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	623b      	str	r3, [r7, #32]
 80013da:	4b5a      	ldr	r3, [pc, #360]	; (8001544 <HAL_SPI_MspInit+0x190>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	4a59      	ldr	r2, [pc, #356]	; (8001544 <HAL_SPI_MspInit+0x190>)
 80013e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013e4:	6453      	str	r3, [r2, #68]	; 0x44
 80013e6:	4b57      	ldr	r3, [pc, #348]	; (8001544 <HAL_SPI_MspInit+0x190>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ee:	623b      	str	r3, [r7, #32]
 80013f0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
 80013f6:	4b53      	ldr	r3, [pc, #332]	; (8001544 <HAL_SPI_MspInit+0x190>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a52      	ldr	r2, [pc, #328]	; (8001544 <HAL_SPI_MspInit+0x190>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b50      	ldr	r3, [pc, #320]	; (8001544 <HAL_SPI_MspInit+0x190>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	61fb      	str	r3, [r7, #28]
 800140c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = nRF_B_SCK_Pin|nRF_B_MISO_Pin|nRF_B_MOSI_Pin;
 800140e:	23e0      	movs	r3, #224	; 0xe0
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141a:	2303      	movs	r3, #3
 800141c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800141e:	2305      	movs	r3, #5
 8001420:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001426:	4619      	mov	r1, r3
 8001428:	4847      	ldr	r0, [pc, #284]	; (8001548 <HAL_SPI_MspInit+0x194>)
 800142a:	f000 fb39 	bl	8001aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800142e:	e082      	b.n	8001536 <HAL_SPI_MspInit+0x182>
  else if(hspi->Instance==SPI2)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a45      	ldr	r2, [pc, #276]	; (800154c <HAL_SPI_MspInit+0x198>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d14b      	bne.n	80014d2 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	61bb      	str	r3, [r7, #24]
 800143e:	4b41      	ldr	r3, [pc, #260]	; (8001544 <HAL_SPI_MspInit+0x190>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	4a40      	ldr	r2, [pc, #256]	; (8001544 <HAL_SPI_MspInit+0x190>)
 8001444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001448:	6413      	str	r3, [r2, #64]	; 0x40
 800144a:	4b3e      	ldr	r3, [pc, #248]	; (8001544 <HAL_SPI_MspInit+0x190>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001452:	61bb      	str	r3, [r7, #24]
 8001454:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	4b3a      	ldr	r3, [pc, #232]	; (8001544 <HAL_SPI_MspInit+0x190>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a39      	ldr	r2, [pc, #228]	; (8001544 <HAL_SPI_MspInit+0x190>)
 8001460:	f043 0304 	orr.w	r3, r3, #4
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b37      	ldr	r3, [pc, #220]	; (8001544 <HAL_SPI_MspInit+0x190>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0304 	and.w	r3, r3, #4
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	4b33      	ldr	r3, [pc, #204]	; (8001544 <HAL_SPI_MspInit+0x190>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a32      	ldr	r2, [pc, #200]	; (8001544 <HAL_SPI_MspInit+0x190>)
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b30      	ldr	r3, [pc, #192]	; (8001544 <HAL_SPI_MspInit+0x190>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = nRF_EL_MISO_Pin|nRF_EL_MOSI_Pin;
 800148e:	230c      	movs	r3, #12
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800149e:	2305      	movs	r3, #5
 80014a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a6:	4619      	mov	r1, r3
 80014a8:	4829      	ldr	r0, [pc, #164]	; (8001550 <HAL_SPI_MspInit+0x19c>)
 80014aa:	f000 faf9 	bl	8001aa0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = nRF_EL_SCK_Pin;
 80014ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014c0:	2305      	movs	r3, #5
 80014c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(nRF_EL_SCK_GPIO_Port, &GPIO_InitStruct);
 80014c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c8:	4619      	mov	r1, r3
 80014ca:	4822      	ldr	r0, [pc, #136]	; (8001554 <HAL_SPI_MspInit+0x1a0>)
 80014cc:	f000 fae8 	bl	8001aa0 <HAL_GPIO_Init>
}
 80014d0:	e031      	b.n	8001536 <HAL_SPI_MspInit+0x182>
  else if(hspi->Instance==SPI3)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a20      	ldr	r2, [pc, #128]	; (8001558 <HAL_SPI_MspInit+0x1a4>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d12c      	bne.n	8001536 <HAL_SPI_MspInit+0x182>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_SPI_MspInit+0x190>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	4a17      	ldr	r2, [pc, #92]	; (8001544 <HAL_SPI_MspInit+0x190>)
 80014e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014ea:	6413      	str	r3, [r2, #64]	; 0x40
 80014ec:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_SPI_MspInit+0x190>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f8:	2300      	movs	r3, #0
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <HAL_SPI_MspInit+0x190>)
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	4a10      	ldr	r2, [pc, #64]	; (8001544 <HAL_SPI_MspInit+0x190>)
 8001502:	f043 0304 	orr.w	r3, r3, #4
 8001506:	6313      	str	r3, [r2, #48]	; 0x30
 8001508:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <HAL_SPI_MspInit+0x190>)
 800150a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ESP32_SCK_Pin|ESP32_MISO_Pin|ESP32_MOSI_Pin;
 8001514:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001526:	2306      	movs	r3, #6
 8001528:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800152a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152e:	4619      	mov	r1, r3
 8001530:	4807      	ldr	r0, [pc, #28]	; (8001550 <HAL_SPI_MspInit+0x19c>)
 8001532:	f000 fab5 	bl	8001aa0 <HAL_GPIO_Init>
}
 8001536:	bf00      	nop
 8001538:	3738      	adds	r7, #56	; 0x38
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40013000 	.word	0x40013000
 8001544:	40023800 	.word	0x40023800
 8001548:	40020000 	.word	0x40020000
 800154c:	40003800 	.word	0x40003800
 8001550:	40020800 	.word	0x40020800
 8001554:	40020400 	.word	0x40020400
 8001558:	40003c00 	.word	0x40003c00

0800155c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a19      	ldr	r2, [pc, #100]	; (80015e0 <HAL_UART_MspInit+0x84>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d12b      	bne.n	80015d6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <HAL_UART_MspInit+0x88>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	4a17      	ldr	r2, [pc, #92]	; (80015e4 <HAL_UART_MspInit+0x88>)
 8001588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800158c:	6413      	str	r3, [r2, #64]	; 0x40
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_UART_MspInit+0x88>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <HAL_UART_MspInit+0x88>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a10      	ldr	r2, [pc, #64]	; (80015e4 <HAL_UART_MspInit+0x88>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <HAL_UART_MspInit+0x88>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015b6:	230c      	movs	r3, #12
 80015b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	2302      	movs	r3, #2
 80015bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c2:	2303      	movs	r3, #3
 80015c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015c6:	2307      	movs	r3, #7
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	4619      	mov	r1, r3
 80015d0:	4805      	ldr	r0, [pc, #20]	; (80015e8 <HAL_UART_MspInit+0x8c>)
 80015d2:	f000 fa65 	bl	8001aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015d6:	bf00      	nop
 80015d8:	3728      	adds	r7, #40	; 0x28
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40004400 	.word	0x40004400
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40020000 	.word	0x40020000

080015ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <NMI_Handler+0x4>

080015f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f6:	e7fe      	b.n	80015f6 <HardFault_Handler+0x4>

080015f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <MemManage_Handler+0x4>

080015fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <BusFault_Handler+0x4>

08001604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <UsageFault_Handler+0x4>

0800160a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001638:	f000 f8dc 	bl	80017f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}

08001640 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nRF_EL_IRQ_Pin);
 8001644:	2002      	movs	r0, #2
 8001646:	f000 fbe1 	bl	8001e0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}

0800164e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nRF_B_IRQ1_Pin);
 8001652:	2010      	movs	r0, #16
 8001654:	f000 fbda 	bl	8001e0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}

0800165c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nRF_B_IRQ4_Pin);
 8001660:	2040      	movs	r0, #64	; 0x40
 8001662:	f000 fbd3 	bl	8001e0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001674:	4a14      	ldr	r2, [pc, #80]	; (80016c8 <_sbrk+0x5c>)
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <_sbrk+0x60>)
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001680:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d102      	bne.n	800168e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <_sbrk+0x64>)
 800168a:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <_sbrk+0x68>)
 800168c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	429a      	cmp	r2, r3
 800169a:	d207      	bcs.n	80016ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800169c:	f005 f8cc 	bl	8006838 <__errno>
 80016a0:	4603      	mov	r3, r0
 80016a2:	220c      	movs	r2, #12
 80016a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
 80016aa:	e009      	b.n	80016c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <_sbrk+0x64>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b2:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <_sbrk+0x64>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <_sbrk+0x64>)
 80016bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016be:	68fb      	ldr	r3, [r7, #12]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20020000 	.word	0x20020000
 80016cc:	00000400 	.word	0x00000400
 80016d0:	20000354 	.word	0x20000354
 80016d4:	20000370 	.word	0x20000370

080016d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <SystemInit+0x20>)
 80016de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016e2:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <SystemInit+0x20>)
 80016e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001734 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001700:	480d      	ldr	r0, [pc, #52]	; (8001738 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001702:	490e      	ldr	r1, [pc, #56]	; (800173c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001704:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001708:	e002      	b.n	8001710 <LoopCopyDataInit>

0800170a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800170c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800170e:	3304      	adds	r3, #4

08001710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001714:	d3f9      	bcc.n	800170a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001716:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001718:	4c0b      	ldr	r4, [pc, #44]	; (8001748 <LoopFillZerobss+0x26>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800171c:	e001      	b.n	8001722 <LoopFillZerobss>

0800171e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800171e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001720:	3204      	adds	r2, #4

08001722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001724:	d3fb      	bcc.n	800171e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001726:	f7ff ffd7 	bl	80016d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800172a:	f005 f88b 	bl	8006844 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800172e:	f7fe ff55 	bl	80005dc <main>
  bx  lr    
 8001732:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001734:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800173c:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8001740:	080076b4 	.word	0x080076b4
  ldr r2, =_sbss
 8001744:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8001748:	2000036c 	.word	0x2000036c

0800174c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800174c:	e7fe      	b.n	800174c <ADC_IRQHandler>
	...

08001750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001754:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <HAL_Init+0x40>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0d      	ldr	r2, [pc, #52]	; (8001790 <HAL_Init+0x40>)
 800175a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800175e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <HAL_Init+0x40>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <HAL_Init+0x40>)
 8001766:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800176a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <HAL_Init+0x40>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a07      	ldr	r2, [pc, #28]	; (8001790 <HAL_Init+0x40>)
 8001772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001776:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001778:	2003      	movs	r0, #3
 800177a:	f000 f94f 	bl	8001a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800177e:	200f      	movs	r0, #15
 8001780:	f000 f808 	bl	8001794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001784:	f7ff fdee 	bl	8001364 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023c00 	.word	0x40023c00

08001794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_InitTick+0x54>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_InitTick+0x58>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	4619      	mov	r1, r3
 80017a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f967 	bl	8001a86 <HAL_SYSTICK_Config>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e00e      	b.n	80017e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b0f      	cmp	r3, #15
 80017c6:	d80a      	bhi.n	80017de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c8:	2200      	movs	r2, #0
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	f04f 30ff 	mov.w	r0, #4294967295
 80017d0:	f000 f92f 	bl	8001a32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d4:	4a06      	ldr	r2, [pc, #24]	; (80017f0 <HAL_InitTick+0x5c>)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	e000      	b.n	80017e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000054 	.word	0x20000054
 80017ec:	2000005c 	.word	0x2000005c
 80017f0:	20000058 	.word	0x20000058

080017f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_IncTick+0x20>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_IncTick+0x24>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4413      	add	r3, r2
 8001804:	4a04      	ldr	r2, [pc, #16]	; (8001818 <HAL_IncTick+0x24>)
 8001806:	6013      	str	r3, [r2, #0]
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	2000005c 	.word	0x2000005c
 8001818:	20000358 	.word	0x20000358

0800181c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return uwTick;
 8001820:	4b03      	ldr	r3, [pc, #12]	; (8001830 <HAL_GetTick+0x14>)
 8001822:	681b      	ldr	r3, [r3, #0]
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	20000358 	.word	0x20000358

08001834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800183c:	f7ff ffee 	bl	800181c <HAL_GetTick>
 8001840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800184c:	d005      	beq.n	800185a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800184e:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <HAL_Delay+0x44>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	461a      	mov	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4413      	add	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800185a:	bf00      	nop
 800185c:	f7ff ffde 	bl	800181c <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	429a      	cmp	r2, r3
 800186a:	d8f7      	bhi.n	800185c <HAL_Delay+0x28>
  {
  }
}
 800186c:	bf00      	nop
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	2000005c 	.word	0x2000005c

0800187c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800188c:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <__NVIC_SetPriorityGrouping+0x44>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001898:	4013      	ands	r3, r2
 800189a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ae:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <__NVIC_SetPriorityGrouping+0x44>)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	60d3      	str	r3, [r2, #12]
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <__NVIC_GetPriorityGrouping+0x18>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	0a1b      	lsrs	r3, r3, #8
 80018ce:	f003 0307 	and.w	r3, r3, #7
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	db0b      	blt.n	800190a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	f003 021f 	and.w	r2, r3, #31
 80018f8:	4907      	ldr	r1, [pc, #28]	; (8001918 <__NVIC_EnableIRQ+0x38>)
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	095b      	lsrs	r3, r3, #5
 8001900:	2001      	movs	r0, #1
 8001902:	fa00 f202 	lsl.w	r2, r0, r2
 8001906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000e100 	.word	0xe000e100

0800191c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	6039      	str	r1, [r7, #0]
 8001926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192c:	2b00      	cmp	r3, #0
 800192e:	db0a      	blt.n	8001946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	b2da      	uxtb	r2, r3
 8001934:	490c      	ldr	r1, [pc, #48]	; (8001968 <__NVIC_SetPriority+0x4c>)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	0112      	lsls	r2, r2, #4
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	440b      	add	r3, r1
 8001940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001944:	e00a      	b.n	800195c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	b2da      	uxtb	r2, r3
 800194a:	4908      	ldr	r1, [pc, #32]	; (800196c <__NVIC_SetPriority+0x50>)
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	3b04      	subs	r3, #4
 8001954:	0112      	lsls	r2, r2, #4
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	440b      	add	r3, r1
 800195a:	761a      	strb	r2, [r3, #24]
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000e100 	.word	0xe000e100
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001970:	b480      	push	{r7}
 8001972:	b089      	sub	sp, #36	; 0x24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f1c3 0307 	rsb	r3, r3, #7
 800198a:	2b04      	cmp	r3, #4
 800198c:	bf28      	it	cs
 800198e:	2304      	movcs	r3, #4
 8001990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3304      	adds	r3, #4
 8001996:	2b06      	cmp	r3, #6
 8001998:	d902      	bls.n	80019a0 <NVIC_EncodePriority+0x30>
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3b03      	subs	r3, #3
 800199e:	e000      	b.n	80019a2 <NVIC_EncodePriority+0x32>
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a4:	f04f 32ff 	mov.w	r2, #4294967295
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43da      	mvns	r2, r3
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	401a      	ands	r2, r3
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b8:	f04f 31ff 	mov.w	r1, #4294967295
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	fa01 f303 	lsl.w	r3, r1, r3
 80019c2:	43d9      	mvns	r1, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c8:	4313      	orrs	r3, r2
         );
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3724      	adds	r7, #36	; 0x24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e8:	d301      	bcc.n	80019ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ea:	2301      	movs	r3, #1
 80019ec:	e00f      	b.n	8001a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ee:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <SysTick_Config+0x40>)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019f6:	210f      	movs	r1, #15
 80019f8:	f04f 30ff 	mov.w	r0, #4294967295
 80019fc:	f7ff ff8e 	bl	800191c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a00:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <SysTick_Config+0x40>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a06:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <SysTick_Config+0x40>)
 8001a08:	2207      	movs	r2, #7
 8001a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	e000e010 	.word	0xe000e010

08001a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ff29 	bl	800187c <__NVIC_SetPriorityGrouping>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b086      	sub	sp, #24
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
 8001a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a44:	f7ff ff3e 	bl	80018c4 <__NVIC_GetPriorityGrouping>
 8001a48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	68b9      	ldr	r1, [r7, #8]
 8001a4e:	6978      	ldr	r0, [r7, #20]
 8001a50:	f7ff ff8e 	bl	8001970 <NVIC_EncodePriority>
 8001a54:	4602      	mov	r2, r0
 8001a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff5d 	bl	800191c <__NVIC_SetPriority>
}
 8001a62:	bf00      	nop
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	4603      	mov	r3, r0
 8001a72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff31 	bl	80018e0 <__NVIC_EnableIRQ>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff ffa2 	bl	80019d8 <SysTick_Config>
 8001a94:	4603      	mov	r3, r0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b089      	sub	sp, #36	; 0x24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
 8001aba:	e16b      	b.n	8001d94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001abc:	2201      	movs	r2, #1
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	f040 815a 	bne.w	8001d8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d005      	beq.n	8001af2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d130      	bne.n	8001b54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	2203      	movs	r2, #3
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b28:	2201      	movs	r2, #1
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	091b      	lsrs	r3, r3, #4
 8001b3e:	f003 0201 	and.w	r2, r3, #1
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d017      	beq.n	8001b90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d123      	bne.n	8001be4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	08da      	lsrs	r2, r3, #3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3208      	adds	r2, #8
 8001ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	220f      	movs	r2, #15
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	691a      	ldr	r2, [r3, #16]
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	08da      	lsrs	r2, r3, #3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3208      	adds	r2, #8
 8001bde:	69b9      	ldr	r1, [r7, #24]
 8001be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	2203      	movs	r2, #3
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 0203 	and.w	r2, r3, #3
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 80b4 	beq.w	8001d8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b60      	ldr	r3, [pc, #384]	; (8001dac <HAL_GPIO_Init+0x30c>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	4a5f      	ldr	r2, [pc, #380]	; (8001dac <HAL_GPIO_Init+0x30c>)
 8001c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c34:	6453      	str	r3, [r2, #68]	; 0x44
 8001c36:	4b5d      	ldr	r3, [pc, #372]	; (8001dac <HAL_GPIO_Init+0x30c>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c42:	4a5b      	ldr	r2, [pc, #364]	; (8001db0 <HAL_GPIO_Init+0x310>)
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	089b      	lsrs	r3, r3, #2
 8001c48:	3302      	adds	r3, #2
 8001c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	220f      	movs	r2, #15
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a52      	ldr	r2, [pc, #328]	; (8001db4 <HAL_GPIO_Init+0x314>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d02b      	beq.n	8001cc6 <HAL_GPIO_Init+0x226>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a51      	ldr	r2, [pc, #324]	; (8001db8 <HAL_GPIO_Init+0x318>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d025      	beq.n	8001cc2 <HAL_GPIO_Init+0x222>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a50      	ldr	r2, [pc, #320]	; (8001dbc <HAL_GPIO_Init+0x31c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d01f      	beq.n	8001cbe <HAL_GPIO_Init+0x21e>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a4f      	ldr	r2, [pc, #316]	; (8001dc0 <HAL_GPIO_Init+0x320>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d019      	beq.n	8001cba <HAL_GPIO_Init+0x21a>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a4e      	ldr	r2, [pc, #312]	; (8001dc4 <HAL_GPIO_Init+0x324>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d013      	beq.n	8001cb6 <HAL_GPIO_Init+0x216>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a4d      	ldr	r2, [pc, #308]	; (8001dc8 <HAL_GPIO_Init+0x328>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d00d      	beq.n	8001cb2 <HAL_GPIO_Init+0x212>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a4c      	ldr	r2, [pc, #304]	; (8001dcc <HAL_GPIO_Init+0x32c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d007      	beq.n	8001cae <HAL_GPIO_Init+0x20e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a4b      	ldr	r2, [pc, #300]	; (8001dd0 <HAL_GPIO_Init+0x330>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d101      	bne.n	8001caa <HAL_GPIO_Init+0x20a>
 8001ca6:	2307      	movs	r3, #7
 8001ca8:	e00e      	b.n	8001cc8 <HAL_GPIO_Init+0x228>
 8001caa:	2308      	movs	r3, #8
 8001cac:	e00c      	b.n	8001cc8 <HAL_GPIO_Init+0x228>
 8001cae:	2306      	movs	r3, #6
 8001cb0:	e00a      	b.n	8001cc8 <HAL_GPIO_Init+0x228>
 8001cb2:	2305      	movs	r3, #5
 8001cb4:	e008      	b.n	8001cc8 <HAL_GPIO_Init+0x228>
 8001cb6:	2304      	movs	r3, #4
 8001cb8:	e006      	b.n	8001cc8 <HAL_GPIO_Init+0x228>
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e004      	b.n	8001cc8 <HAL_GPIO_Init+0x228>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e002      	b.n	8001cc8 <HAL_GPIO_Init+0x228>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <HAL_GPIO_Init+0x228>
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	69fa      	ldr	r2, [r7, #28]
 8001cca:	f002 0203 	and.w	r2, r2, #3
 8001cce:	0092      	lsls	r2, r2, #2
 8001cd0:	4093      	lsls	r3, r2
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cd8:	4935      	ldr	r1, [pc, #212]	; (8001db0 <HAL_GPIO_Init+0x310>)
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	089b      	lsrs	r3, r3, #2
 8001cde:	3302      	adds	r3, #2
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ce6:	4b3b      	ldr	r3, [pc, #236]	; (8001dd4 <HAL_GPIO_Init+0x334>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d0a:	4a32      	ldr	r2, [pc, #200]	; (8001dd4 <HAL_GPIO_Init+0x334>)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d10:	4b30      	ldr	r3, [pc, #192]	; (8001dd4 <HAL_GPIO_Init+0x334>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d34:	4a27      	ldr	r2, [pc, #156]	; (8001dd4 <HAL_GPIO_Init+0x334>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d3a:	4b26      	ldr	r3, [pc, #152]	; (8001dd4 <HAL_GPIO_Init+0x334>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d5e:	4a1d      	ldr	r2, [pc, #116]	; (8001dd4 <HAL_GPIO_Init+0x334>)
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d64:	4b1b      	ldr	r3, [pc, #108]	; (8001dd4 <HAL_GPIO_Init+0x334>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d88:	4a12      	ldr	r2, [pc, #72]	; (8001dd4 <HAL_GPIO_Init+0x334>)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3301      	adds	r3, #1
 8001d92:	61fb      	str	r3, [r7, #28]
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	2b0f      	cmp	r3, #15
 8001d98:	f67f ae90 	bls.w	8001abc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	3724      	adds	r7, #36	; 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40013800 	.word	0x40013800
 8001db4:	40020000 	.word	0x40020000
 8001db8:	40020400 	.word	0x40020400
 8001dbc:	40020800 	.word	0x40020800
 8001dc0:	40020c00 	.word	0x40020c00
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40021400 	.word	0x40021400
 8001dcc:	40021800 	.word	0x40021800
 8001dd0:	40021c00 	.word	0x40021c00
 8001dd4:	40013c00 	.word	0x40013c00

08001dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	807b      	strh	r3, [r7, #2]
 8001de4:	4613      	mov	r3, r2
 8001de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001de8:	787b      	ldrb	r3, [r7, #1]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dee:	887a      	ldrh	r2, [r7, #2]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001df4:	e003      	b.n	8001dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001df6:	887b      	ldrh	r3, [r7, #2]
 8001df8:	041a      	lsls	r2, r3, #16
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	619a      	str	r2, [r3, #24]
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e16:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e18:	695a      	ldr	r2, [r3, #20]
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d006      	beq.n	8001e30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e22:	4a05      	ldr	r2, [pc, #20]	; (8001e38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e24:	88fb      	ldrh	r3, [r7, #6]
 8001e26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e28:	88fb      	ldrh	r3, [r7, #6]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 f806 	bl	8001e3c <HAL_GPIO_EXTI_Callback>
  }
}
 8001e30:	bf00      	nop
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40013c00 	.word	0x40013c00

08001e3c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
	...

08001e54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e267      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d075      	beq.n	8001f5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e72:	4b88      	ldr	r3, [pc, #544]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 030c 	and.w	r3, r3, #12
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	d00c      	beq.n	8001e98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e7e:	4b85      	ldr	r3, [pc, #532]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d112      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e8a:	4b82      	ldr	r3, [pc, #520]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e96:	d10b      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e98:	4b7e      	ldr	r3, [pc, #504]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d05b      	beq.n	8001f5c <HAL_RCC_OscConfig+0x108>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d157      	bne.n	8001f5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e242      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb8:	d106      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x74>
 8001eba:	4b76      	ldr	r3, [pc, #472]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a75      	ldr	r2, [pc, #468]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	e01d      	b.n	8001f04 <HAL_RCC_OscConfig+0xb0>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ed0:	d10c      	bne.n	8001eec <HAL_RCC_OscConfig+0x98>
 8001ed2:	4b70      	ldr	r3, [pc, #448]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a6f      	ldr	r2, [pc, #444]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	4b6d      	ldr	r3, [pc, #436]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a6c      	ldr	r2, [pc, #432]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	e00b      	b.n	8001f04 <HAL_RCC_OscConfig+0xb0>
 8001eec:	4b69      	ldr	r3, [pc, #420]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a68      	ldr	r2, [pc, #416]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	4b66      	ldr	r3, [pc, #408]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a65      	ldr	r2, [pc, #404]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d013      	beq.n	8001f34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0c:	f7ff fc86 	bl	800181c <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f14:	f7ff fc82 	bl	800181c <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b64      	cmp	r3, #100	; 0x64
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e207      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f26:	4b5b      	ldr	r3, [pc, #364]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0f0      	beq.n	8001f14 <HAL_RCC_OscConfig+0xc0>
 8001f32:	e014      	b.n	8001f5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7ff fc72 	bl	800181c <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f3c:	f7ff fc6e 	bl	800181c <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b64      	cmp	r3, #100	; 0x64
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e1f3      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4e:	4b51      	ldr	r3, [pc, #324]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f0      	bne.n	8001f3c <HAL_RCC_OscConfig+0xe8>
 8001f5a:	e000      	b.n	8001f5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d063      	beq.n	8002032 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f6a:	4b4a      	ldr	r3, [pc, #296]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00b      	beq.n	8001f8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f76:	4b47      	ldr	r3, [pc, #284]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d11c      	bne.n	8001fbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f82:	4b44      	ldr	r3, [pc, #272]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d116      	bne.n	8001fbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8e:	4b41      	ldr	r3, [pc, #260]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d005      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x152>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d001      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e1c7      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa6:	4b3b      	ldr	r3, [pc, #236]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	4937      	ldr	r1, [pc, #220]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fba:	e03a      	b.n	8002032 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d020      	beq.n	8002006 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fc4:	4b34      	ldr	r3, [pc, #208]	; (8002098 <HAL_RCC_OscConfig+0x244>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fca:	f7ff fc27 	bl	800181c <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd2:	f7ff fc23 	bl	800181c <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e1a8      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe4:	4b2b      	ldr	r3, [pc, #172]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0f0      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff0:	4b28      	ldr	r3, [pc, #160]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4925      	ldr	r1, [pc, #148]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8002000:	4313      	orrs	r3, r2
 8002002:	600b      	str	r3, [r1, #0]
 8002004:	e015      	b.n	8002032 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002006:	4b24      	ldr	r3, [pc, #144]	; (8002098 <HAL_RCC_OscConfig+0x244>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200c:	f7ff fc06 	bl	800181c <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002014:	f7ff fc02 	bl	800181c <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e187      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002026:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d036      	beq.n	80020ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d016      	beq.n	8002074 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002046:	4b15      	ldr	r3, [pc, #84]	; (800209c <HAL_RCC_OscConfig+0x248>)
 8002048:	2201      	movs	r2, #1
 800204a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204c:	f7ff fbe6 	bl	800181c <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002054:	f7ff fbe2 	bl	800181c <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e167      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002066:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8002068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0x200>
 8002072:	e01b      	b.n	80020ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002074:	4b09      	ldr	r3, [pc, #36]	; (800209c <HAL_RCC_OscConfig+0x248>)
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207a:	f7ff fbcf 	bl	800181c <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002080:	e00e      	b.n	80020a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002082:	f7ff fbcb 	bl	800181c <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d907      	bls.n	80020a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e150      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
 8002094:	40023800 	.word	0x40023800
 8002098:	42470000 	.word	0x42470000
 800209c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a0:	4b88      	ldr	r3, [pc, #544]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 80020a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1ea      	bne.n	8002082 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 8097 	beq.w	80021e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ba:	2300      	movs	r3, #0
 80020bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020be:	4b81      	ldr	r3, [pc, #516]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10f      	bne.n	80020ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	4b7d      	ldr	r3, [pc, #500]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	4a7c      	ldr	r2, [pc, #496]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 80020d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d8:	6413      	str	r3, [r2, #64]	; 0x40
 80020da:	4b7a      	ldr	r3, [pc, #488]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e6:	2301      	movs	r3, #1
 80020e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ea:	4b77      	ldr	r3, [pc, #476]	; (80022c8 <HAL_RCC_OscConfig+0x474>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d118      	bne.n	8002128 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020f6:	4b74      	ldr	r3, [pc, #464]	; (80022c8 <HAL_RCC_OscConfig+0x474>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a73      	ldr	r2, [pc, #460]	; (80022c8 <HAL_RCC_OscConfig+0x474>)
 80020fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002100:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002102:	f7ff fb8b 	bl	800181c <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210a:	f7ff fb87 	bl	800181c <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e10c      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211c:	4b6a      	ldr	r3, [pc, #424]	; (80022c8 <HAL_RCC_OscConfig+0x474>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d106      	bne.n	800213e <HAL_RCC_OscConfig+0x2ea>
 8002130:	4b64      	ldr	r3, [pc, #400]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 8002132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002134:	4a63      	ldr	r2, [pc, #396]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	6713      	str	r3, [r2, #112]	; 0x70
 800213c:	e01c      	b.n	8002178 <HAL_RCC_OscConfig+0x324>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b05      	cmp	r3, #5
 8002144:	d10c      	bne.n	8002160 <HAL_RCC_OscConfig+0x30c>
 8002146:	4b5f      	ldr	r3, [pc, #380]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 8002148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214a:	4a5e      	ldr	r2, [pc, #376]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 800214c:	f043 0304 	orr.w	r3, r3, #4
 8002150:	6713      	str	r3, [r2, #112]	; 0x70
 8002152:	4b5c      	ldr	r3, [pc, #368]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 8002154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002156:	4a5b      	ldr	r2, [pc, #364]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6713      	str	r3, [r2, #112]	; 0x70
 800215e:	e00b      	b.n	8002178 <HAL_RCC_OscConfig+0x324>
 8002160:	4b58      	ldr	r3, [pc, #352]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 8002162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002164:	4a57      	ldr	r2, [pc, #348]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 8002166:	f023 0301 	bic.w	r3, r3, #1
 800216a:	6713      	str	r3, [r2, #112]	; 0x70
 800216c:	4b55      	ldr	r3, [pc, #340]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 800216e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002170:	4a54      	ldr	r2, [pc, #336]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 8002172:	f023 0304 	bic.w	r3, r3, #4
 8002176:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d015      	beq.n	80021ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002180:	f7ff fb4c 	bl	800181c <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002186:	e00a      	b.n	800219e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002188:	f7ff fb48 	bl	800181c <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	f241 3288 	movw	r2, #5000	; 0x1388
 8002196:	4293      	cmp	r3, r2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e0cb      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219e:	4b49      	ldr	r3, [pc, #292]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 80021a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0ee      	beq.n	8002188 <HAL_RCC_OscConfig+0x334>
 80021aa:	e014      	b.n	80021d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ac:	f7ff fb36 	bl	800181c <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b2:	e00a      	b.n	80021ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b4:	f7ff fb32 	bl	800181c <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e0b5      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ca:	4b3e      	ldr	r3, [pc, #248]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 80021cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1ee      	bne.n	80021b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021d6:	7dfb      	ldrb	r3, [r7, #23]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d105      	bne.n	80021e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021dc:	4b39      	ldr	r3, [pc, #228]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	4a38      	ldr	r2, [pc, #224]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 80021e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 80a1 	beq.w	8002334 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021f2:	4b34      	ldr	r3, [pc, #208]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	d05c      	beq.n	80022b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d141      	bne.n	800228a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002206:	4b31      	ldr	r3, [pc, #196]	; (80022cc <HAL_RCC_OscConfig+0x478>)
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7ff fb06 	bl	800181c <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002214:	f7ff fb02 	bl	800181c <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e087      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002226:	4b27      	ldr	r3, [pc, #156]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69da      	ldr	r2, [r3, #28]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	019b      	lsls	r3, r3, #6
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002248:	085b      	lsrs	r3, r3, #1
 800224a:	3b01      	subs	r3, #1
 800224c:	041b      	lsls	r3, r3, #16
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002254:	061b      	lsls	r3, r3, #24
 8002256:	491b      	ldr	r1, [pc, #108]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 8002258:	4313      	orrs	r3, r2
 800225a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800225c:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <HAL_RCC_OscConfig+0x478>)
 800225e:	2201      	movs	r2, #1
 8002260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002262:	f7ff fadb 	bl	800181c <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226a:	f7ff fad7 	bl	800181c <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e05c      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800227c:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0f0      	beq.n	800226a <HAL_RCC_OscConfig+0x416>
 8002288:	e054      	b.n	8002334 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <HAL_RCC_OscConfig+0x478>)
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7ff fac4 	bl	800181c <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002298:	f7ff fac0 	bl	800181c <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e045      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x444>
 80022b6:	e03d      	b.n	8002334 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d107      	bne.n	80022d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e038      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40007000 	.word	0x40007000
 80022cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022d0:	4b1b      	ldr	r3, [pc, #108]	; (8002340 <HAL_RCC_OscConfig+0x4ec>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d028      	beq.n	8002330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d121      	bne.n	8002330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d11a      	bne.n	8002330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002300:	4013      	ands	r3, r2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002306:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002308:	4293      	cmp	r3, r2
 800230a:	d111      	bne.n	8002330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002316:	085b      	lsrs	r3, r3, #1
 8002318:	3b01      	subs	r3, #1
 800231a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800231c:	429a      	cmp	r2, r3
 800231e:	d107      	bne.n	8002330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800232c:	429a      	cmp	r2, r3
 800232e:	d001      	beq.n	8002334 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e000      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800

08002344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e0cc      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002358:	4b68      	ldr	r3, [pc, #416]	; (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d90c      	bls.n	8002380 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002366:	4b65      	ldr	r3, [pc, #404]	; (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800236e:	4b63      	ldr	r3, [pc, #396]	; (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0b8      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d020      	beq.n	80023ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002398:	4b59      	ldr	r3, [pc, #356]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	4a58      	ldr	r2, [pc, #352]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0308 	and.w	r3, r3, #8
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023b0:	4b53      	ldr	r3, [pc, #332]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	4a52      	ldr	r2, [pc, #328]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023bc:	4b50      	ldr	r3, [pc, #320]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	494d      	ldr	r1, [pc, #308]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d044      	beq.n	8002464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d107      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e2:	4b47      	ldr	r3, [pc, #284]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d119      	bne.n	8002422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e07f      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d003      	beq.n	8002402 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d107      	bne.n	8002412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002402:	4b3f      	ldr	r3, [pc, #252]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d109      	bne.n	8002422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e06f      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002412:	4b3b      	ldr	r3, [pc, #236]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e067      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002422:	4b37      	ldr	r3, [pc, #220]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f023 0203 	bic.w	r2, r3, #3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	4934      	ldr	r1, [pc, #208]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	4313      	orrs	r3, r2
 8002432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002434:	f7ff f9f2 	bl	800181c <HAL_GetTick>
 8002438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243a:	e00a      	b.n	8002452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800243c:	f7ff f9ee 	bl	800181c <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	; 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e04f      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002452:	4b2b      	ldr	r3, [pc, #172]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 020c 	and.w	r2, r3, #12
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	429a      	cmp	r2, r3
 8002462:	d1eb      	bne.n	800243c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002464:	4b25      	ldr	r3, [pc, #148]	; (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d20c      	bcs.n	800248c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002472:	4b22      	ldr	r3, [pc, #136]	; (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800247a:	4b20      	ldr	r3, [pc, #128]	; (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d001      	beq.n	800248c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e032      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002498:	4b19      	ldr	r3, [pc, #100]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	4916      	ldr	r1, [pc, #88]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d009      	beq.n	80024ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024b6:	4b12      	ldr	r3, [pc, #72]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	490e      	ldr	r1, [pc, #56]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024ca:	f000 f821 	bl	8002510 <HAL_RCC_GetSysClockFreq>
 80024ce:	4602      	mov	r2, r0
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	490a      	ldr	r1, [pc, #40]	; (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 80024dc:	5ccb      	ldrb	r3, [r1, r3]
 80024de:	fa22 f303 	lsr.w	r3, r2, r3
 80024e2:	4a09      	ldr	r2, [pc, #36]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80024e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024e6:	4b09      	ldr	r3, [pc, #36]	; (800250c <HAL_RCC_ClockConfig+0x1c8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff f952 	bl	8001794 <HAL_InitTick>

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40023c00 	.word	0x40023c00
 8002500:	40023800 	.word	0x40023800
 8002504:	08007658 	.word	0x08007658
 8002508:	20000054 	.word	0x20000054
 800250c:	20000058 	.word	0x20000058

08002510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002514:	b090      	sub	sp, #64	; 0x40
 8002516:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	637b      	str	r3, [r7, #52]	; 0x34
 800251c:	2300      	movs	r3, #0
 800251e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002520:	2300      	movs	r3, #0
 8002522:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002528:	4b59      	ldr	r3, [pc, #356]	; (8002690 <HAL_RCC_GetSysClockFreq+0x180>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 030c 	and.w	r3, r3, #12
 8002530:	2b08      	cmp	r3, #8
 8002532:	d00d      	beq.n	8002550 <HAL_RCC_GetSysClockFreq+0x40>
 8002534:	2b08      	cmp	r3, #8
 8002536:	f200 80a1 	bhi.w	800267c <HAL_RCC_GetSysClockFreq+0x16c>
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <HAL_RCC_GetSysClockFreq+0x34>
 800253e:	2b04      	cmp	r3, #4
 8002540:	d003      	beq.n	800254a <HAL_RCC_GetSysClockFreq+0x3a>
 8002542:	e09b      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002544:	4b53      	ldr	r3, [pc, #332]	; (8002694 <HAL_RCC_GetSysClockFreq+0x184>)
 8002546:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002548:	e09b      	b.n	8002682 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800254a:	4b53      	ldr	r3, [pc, #332]	; (8002698 <HAL_RCC_GetSysClockFreq+0x188>)
 800254c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800254e:	e098      	b.n	8002682 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002550:	4b4f      	ldr	r3, [pc, #316]	; (8002690 <HAL_RCC_GetSysClockFreq+0x180>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002558:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800255a:	4b4d      	ldr	r3, [pc, #308]	; (8002690 <HAL_RCC_GetSysClockFreq+0x180>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d028      	beq.n	80025b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002566:	4b4a      	ldr	r3, [pc, #296]	; (8002690 <HAL_RCC_GetSysClockFreq+0x180>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	099b      	lsrs	r3, r3, #6
 800256c:	2200      	movs	r2, #0
 800256e:	623b      	str	r3, [r7, #32]
 8002570:	627a      	str	r2, [r7, #36]	; 0x24
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002578:	2100      	movs	r1, #0
 800257a:	4b47      	ldr	r3, [pc, #284]	; (8002698 <HAL_RCC_GetSysClockFreq+0x188>)
 800257c:	fb03 f201 	mul.w	r2, r3, r1
 8002580:	2300      	movs	r3, #0
 8002582:	fb00 f303 	mul.w	r3, r0, r3
 8002586:	4413      	add	r3, r2
 8002588:	4a43      	ldr	r2, [pc, #268]	; (8002698 <HAL_RCC_GetSysClockFreq+0x188>)
 800258a:	fba0 1202 	umull	r1, r2, r0, r2
 800258e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002590:	460a      	mov	r2, r1
 8002592:	62ba      	str	r2, [r7, #40]	; 0x28
 8002594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002596:	4413      	add	r3, r2
 8002598:	62fb      	str	r3, [r7, #44]	; 0x2c
 800259a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800259c:	2200      	movs	r2, #0
 800259e:	61bb      	str	r3, [r7, #24]
 80025a0:	61fa      	str	r2, [r7, #28]
 80025a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80025aa:	f7fd fe69 	bl	8000280 <__aeabi_uldivmod>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	4613      	mov	r3, r2
 80025b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025b6:	e053      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025b8:	4b35      	ldr	r3, [pc, #212]	; (8002690 <HAL_RCC_GetSysClockFreq+0x180>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	099b      	lsrs	r3, r3, #6
 80025be:	2200      	movs	r2, #0
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	617a      	str	r2, [r7, #20]
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025ca:	f04f 0b00 	mov.w	fp, #0
 80025ce:	4652      	mov	r2, sl
 80025d0:	465b      	mov	r3, fp
 80025d2:	f04f 0000 	mov.w	r0, #0
 80025d6:	f04f 0100 	mov.w	r1, #0
 80025da:	0159      	lsls	r1, r3, #5
 80025dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025e0:	0150      	lsls	r0, r2, #5
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	ebb2 080a 	subs.w	r8, r2, sl
 80025ea:	eb63 090b 	sbc.w	r9, r3, fp
 80025ee:	f04f 0200 	mov.w	r2, #0
 80025f2:	f04f 0300 	mov.w	r3, #0
 80025f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80025fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80025fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002602:	ebb2 0408 	subs.w	r4, r2, r8
 8002606:	eb63 0509 	sbc.w	r5, r3, r9
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	f04f 0300 	mov.w	r3, #0
 8002612:	00eb      	lsls	r3, r5, #3
 8002614:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002618:	00e2      	lsls	r2, r4, #3
 800261a:	4614      	mov	r4, r2
 800261c:	461d      	mov	r5, r3
 800261e:	eb14 030a 	adds.w	r3, r4, sl
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	eb45 030b 	adc.w	r3, r5, fp
 8002628:	607b      	str	r3, [r7, #4]
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	f04f 0300 	mov.w	r3, #0
 8002632:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002636:	4629      	mov	r1, r5
 8002638:	028b      	lsls	r3, r1, #10
 800263a:	4621      	mov	r1, r4
 800263c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002640:	4621      	mov	r1, r4
 8002642:	028a      	lsls	r2, r1, #10
 8002644:	4610      	mov	r0, r2
 8002646:	4619      	mov	r1, r3
 8002648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800264a:	2200      	movs	r2, #0
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	60fa      	str	r2, [r7, #12]
 8002650:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002654:	f7fd fe14 	bl	8000280 <__aeabi_uldivmod>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4613      	mov	r3, r2
 800265e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002660:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <HAL_RCC_GetSysClockFreq+0x180>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	0c1b      	lsrs	r3, r3, #16
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	3301      	adds	r3, #1
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002670:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002674:	fbb2 f3f3 	udiv	r3, r2, r3
 8002678:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800267a:	e002      	b.n	8002682 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <HAL_RCC_GetSysClockFreq+0x184>)
 800267e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002680:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002684:	4618      	mov	r0, r3
 8002686:	3740      	adds	r7, #64	; 0x40
 8002688:	46bd      	mov	sp, r7
 800268a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800268e:	bf00      	nop
 8002690:	40023800 	.word	0x40023800
 8002694:	00f42400 	.word	0x00f42400
 8002698:	017d7840 	.word	0x017d7840

0800269c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026a0:	4b03      	ldr	r3, [pc, #12]	; (80026b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80026a2:	681b      	ldr	r3, [r3, #0]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	20000054 	.word	0x20000054

080026b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026b8:	f7ff fff0 	bl	800269c <HAL_RCC_GetHCLKFreq>
 80026bc:	4602      	mov	r2, r0
 80026be:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	0a9b      	lsrs	r3, r3, #10
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	4903      	ldr	r1, [pc, #12]	; (80026d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ca:	5ccb      	ldrb	r3, [r1, r3]
 80026cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40023800 	.word	0x40023800
 80026d8:	08007668 	.word	0x08007668

080026dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026e0:	f7ff ffdc 	bl	800269c <HAL_RCC_GetHCLKFreq>
 80026e4:	4602      	mov	r2, r0
 80026e6:	4b05      	ldr	r3, [pc, #20]	; (80026fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	0b5b      	lsrs	r3, r3, #13
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	4903      	ldr	r1, [pc, #12]	; (8002700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026f2:	5ccb      	ldrb	r3, [r1, r3]
 80026f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40023800 	.word	0x40023800
 8002700:	08007668 	.word	0x08007668

08002704 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e07b      	b.n	800280e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	2b00      	cmp	r3, #0
 800271c:	d108      	bne.n	8002730 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002726:	d009      	beq.n	800273c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	61da      	str	r2, [r3, #28]
 800272e:	e005      	b.n	800273c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d106      	bne.n	800275c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7fe fe2c 	bl	80013b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2202      	movs	r2, #2
 8002760:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002772:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002784:	431a      	orrs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c0:	ea42 0103 	orr.w	r1, r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	0c1b      	lsrs	r3, r3, #16
 80027da:	f003 0104 	and.w	r1, r3, #4
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	f003 0210 	and.w	r2, r3, #16
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	69da      	ldr	r2, [r3, #28]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b088      	sub	sp, #32
 800281a:	af00      	add	r7, sp, #0
 800281c:	60f8      	str	r0, [r7, #12]
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	603b      	str	r3, [r7, #0]
 8002822:	4613      	mov	r3, r2
 8002824:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002830:	2b01      	cmp	r3, #1
 8002832:	d101      	bne.n	8002838 <HAL_SPI_Transmit+0x22>
 8002834:	2302      	movs	r3, #2
 8002836:	e126      	b.n	8002a86 <HAL_SPI_Transmit+0x270>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002840:	f7fe ffec 	bl	800181c <HAL_GetTick>
 8002844:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002846:	88fb      	ldrh	r3, [r7, #6]
 8002848:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b01      	cmp	r3, #1
 8002854:	d002      	beq.n	800285c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002856:	2302      	movs	r3, #2
 8002858:	77fb      	strb	r3, [r7, #31]
    goto error;
 800285a:	e10b      	b.n	8002a74 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d002      	beq.n	8002868 <HAL_SPI_Transmit+0x52>
 8002862:	88fb      	ldrh	r3, [r7, #6]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d102      	bne.n	800286e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800286c:	e102      	b.n	8002a74 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2203      	movs	r2, #3
 8002872:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	88fa      	ldrh	r2, [r7, #6]
 8002886:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	88fa      	ldrh	r2, [r7, #6]
 800288c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028b4:	d10f      	bne.n	80028d6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e0:	2b40      	cmp	r3, #64	; 0x40
 80028e2:	d007      	beq.n	80028f4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028fc:	d14b      	bne.n	8002996 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d002      	beq.n	800290c <HAL_SPI_Transmit+0xf6>
 8002906:	8afb      	ldrh	r3, [r7, #22]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d13e      	bne.n	800298a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	881a      	ldrh	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	1c9a      	adds	r2, r3, #2
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002926:	b29b      	uxth	r3, r3
 8002928:	3b01      	subs	r3, #1
 800292a:	b29a      	uxth	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002930:	e02b      	b.n	800298a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b02      	cmp	r3, #2
 800293e:	d112      	bne.n	8002966 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	881a      	ldrh	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	1c9a      	adds	r2, r3, #2
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800295a:	b29b      	uxth	r3, r3
 800295c:	3b01      	subs	r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	86da      	strh	r2, [r3, #54]	; 0x36
 8002964:	e011      	b.n	800298a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002966:	f7fe ff59 	bl	800181c <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d803      	bhi.n	800297e <HAL_SPI_Transmit+0x168>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297c:	d102      	bne.n	8002984 <HAL_SPI_Transmit+0x16e>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d102      	bne.n	800298a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002988:	e074      	b.n	8002a74 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800298e:	b29b      	uxth	r3, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1ce      	bne.n	8002932 <HAL_SPI_Transmit+0x11c>
 8002994:	e04c      	b.n	8002a30 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <HAL_SPI_Transmit+0x18e>
 800299e:	8afb      	ldrh	r3, [r7, #22]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d140      	bne.n	8002a26 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	330c      	adds	r3, #12
 80029ae:	7812      	ldrb	r2, [r2, #0]
 80029b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80029ca:	e02c      	b.n	8002a26 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d113      	bne.n	8002a02 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	330c      	adds	r3, #12
 80029e4:	7812      	ldrb	r2, [r2, #0]
 80029e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a00:	e011      	b.n	8002a26 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a02:	f7fe ff0b 	bl	800181c <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d803      	bhi.n	8002a1a <HAL_SPI_Transmit+0x204>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a18:	d102      	bne.n	8002a20 <HAL_SPI_Transmit+0x20a>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d102      	bne.n	8002a26 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a24:	e026      	b.n	8002a74 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1cd      	bne.n	80029cc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	6839      	ldr	r1, [r7, #0]
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 fbcb 	bl	80031d0 <SPI_EndRxTxTransaction>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d002      	beq.n	8002a46 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2220      	movs	r2, #32
 8002a44:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10a      	bne.n	8002a64 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a4e:	2300      	movs	r3, #0
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d002      	beq.n	8002a72 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	77fb      	strb	r3, [r7, #31]
 8002a70:	e000      	b.n	8002a74 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002a72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a84:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3720      	adds	r7, #32
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b088      	sub	sp, #32
 8002a92:	af02      	add	r7, sp, #8
 8002a94:	60f8      	str	r0, [r7, #12]
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	603b      	str	r3, [r7, #0]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aaa:	d112      	bne.n	8002ad2 <HAL_SPI_Receive+0x44>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10e      	bne.n	8002ad2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2204      	movs	r2, #4
 8002ab8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002abc:	88fa      	ldrh	r2, [r7, #6]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	68ba      	ldr	r2, [r7, #8]
 8002ac6:	68b9      	ldr	r1, [r7, #8]
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f8f1 	bl	8002cb0 <HAL_SPI_TransmitReceive>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	e0ea      	b.n	8002ca8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_SPI_Receive+0x52>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e0e3      	b.n	8002ca8 <HAL_SPI_Receive+0x21a>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ae8:	f7fe fe98 	bl	800181c <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d002      	beq.n	8002b00 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002afa:	2302      	movs	r3, #2
 8002afc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002afe:	e0ca      	b.n	8002c96 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d002      	beq.n	8002b0c <HAL_SPI_Receive+0x7e>
 8002b06:	88fb      	ldrh	r3, [r7, #6]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d102      	bne.n	8002b12 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b10:	e0c1      	b.n	8002c96 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2204      	movs	r2, #4
 8002b16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	88fa      	ldrh	r2, [r7, #6]
 8002b2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	88fa      	ldrh	r2, [r7, #6]
 8002b30:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b58:	d10f      	bne.n	8002b7a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b78:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b84:	2b40      	cmp	r3, #64	; 0x40
 8002b86:	d007      	beq.n	8002b98 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b96:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d162      	bne.n	8002c66 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ba0:	e02e      	b.n	8002c00 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d115      	bne.n	8002bdc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f103 020c 	add.w	r2, r3, #12
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbc:	7812      	ldrb	r2, [r2, #0]
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bda:	e011      	b.n	8002c00 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bdc:	f7fe fe1e 	bl	800181c <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d803      	bhi.n	8002bf4 <HAL_SPI_Receive+0x166>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf2:	d102      	bne.n	8002bfa <HAL_SPI_Receive+0x16c>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d102      	bne.n	8002c00 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002bfe:	e04a      	b.n	8002c96 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1cb      	bne.n	8002ba2 <HAL_SPI_Receive+0x114>
 8002c0a:	e031      	b.n	8002c70 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d113      	bne.n	8002c42 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c24:	b292      	uxth	r2, r2
 8002c26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2c:	1c9a      	adds	r2, r3, #2
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c40:	e011      	b.n	8002c66 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c42:	f7fe fdeb 	bl	800181c <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d803      	bhi.n	8002c5a <HAL_SPI_Receive+0x1cc>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c58:	d102      	bne.n	8002c60 <HAL_SPI_Receive+0x1d2>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d102      	bne.n	8002c66 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002c64:	e017      	b.n	8002c96 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1cd      	bne.n	8002c0c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	6839      	ldr	r1, [r7, #0]
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 fa45 	bl	8003104 <SPI_EndRxTransaction>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2220      	movs	r2, #32
 8002c84:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	75fb      	strb	r3, [r7, #23]
 8002c92:	e000      	b.n	8002c96 <HAL_SPI_Receive+0x208>
  }

error :
 8002c94:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08c      	sub	sp, #48	; 0x30
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
 8002cbc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d101      	bne.n	8002cd6 <HAL_SPI_TransmitReceive+0x26>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e18a      	b.n	8002fec <HAL_SPI_TransmitReceive+0x33c>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cde:	f7fe fd9d 	bl	800181c <HAL_GetTick>
 8002ce2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002cf4:	887b      	ldrh	r3, [r7, #2]
 8002cf6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002cf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d00f      	beq.n	8002d20 <HAL_SPI_TransmitReceive+0x70>
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d06:	d107      	bne.n	8002d18 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d103      	bne.n	8002d18 <HAL_SPI_TransmitReceive+0x68>
 8002d10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d003      	beq.n	8002d20 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d1e:	e15b      	b.n	8002fd8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <HAL_SPI_TransmitReceive+0x82>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d002      	beq.n	8002d32 <HAL_SPI_TransmitReceive+0x82>
 8002d2c:	887b      	ldrh	r3, [r7, #2]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d103      	bne.n	8002d3a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d38:	e14e      	b.n	8002fd8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d003      	beq.n	8002d4e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2205      	movs	r2, #5
 8002d4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	887a      	ldrh	r2, [r7, #2]
 8002d5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	887a      	ldrh	r2, [r7, #2]
 8002d64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	887a      	ldrh	r2, [r7, #2]
 8002d70:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	887a      	ldrh	r2, [r7, #2]
 8002d76:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8e:	2b40      	cmp	r3, #64	; 0x40
 8002d90:	d007      	beq.n	8002da2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002da0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002daa:	d178      	bne.n	8002e9e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d002      	beq.n	8002dba <HAL_SPI_TransmitReceive+0x10a>
 8002db4:	8b7b      	ldrh	r3, [r7, #26]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d166      	bne.n	8002e88 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	881a      	ldrh	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	1c9a      	adds	r2, r3, #2
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dde:	e053      	b.n	8002e88 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d11b      	bne.n	8002e26 <HAL_SPI_TransmitReceive+0x176>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d016      	beq.n	8002e26 <HAL_SPI_TransmitReceive+0x176>
 8002df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d113      	bne.n	8002e26 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	881a      	ldrh	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	1c9a      	adds	r2, r3, #2
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d119      	bne.n	8002e68 <HAL_SPI_TransmitReceive+0x1b8>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d014      	beq.n	8002e68 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e48:	b292      	uxth	r2, r2
 8002e4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e50:	1c9a      	adds	r2, r3, #2
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e64:	2301      	movs	r3, #1
 8002e66:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e68:	f7fe fcd8 	bl	800181c <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d807      	bhi.n	8002e88 <HAL_SPI_TransmitReceive+0x1d8>
 8002e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7e:	d003      	beq.n	8002e88 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e86:	e0a7      	b.n	8002fd8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1a6      	bne.n	8002de0 <HAL_SPI_TransmitReceive+0x130>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1a1      	bne.n	8002de0 <HAL_SPI_TransmitReceive+0x130>
 8002e9c:	e07c      	b.n	8002f98 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d002      	beq.n	8002eac <HAL_SPI_TransmitReceive+0x1fc>
 8002ea6:	8b7b      	ldrh	r3, [r7, #26]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d16b      	bne.n	8002f84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	330c      	adds	r3, #12
 8002eb6:	7812      	ldrb	r2, [r2, #0]
 8002eb8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	1c5a      	adds	r2, r3, #1
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ed2:	e057      	b.n	8002f84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d11c      	bne.n	8002f1c <HAL_SPI_TransmitReceive+0x26c>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d017      	beq.n	8002f1c <HAL_SPI_TransmitReceive+0x26c>
 8002eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d114      	bne.n	8002f1c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	330c      	adds	r3, #12
 8002efc:	7812      	ldrb	r2, [r2, #0]
 8002efe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d119      	bne.n	8002f5e <HAL_SPI_TransmitReceive+0x2ae>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d014      	beq.n	8002f5e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f46:	1c5a      	adds	r2, r3, #1
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	3b01      	subs	r3, #1
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f5e:	f7fe fc5d 	bl	800181c <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d803      	bhi.n	8002f76 <HAL_SPI_TransmitReceive+0x2c6>
 8002f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f74:	d102      	bne.n	8002f7c <HAL_SPI_TransmitReceive+0x2cc>
 8002f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d103      	bne.n	8002f84 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f82:	e029      	b.n	8002fd8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1a2      	bne.n	8002ed4 <HAL_SPI_TransmitReceive+0x224>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d19d      	bne.n	8002ed4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 f917 	bl	80031d0 <SPI_EndRxTxTransaction>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d006      	beq.n	8002fb6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002fb4:	e010      	b.n	8002fd8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10b      	bne.n	8002fd6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	617b      	str	r3, [r7, #20]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	e000      	b.n	8002fd8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002fd6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002fe8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3730      	adds	r7, #48	; 0x30
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b088      	sub	sp, #32
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	603b      	str	r3, [r7, #0]
 8003000:	4613      	mov	r3, r2
 8003002:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003004:	f7fe fc0a 	bl	800181c <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300c:	1a9b      	subs	r3, r3, r2
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	4413      	add	r3, r2
 8003012:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003014:	f7fe fc02 	bl	800181c <HAL_GetTick>
 8003018:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800301a:	4b39      	ldr	r3, [pc, #228]	; (8003100 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	015b      	lsls	r3, r3, #5
 8003020:	0d1b      	lsrs	r3, r3, #20
 8003022:	69fa      	ldr	r2, [r7, #28]
 8003024:	fb02 f303 	mul.w	r3, r2, r3
 8003028:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800302a:	e054      	b.n	80030d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003032:	d050      	beq.n	80030d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003034:	f7fe fbf2 	bl	800181c <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	69fa      	ldr	r2, [r7, #28]
 8003040:	429a      	cmp	r2, r3
 8003042:	d902      	bls.n	800304a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d13d      	bne.n	80030c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003058:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003062:	d111      	bne.n	8003088 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800306c:	d004      	beq.n	8003078 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003076:	d107      	bne.n	8003088 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003086:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003090:	d10f      	bne.n	80030b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e017      	b.n	80030f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80030cc:	2300      	movs	r3, #0
 80030ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	4013      	ands	r3, r2
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	bf0c      	ite	eq
 80030e6:	2301      	moveq	r3, #1
 80030e8:	2300      	movne	r3, #0
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	461a      	mov	r2, r3
 80030ee:	79fb      	ldrb	r3, [r7, #7]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d19b      	bne.n	800302c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3720      	adds	r7, #32
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	20000054 	.word	0x20000054

08003104 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af02      	add	r7, sp, #8
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003118:	d111      	bne.n	800313e <SPI_EndRxTransaction+0x3a>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003122:	d004      	beq.n	800312e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800312c:	d107      	bne.n	800313e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800313c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003146:	d12a      	bne.n	800319e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003150:	d012      	beq.n	8003178 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2200      	movs	r2, #0
 800315a:	2180      	movs	r1, #128	; 0x80
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f7ff ff49 	bl	8002ff4 <SPI_WaitFlagStateUntilTimeout>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d02d      	beq.n	80031c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316c:	f043 0220 	orr.w	r2, r3, #32
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e026      	b.n	80031c6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2200      	movs	r2, #0
 8003180:	2101      	movs	r1, #1
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f7ff ff36 	bl	8002ff4 <SPI_WaitFlagStateUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d01a      	beq.n	80031c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003192:	f043 0220 	orr.w	r2, r3, #32
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e013      	b.n	80031c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2200      	movs	r2, #0
 80031a6:	2101      	movs	r1, #1
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f7ff ff23 	bl	8002ff4 <SPI_WaitFlagStateUntilTimeout>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d007      	beq.n	80031c4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b8:	f043 0220 	orr.w	r2, r3, #32
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e000      	b.n	80031c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af02      	add	r7, sp, #8
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80031dc:	4b1b      	ldr	r3, [pc, #108]	; (800324c <SPI_EndRxTxTransaction+0x7c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a1b      	ldr	r2, [pc, #108]	; (8003250 <SPI_EndRxTxTransaction+0x80>)
 80031e2:	fba2 2303 	umull	r2, r3, r2, r3
 80031e6:	0d5b      	lsrs	r3, r3, #21
 80031e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031ec:	fb02 f303 	mul.w	r3, r2, r3
 80031f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031fa:	d112      	bne.n	8003222 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2200      	movs	r2, #0
 8003204:	2180      	movs	r1, #128	; 0x80
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f7ff fef4 	bl	8002ff4 <SPI_WaitFlagStateUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d016      	beq.n	8003240 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003216:	f043 0220 	orr.w	r2, r3, #32
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e00f      	b.n	8003242 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00a      	beq.n	800323e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	3b01      	subs	r3, #1
 800322c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003238:	2b80      	cmp	r3, #128	; 0x80
 800323a:	d0f2      	beq.n	8003222 <SPI_EndRxTxTransaction+0x52>
 800323c:	e000      	b.n	8003240 <SPI_EndRxTxTransaction+0x70>
        break;
 800323e:	bf00      	nop
  }

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20000054 	.word	0x20000054
 8003250:	165e9f81 	.word	0x165e9f81

08003254 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e03f      	b.n	80032e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d106      	bne.n	8003280 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7fe f96e 	bl	800155c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2224      	movs	r2, #36	; 0x24
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003296:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 f929 	bl	80034f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695a      	ldr	r2, [r3, #20]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2220      	movs	r2, #32
 80032e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b08a      	sub	sp, #40	; 0x28
 80032f2:	af02      	add	r7, sp, #8
 80032f4:	60f8      	str	r0, [r7, #12]
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	603b      	str	r3, [r7, #0]
 80032fa:	4613      	mov	r3, r2
 80032fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b20      	cmp	r3, #32
 800330c:	d17c      	bne.n	8003408 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <HAL_UART_Transmit+0x2c>
 8003314:	88fb      	ldrh	r3, [r7, #6]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e075      	b.n	800340a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003324:	2b01      	cmp	r3, #1
 8003326:	d101      	bne.n	800332c <HAL_UART_Transmit+0x3e>
 8003328:	2302      	movs	r3, #2
 800332a:	e06e      	b.n	800340a <HAL_UART_Transmit+0x11c>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2221      	movs	r2, #33	; 0x21
 800333e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003342:	f7fe fa6b 	bl	800181c <HAL_GetTick>
 8003346:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	88fa      	ldrh	r2, [r7, #6]
 800334c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	88fa      	ldrh	r2, [r7, #6]
 8003352:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800335c:	d108      	bne.n	8003370 <HAL_UART_Transmit+0x82>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d104      	bne.n	8003370 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003366:	2300      	movs	r3, #0
 8003368:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	61bb      	str	r3, [r7, #24]
 800336e:	e003      	b.n	8003378 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003374:	2300      	movs	r3, #0
 8003376:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003380:	e02a      	b.n	80033d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2200      	movs	r2, #0
 800338a:	2180      	movs	r1, #128	; 0x80
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 f840 	bl	8003412 <UART_WaitOnFlagUntilTimeout>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e036      	b.n	800340a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10b      	bne.n	80033ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	3302      	adds	r3, #2
 80033b6:	61bb      	str	r3, [r7, #24]
 80033b8:	e007      	b.n	80033ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	781a      	ldrb	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	3301      	adds	r3, #1
 80033c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033dc:	b29b      	uxth	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1cf      	bne.n	8003382 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	2200      	movs	r2, #0
 80033ea:	2140      	movs	r1, #64	; 0x40
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 f810 	bl	8003412 <UART_WaitOnFlagUntilTimeout>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e006      	b.n	800340a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003404:	2300      	movs	r3, #0
 8003406:	e000      	b.n	800340a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003408:	2302      	movs	r3, #2
  }
}
 800340a:	4618      	mov	r0, r3
 800340c:	3720      	adds	r7, #32
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b090      	sub	sp, #64	; 0x40
 8003416:	af00      	add	r7, sp, #0
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	603b      	str	r3, [r7, #0]
 800341e:	4613      	mov	r3, r2
 8003420:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003422:	e050      	b.n	80034c6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342a:	d04c      	beq.n	80034c6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800342c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800342e:	2b00      	cmp	r3, #0
 8003430:	d007      	beq.n	8003442 <UART_WaitOnFlagUntilTimeout+0x30>
 8003432:	f7fe f9f3 	bl	800181c <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800343e:	429a      	cmp	r2, r3
 8003440:	d241      	bcs.n	80034c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	330c      	adds	r3, #12
 8003448:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344c:	e853 3f00 	ldrex	r3, [r3]
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003458:	63fb      	str	r3, [r7, #60]	; 0x3c
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	330c      	adds	r3, #12
 8003460:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003462:	637a      	str	r2, [r7, #52]	; 0x34
 8003464:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003466:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003468:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800346a:	e841 2300 	strex	r3, r2, [r1]
 800346e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1e5      	bne.n	8003442 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	3314      	adds	r3, #20
 800347c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	e853 3f00 	ldrex	r3, [r3]
 8003484:	613b      	str	r3, [r7, #16]
   return(result);
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f023 0301 	bic.w	r3, r3, #1
 800348c:	63bb      	str	r3, [r7, #56]	; 0x38
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	3314      	adds	r3, #20
 8003494:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003496:	623a      	str	r2, [r7, #32]
 8003498:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349a:	69f9      	ldr	r1, [r7, #28]
 800349c:	6a3a      	ldr	r2, [r7, #32]
 800349e:	e841 2300 	strex	r3, r2, [r1]
 80034a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1e5      	bne.n	8003476 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e00f      	b.n	80034e6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	4013      	ands	r3, r2
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	bf0c      	ite	eq
 80034d6:	2301      	moveq	r3, #1
 80034d8:	2300      	movne	r3, #0
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	461a      	mov	r2, r3
 80034de:	79fb      	ldrb	r3, [r7, #7]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d09f      	beq.n	8003424 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3740      	adds	r7, #64	; 0x40
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
	...

080034f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034f4:	b0c0      	sub	sp, #256	; 0x100
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800350c:	68d9      	ldr	r1, [r3, #12]
 800350e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	ea40 0301 	orr.w	r3, r0, r1
 8003518:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800351a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	431a      	orrs	r2, r3
 8003528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	431a      	orrs	r2, r3
 8003530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800353c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003548:	f021 010c 	bic.w	r1, r1, #12
 800354c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003556:	430b      	orrs	r3, r1
 8003558:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800355a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800356a:	6999      	ldr	r1, [r3, #24]
 800356c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	ea40 0301 	orr.w	r3, r0, r1
 8003576:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	4b8f      	ldr	r3, [pc, #572]	; (80037bc <UART_SetConfig+0x2cc>)
 8003580:	429a      	cmp	r2, r3
 8003582:	d005      	beq.n	8003590 <UART_SetConfig+0xa0>
 8003584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	4b8d      	ldr	r3, [pc, #564]	; (80037c0 <UART_SetConfig+0x2d0>)
 800358c:	429a      	cmp	r2, r3
 800358e:	d104      	bne.n	800359a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003590:	f7ff f8a4 	bl	80026dc <HAL_RCC_GetPCLK2Freq>
 8003594:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003598:	e003      	b.n	80035a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800359a:	f7ff f88b 	bl	80026b4 <HAL_RCC_GetPCLK1Freq>
 800359e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ac:	f040 810c 	bne.w	80037c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035b4:	2200      	movs	r2, #0
 80035b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80035be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80035c2:	4622      	mov	r2, r4
 80035c4:	462b      	mov	r3, r5
 80035c6:	1891      	adds	r1, r2, r2
 80035c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80035ca:	415b      	adcs	r3, r3
 80035cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035d2:	4621      	mov	r1, r4
 80035d4:	eb12 0801 	adds.w	r8, r2, r1
 80035d8:	4629      	mov	r1, r5
 80035da:	eb43 0901 	adc.w	r9, r3, r1
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035f2:	4690      	mov	r8, r2
 80035f4:	4699      	mov	r9, r3
 80035f6:	4623      	mov	r3, r4
 80035f8:	eb18 0303 	adds.w	r3, r8, r3
 80035fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003600:	462b      	mov	r3, r5
 8003602:	eb49 0303 	adc.w	r3, r9, r3
 8003606:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800360a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003616:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800361a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800361e:	460b      	mov	r3, r1
 8003620:	18db      	adds	r3, r3, r3
 8003622:	653b      	str	r3, [r7, #80]	; 0x50
 8003624:	4613      	mov	r3, r2
 8003626:	eb42 0303 	adc.w	r3, r2, r3
 800362a:	657b      	str	r3, [r7, #84]	; 0x54
 800362c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003630:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003634:	f7fc fe24 	bl	8000280 <__aeabi_uldivmod>
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	4b61      	ldr	r3, [pc, #388]	; (80037c4 <UART_SetConfig+0x2d4>)
 800363e:	fba3 2302 	umull	r2, r3, r3, r2
 8003642:	095b      	lsrs	r3, r3, #5
 8003644:	011c      	lsls	r4, r3, #4
 8003646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800364a:	2200      	movs	r2, #0
 800364c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003650:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003654:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003658:	4642      	mov	r2, r8
 800365a:	464b      	mov	r3, r9
 800365c:	1891      	adds	r1, r2, r2
 800365e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003660:	415b      	adcs	r3, r3
 8003662:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003664:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003668:	4641      	mov	r1, r8
 800366a:	eb12 0a01 	adds.w	sl, r2, r1
 800366e:	4649      	mov	r1, r9
 8003670:	eb43 0b01 	adc.w	fp, r3, r1
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003680:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003684:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003688:	4692      	mov	sl, r2
 800368a:	469b      	mov	fp, r3
 800368c:	4643      	mov	r3, r8
 800368e:	eb1a 0303 	adds.w	r3, sl, r3
 8003692:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003696:	464b      	mov	r3, r9
 8003698:	eb4b 0303 	adc.w	r3, fp, r3
 800369c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80036b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80036b4:	460b      	mov	r3, r1
 80036b6:	18db      	adds	r3, r3, r3
 80036b8:	643b      	str	r3, [r7, #64]	; 0x40
 80036ba:	4613      	mov	r3, r2
 80036bc:	eb42 0303 	adc.w	r3, r2, r3
 80036c0:	647b      	str	r3, [r7, #68]	; 0x44
 80036c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80036ca:	f7fc fdd9 	bl	8000280 <__aeabi_uldivmod>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	4611      	mov	r1, r2
 80036d4:	4b3b      	ldr	r3, [pc, #236]	; (80037c4 <UART_SetConfig+0x2d4>)
 80036d6:	fba3 2301 	umull	r2, r3, r3, r1
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	2264      	movs	r2, #100	; 0x64
 80036de:	fb02 f303 	mul.w	r3, r2, r3
 80036e2:	1acb      	subs	r3, r1, r3
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80036ea:	4b36      	ldr	r3, [pc, #216]	; (80037c4 <UART_SetConfig+0x2d4>)
 80036ec:	fba3 2302 	umull	r2, r3, r3, r2
 80036f0:	095b      	lsrs	r3, r3, #5
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036f8:	441c      	add	r4, r3
 80036fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036fe:	2200      	movs	r2, #0
 8003700:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003704:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003708:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800370c:	4642      	mov	r2, r8
 800370e:	464b      	mov	r3, r9
 8003710:	1891      	adds	r1, r2, r2
 8003712:	63b9      	str	r1, [r7, #56]	; 0x38
 8003714:	415b      	adcs	r3, r3
 8003716:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003718:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800371c:	4641      	mov	r1, r8
 800371e:	1851      	adds	r1, r2, r1
 8003720:	6339      	str	r1, [r7, #48]	; 0x30
 8003722:	4649      	mov	r1, r9
 8003724:	414b      	adcs	r3, r1
 8003726:	637b      	str	r3, [r7, #52]	; 0x34
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	f04f 0300 	mov.w	r3, #0
 8003730:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003734:	4659      	mov	r1, fp
 8003736:	00cb      	lsls	r3, r1, #3
 8003738:	4651      	mov	r1, sl
 800373a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800373e:	4651      	mov	r1, sl
 8003740:	00ca      	lsls	r2, r1, #3
 8003742:	4610      	mov	r0, r2
 8003744:	4619      	mov	r1, r3
 8003746:	4603      	mov	r3, r0
 8003748:	4642      	mov	r2, r8
 800374a:	189b      	adds	r3, r3, r2
 800374c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003750:	464b      	mov	r3, r9
 8003752:	460a      	mov	r2, r1
 8003754:	eb42 0303 	adc.w	r3, r2, r3
 8003758:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800375c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003768:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800376c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003770:	460b      	mov	r3, r1
 8003772:	18db      	adds	r3, r3, r3
 8003774:	62bb      	str	r3, [r7, #40]	; 0x28
 8003776:	4613      	mov	r3, r2
 8003778:	eb42 0303 	adc.w	r3, r2, r3
 800377c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800377e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003782:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003786:	f7fc fd7b 	bl	8000280 <__aeabi_uldivmod>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	4b0d      	ldr	r3, [pc, #52]	; (80037c4 <UART_SetConfig+0x2d4>)
 8003790:	fba3 1302 	umull	r1, r3, r3, r2
 8003794:	095b      	lsrs	r3, r3, #5
 8003796:	2164      	movs	r1, #100	; 0x64
 8003798:	fb01 f303 	mul.w	r3, r1, r3
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	3332      	adds	r3, #50	; 0x32
 80037a2:	4a08      	ldr	r2, [pc, #32]	; (80037c4 <UART_SetConfig+0x2d4>)
 80037a4:	fba2 2303 	umull	r2, r3, r2, r3
 80037a8:	095b      	lsrs	r3, r3, #5
 80037aa:	f003 0207 	and.w	r2, r3, #7
 80037ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4422      	add	r2, r4
 80037b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037b8:	e105      	b.n	80039c6 <UART_SetConfig+0x4d6>
 80037ba:	bf00      	nop
 80037bc:	40011000 	.word	0x40011000
 80037c0:	40011400 	.word	0x40011400
 80037c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037cc:	2200      	movs	r2, #0
 80037ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80037d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80037da:	4642      	mov	r2, r8
 80037dc:	464b      	mov	r3, r9
 80037de:	1891      	adds	r1, r2, r2
 80037e0:	6239      	str	r1, [r7, #32]
 80037e2:	415b      	adcs	r3, r3
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
 80037e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037ea:	4641      	mov	r1, r8
 80037ec:	1854      	adds	r4, r2, r1
 80037ee:	4649      	mov	r1, r9
 80037f0:	eb43 0501 	adc.w	r5, r3, r1
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	00eb      	lsls	r3, r5, #3
 80037fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003802:	00e2      	lsls	r2, r4, #3
 8003804:	4614      	mov	r4, r2
 8003806:	461d      	mov	r5, r3
 8003808:	4643      	mov	r3, r8
 800380a:	18e3      	adds	r3, r4, r3
 800380c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003810:	464b      	mov	r3, r9
 8003812:	eb45 0303 	adc.w	r3, r5, r3
 8003816:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800381a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003826:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003836:	4629      	mov	r1, r5
 8003838:	008b      	lsls	r3, r1, #2
 800383a:	4621      	mov	r1, r4
 800383c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003840:	4621      	mov	r1, r4
 8003842:	008a      	lsls	r2, r1, #2
 8003844:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003848:	f7fc fd1a 	bl	8000280 <__aeabi_uldivmod>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	4b60      	ldr	r3, [pc, #384]	; (80039d4 <UART_SetConfig+0x4e4>)
 8003852:	fba3 2302 	umull	r2, r3, r3, r2
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	011c      	lsls	r4, r3, #4
 800385a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800385e:	2200      	movs	r2, #0
 8003860:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003864:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003868:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800386c:	4642      	mov	r2, r8
 800386e:	464b      	mov	r3, r9
 8003870:	1891      	adds	r1, r2, r2
 8003872:	61b9      	str	r1, [r7, #24]
 8003874:	415b      	adcs	r3, r3
 8003876:	61fb      	str	r3, [r7, #28]
 8003878:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800387c:	4641      	mov	r1, r8
 800387e:	1851      	adds	r1, r2, r1
 8003880:	6139      	str	r1, [r7, #16]
 8003882:	4649      	mov	r1, r9
 8003884:	414b      	adcs	r3, r1
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	f04f 0300 	mov.w	r3, #0
 8003890:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003894:	4659      	mov	r1, fp
 8003896:	00cb      	lsls	r3, r1, #3
 8003898:	4651      	mov	r1, sl
 800389a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800389e:	4651      	mov	r1, sl
 80038a0:	00ca      	lsls	r2, r1, #3
 80038a2:	4610      	mov	r0, r2
 80038a4:	4619      	mov	r1, r3
 80038a6:	4603      	mov	r3, r0
 80038a8:	4642      	mov	r2, r8
 80038aa:	189b      	adds	r3, r3, r2
 80038ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038b0:	464b      	mov	r3, r9
 80038b2:	460a      	mov	r2, r1
 80038b4:	eb42 0303 	adc.w	r3, r2, r3
 80038b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80038c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80038d4:	4649      	mov	r1, r9
 80038d6:	008b      	lsls	r3, r1, #2
 80038d8:	4641      	mov	r1, r8
 80038da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038de:	4641      	mov	r1, r8
 80038e0:	008a      	lsls	r2, r1, #2
 80038e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80038e6:	f7fc fccb 	bl	8000280 <__aeabi_uldivmod>
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	4b39      	ldr	r3, [pc, #228]	; (80039d4 <UART_SetConfig+0x4e4>)
 80038f0:	fba3 1302 	umull	r1, r3, r3, r2
 80038f4:	095b      	lsrs	r3, r3, #5
 80038f6:	2164      	movs	r1, #100	; 0x64
 80038f8:	fb01 f303 	mul.w	r3, r1, r3
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	3332      	adds	r3, #50	; 0x32
 8003902:	4a34      	ldr	r2, [pc, #208]	; (80039d4 <UART_SetConfig+0x4e4>)
 8003904:	fba2 2303 	umull	r2, r3, r2, r3
 8003908:	095b      	lsrs	r3, r3, #5
 800390a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800390e:	441c      	add	r4, r3
 8003910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003914:	2200      	movs	r2, #0
 8003916:	673b      	str	r3, [r7, #112]	; 0x70
 8003918:	677a      	str	r2, [r7, #116]	; 0x74
 800391a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800391e:	4642      	mov	r2, r8
 8003920:	464b      	mov	r3, r9
 8003922:	1891      	adds	r1, r2, r2
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	415b      	adcs	r3, r3
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800392e:	4641      	mov	r1, r8
 8003930:	1851      	adds	r1, r2, r1
 8003932:	6039      	str	r1, [r7, #0]
 8003934:	4649      	mov	r1, r9
 8003936:	414b      	adcs	r3, r1
 8003938:	607b      	str	r3, [r7, #4]
 800393a:	f04f 0200 	mov.w	r2, #0
 800393e:	f04f 0300 	mov.w	r3, #0
 8003942:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003946:	4659      	mov	r1, fp
 8003948:	00cb      	lsls	r3, r1, #3
 800394a:	4651      	mov	r1, sl
 800394c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003950:	4651      	mov	r1, sl
 8003952:	00ca      	lsls	r2, r1, #3
 8003954:	4610      	mov	r0, r2
 8003956:	4619      	mov	r1, r3
 8003958:	4603      	mov	r3, r0
 800395a:	4642      	mov	r2, r8
 800395c:	189b      	adds	r3, r3, r2
 800395e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003960:	464b      	mov	r3, r9
 8003962:	460a      	mov	r2, r1
 8003964:	eb42 0303 	adc.w	r3, r2, r3
 8003968:	66fb      	str	r3, [r7, #108]	; 0x6c
 800396a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	663b      	str	r3, [r7, #96]	; 0x60
 8003974:	667a      	str	r2, [r7, #100]	; 0x64
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	f04f 0300 	mov.w	r3, #0
 800397e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003982:	4649      	mov	r1, r9
 8003984:	008b      	lsls	r3, r1, #2
 8003986:	4641      	mov	r1, r8
 8003988:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800398c:	4641      	mov	r1, r8
 800398e:	008a      	lsls	r2, r1, #2
 8003990:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003994:	f7fc fc74 	bl	8000280 <__aeabi_uldivmod>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <UART_SetConfig+0x4e4>)
 800399e:	fba3 1302 	umull	r1, r3, r3, r2
 80039a2:	095b      	lsrs	r3, r3, #5
 80039a4:	2164      	movs	r1, #100	; 0x64
 80039a6:	fb01 f303 	mul.w	r3, r1, r3
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	3332      	adds	r3, #50	; 0x32
 80039b0:	4a08      	ldr	r2, [pc, #32]	; (80039d4 <UART_SetConfig+0x4e4>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	095b      	lsrs	r3, r3, #5
 80039b8:	f003 020f 	and.w	r2, r3, #15
 80039bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4422      	add	r2, r4
 80039c4:	609a      	str	r2, [r3, #8]
}
 80039c6:	bf00      	nop
 80039c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80039cc:	46bd      	mov	sp, r7
 80039ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039d2:	bf00      	nop
 80039d4:	51eb851f 	.word	0x51eb851f

080039d8 <nRF24_CSN_Select>:
#include <nrf24_ELBC.h>
#include "main.h"


void nRF24_CSN_Select(uint16_t Sel_CSN_Pin)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	4603      	mov	r3, r0
 80039e0:	80fb      	strh	r3, [r7, #6]
	switch (Sel_CSN_Pin)
 80039e2:	88fb      	ldrh	r3, [r7, #6]
 80039e4:	3b01      	subs	r3, #1
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d82c      	bhi.n	8003a44 <nRF24_CSN_Select+0x6c>
 80039ea:	a201      	add	r2, pc, #4	; (adr r2, 80039f0 <nRF24_CSN_Select+0x18>)
 80039ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f0:	08003a11 	.word	0x08003a11
 80039f4:	08003a1d 	.word	0x08003a1d
 80039f8:	08003a29 	.word	0x08003a29
 80039fc:	08003a37 	.word	0x08003a37
 8003a00:	08003a05 	.word	0x08003a05
	{
		case Sel_EL_Module:
			HAL_GPIO_WritePin(GPIOC, nRF_EL_CSN_Pin, GPIO_PIN_RESET);
 8003a04:	2200      	movs	r2, #0
 8003a06:	2101      	movs	r1, #1
 8003a08:	4810      	ldr	r0, [pc, #64]	; (8003a4c <nRF24_CSN_Select+0x74>)
 8003a0a:	f7fe f9e5 	bl	8001dd8 <HAL_GPIO_WritePin>
			break;
 8003a0e:	e019      	b.n	8003a44 <nRF24_CSN_Select+0x6c>
		case Sel_B_Module1:
			HAL_GPIO_WritePin(GPIOC, nRF_B_CSN1_Pin, GPIO_PIN_RESET);
 8003a10:	2200      	movs	r2, #0
 8003a12:	2120      	movs	r1, #32
 8003a14:	480d      	ldr	r0, [pc, #52]	; (8003a4c <nRF24_CSN_Select+0x74>)
 8003a16:	f7fe f9df 	bl	8001dd8 <HAL_GPIO_WritePin>
			break;
 8003a1a:	e013      	b.n	8003a44 <nRF24_CSN_Select+0x6c>
		case Sel_B_Module2:
			HAL_GPIO_WritePin(GPIOB, nRF_B_CSN2_Pin, GPIO_PIN_RESET);
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	2102      	movs	r1, #2
 8003a20:	480b      	ldr	r0, [pc, #44]	; (8003a50 <nRF24_CSN_Select+0x78>)
 8003a22:	f7fe f9d9 	bl	8001dd8 <HAL_GPIO_WritePin>
			break;
 8003a26:	e00d      	b.n	8003a44 <nRF24_CSN_Select+0x6c>
		case Sel_B_Module3:
			HAL_GPIO_WritePin(GPIOB, nRF_B_CSN3_Pin, GPIO_PIN_RESET);
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a2e:	4808      	ldr	r0, [pc, #32]	; (8003a50 <nRF24_CSN_Select+0x78>)
 8003a30:	f7fe f9d2 	bl	8001dd8 <HAL_GPIO_WritePin>
			break;
 8003a34:	e006      	b.n	8003a44 <nRF24_CSN_Select+0x6c>
		case Sel_B_Module4:
			HAL_GPIO_WritePin(GPIOC, nRF_B_CSN4_Pin, GPIO_PIN_RESET);
 8003a36:	2200      	movs	r2, #0
 8003a38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a3c:	4803      	ldr	r0, [pc, #12]	; (8003a4c <nRF24_CSN_Select+0x74>)
 8003a3e:	f7fe f9cb 	bl	8001dd8 <HAL_GPIO_WritePin>
			break;
 8003a42:	bf00      	nop
	}
}
 8003a44:	bf00      	nop
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40020800 	.word	0x40020800
 8003a50:	40020400 	.word	0x40020400

08003a54 <nRF24_CSN_UnSelect>:

void nRF24_CSN_UnSelect(uint16_t Sel_CSN_Pin)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	80fb      	strh	r3, [r7, #6]
	switch (Sel_CSN_Pin)
 8003a5e:	88fb      	ldrh	r3, [r7, #6]
 8003a60:	3b01      	subs	r3, #1
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d82c      	bhi.n	8003ac0 <nRF24_CSN_UnSelect+0x6c>
 8003a66:	a201      	add	r2, pc, #4	; (adr r2, 8003a6c <nRF24_CSN_UnSelect+0x18>)
 8003a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6c:	08003a8d 	.word	0x08003a8d
 8003a70:	08003a99 	.word	0x08003a99
 8003a74:	08003aa5 	.word	0x08003aa5
 8003a78:	08003ab3 	.word	0x08003ab3
 8003a7c:	08003a81 	.word	0x08003a81
	{
		case Sel_EL_Module:
			HAL_GPIO_WritePin(GPIOC, nRF_EL_CSN_Pin, GPIO_PIN_SET);
 8003a80:	2201      	movs	r2, #1
 8003a82:	2101      	movs	r1, #1
 8003a84:	4810      	ldr	r0, [pc, #64]	; (8003ac8 <nRF24_CSN_UnSelect+0x74>)
 8003a86:	f7fe f9a7 	bl	8001dd8 <HAL_GPIO_WritePin>
			break;
 8003a8a:	e019      	b.n	8003ac0 <nRF24_CSN_UnSelect+0x6c>
		case Sel_B_Module1:
			HAL_GPIO_WritePin(GPIOC, nRF_B_CSN1_Pin, GPIO_PIN_SET);
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	2120      	movs	r1, #32
 8003a90:	480d      	ldr	r0, [pc, #52]	; (8003ac8 <nRF24_CSN_UnSelect+0x74>)
 8003a92:	f7fe f9a1 	bl	8001dd8 <HAL_GPIO_WritePin>
			break;
 8003a96:	e013      	b.n	8003ac0 <nRF24_CSN_UnSelect+0x6c>
		case Sel_B_Module2:
			HAL_GPIO_WritePin(GPIOB, nRF_B_CSN2_Pin, GPIO_PIN_SET);
 8003a98:	2201      	movs	r2, #1
 8003a9a:	2102      	movs	r1, #2
 8003a9c:	480b      	ldr	r0, [pc, #44]	; (8003acc <nRF24_CSN_UnSelect+0x78>)
 8003a9e:	f7fe f99b 	bl	8001dd8 <HAL_GPIO_WritePin>
			break;
 8003aa2:	e00d      	b.n	8003ac0 <nRF24_CSN_UnSelect+0x6c>
		case Sel_B_Module3:
			HAL_GPIO_WritePin(GPIOB, nRF_B_CSN3_Pin, GPIO_PIN_SET);
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003aaa:	4808      	ldr	r0, [pc, #32]	; (8003acc <nRF24_CSN_UnSelect+0x78>)
 8003aac:	f7fe f994 	bl	8001dd8 <HAL_GPIO_WritePin>
			break;
 8003ab0:	e006      	b.n	8003ac0 <nRF24_CSN_UnSelect+0x6c>
		case Sel_B_Module4:
			HAL_GPIO_WritePin(GPIOC, nRF_B_CSN4_Pin, GPIO_PIN_SET);
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ab8:	4803      	ldr	r0, [pc, #12]	; (8003ac8 <nRF24_CSN_UnSelect+0x74>)
 8003aba:	f7fe f98d 	bl	8001dd8 <HAL_GPIO_WritePin>
			break;
 8003abe:	bf00      	nop
	}
}
 8003ac0:	bf00      	nop
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40020800 	.word	0x40020800
 8003acc:	40020400 	.word	0x40020400

08003ad0 <nRF24_CE_Enable>:

void nRF24_CE_Enable(uint16_t Sel_CE_Pin)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	80fb      	strh	r3, [r7, #6]
	switch (Sel_CE_Pin)
 8003ada:	88fb      	ldrh	r3, [r7, #6]
 8003adc:	3b01      	subs	r3, #1
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d82b      	bhi.n	8003b3a <nRF24_CE_Enable+0x6a>
 8003ae2:	a201      	add	r2, pc, #4	; (adr r2, 8003ae8 <nRF24_CE_Enable+0x18>)
 8003ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae8:	08003b09 	.word	0x08003b09
 8003aec:	08003b15 	.word	0x08003b15
 8003af0:	08003b21 	.word	0x08003b21
 8003af4:	08003b2f 	.word	0x08003b2f
 8003af8:	08003afd 	.word	0x08003afd
	{
		case Sel_EL_Module:
			HAL_GPIO_WritePin(GPIOA, nRF_EL_CE_Pin, GPIO_PIN_SET);
 8003afc:	2201      	movs	r2, #1
 8003afe:	2101      	movs	r1, #1
 8003b00:	4810      	ldr	r0, [pc, #64]	; (8003b44 <nRF24_CE_Enable+0x74>)
 8003b02:	f7fe f969 	bl	8001dd8 <HAL_GPIO_WritePin>
			break;
 8003b06:	e018      	b.n	8003b3a <nRF24_CE_Enable+0x6a>
		case Sel_B_Module1:
			HAL_GPIO_WritePin(GPIOB, nRF_B_CE1_Pin, GPIO_PIN_SET);
 8003b08:	2201      	movs	r2, #1
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	480e      	ldr	r0, [pc, #56]	; (8003b48 <nRF24_CE_Enable+0x78>)
 8003b0e:	f7fe f963 	bl	8001dd8 <HAL_GPIO_WritePin>
			break;
 8003b12:	e012      	b.n	8003b3a <nRF24_CE_Enable+0x6a>
		case Sel_B_Module2:
			HAL_GPIO_WritePin(GPIOB, nRF_B_CE2_Pin, GPIO_PIN_SET);
 8003b14:	2201      	movs	r2, #1
 8003b16:	2104      	movs	r1, #4
 8003b18:	480b      	ldr	r0, [pc, #44]	; (8003b48 <nRF24_CE_Enable+0x78>)
 8003b1a:	f7fe f95d 	bl	8001dd8 <HAL_GPIO_WritePin>
			break;
 8003b1e:	e00c      	b.n	8003b3a <nRF24_CE_Enable+0x6a>
		case Sel_B_Module3:
			HAL_GPIO_WritePin(GPIOB, nRF_B_CE3_Pin, GPIO_PIN_SET);
 8003b20:	2201      	movs	r2, #1
 8003b22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b26:	4808      	ldr	r0, [pc, #32]	; (8003b48 <nRF24_CE_Enable+0x78>)
 8003b28:	f7fe f956 	bl	8001dd8 <HAL_GPIO_WritePin>
			break;
 8003b2c:	e005      	b.n	8003b3a <nRF24_CE_Enable+0x6a>
		case Sel_B_Module4:
			HAL_GPIO_WritePin(GPIOC, nRF_B_CE4_Pin, GPIO_PIN_SET);
 8003b2e:	2201      	movs	r2, #1
 8003b30:	2180      	movs	r1, #128	; 0x80
 8003b32:	4806      	ldr	r0, [pc, #24]	; (8003b4c <nRF24_CE_Enable+0x7c>)
 8003b34:	f7fe f950 	bl	8001dd8 <HAL_GPIO_WritePin>
			break;
 8003b38:	bf00      	nop
	}
}
 8003b3a:	bf00      	nop
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40020000 	.word	0x40020000
 8003b48:	40020400 	.word	0x40020400
 8003b4c:	40020800 	.word	0x40020800

08003b50 <nRF24_CE_Disable>:

void nRF24_CE_Disable(uint16_t Sel_CE_Pin)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	4603      	mov	r3, r0
 8003b58:	80fb      	strh	r3, [r7, #6]
	switch (Sel_CE_Pin)
 8003b5a:	88fb      	ldrh	r3, [r7, #6]
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d82b      	bhi.n	8003bba <nRF24_CE_Disable+0x6a>
 8003b62:	a201      	add	r2, pc, #4	; (adr r2, 8003b68 <nRF24_CE_Disable+0x18>)
 8003b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b68:	08003b89 	.word	0x08003b89
 8003b6c:	08003b95 	.word	0x08003b95
 8003b70:	08003ba1 	.word	0x08003ba1
 8003b74:	08003baf 	.word	0x08003baf
 8003b78:	08003b7d 	.word	0x08003b7d
	{
	case Sel_EL_Module:
		HAL_GPIO_WritePin(GPIOA, nRF_EL_CE_Pin, GPIO_PIN_RESET);
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	2101      	movs	r1, #1
 8003b80:	4810      	ldr	r0, [pc, #64]	; (8003bc4 <nRF24_CE_Disable+0x74>)
 8003b82:	f7fe f929 	bl	8001dd8 <HAL_GPIO_WritePin>
		break;
 8003b86:	e018      	b.n	8003bba <nRF24_CE_Disable+0x6a>
	case Sel_B_Module1:
		HAL_GPIO_WritePin(GPIOB, nRF_B_CE1_Pin, GPIO_PIN_RESET);
 8003b88:	2200      	movs	r2, #0
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	480e      	ldr	r0, [pc, #56]	; (8003bc8 <nRF24_CE_Disable+0x78>)
 8003b8e:	f7fe f923 	bl	8001dd8 <HAL_GPIO_WritePin>
		break;
 8003b92:	e012      	b.n	8003bba <nRF24_CE_Disable+0x6a>
	case Sel_B_Module2:
		HAL_GPIO_WritePin(GPIOB, nRF_B_CE2_Pin, GPIO_PIN_RESET);
 8003b94:	2200      	movs	r2, #0
 8003b96:	2104      	movs	r1, #4
 8003b98:	480b      	ldr	r0, [pc, #44]	; (8003bc8 <nRF24_CE_Disable+0x78>)
 8003b9a:	f7fe f91d 	bl	8001dd8 <HAL_GPIO_WritePin>
		break;
 8003b9e:	e00c      	b.n	8003bba <nRF24_CE_Disable+0x6a>
	case Sel_B_Module3:
		HAL_GPIO_WritePin(GPIOB, nRF_B_CE3_Pin, GPIO_PIN_RESET);
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ba6:	4808      	ldr	r0, [pc, #32]	; (8003bc8 <nRF24_CE_Disable+0x78>)
 8003ba8:	f7fe f916 	bl	8001dd8 <HAL_GPIO_WritePin>
		break;
 8003bac:	e005      	b.n	8003bba <nRF24_CE_Disable+0x6a>
	case Sel_B_Module4:
		HAL_GPIO_WritePin(GPIOC, nRF_B_CE4_Pin, GPIO_PIN_RESET);
 8003bae:	2200      	movs	r2, #0
 8003bb0:	2180      	movs	r1, #128	; 0x80
 8003bb2:	4806      	ldr	r0, [pc, #24]	; (8003bcc <nRF24_CE_Disable+0x7c>)
 8003bb4:	f7fe f910 	bl	8001dd8 <HAL_GPIO_WritePin>
		break;
 8003bb8:	bf00      	nop
	}
}
 8003bba:	bf00      	nop
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40020000 	.word	0x40020000
 8003bc8:	40020400 	.word	0x40020400
 8003bcc:	40020800 	.word	0x40020800

08003bd0 <nRF24_WriteReg>:
// input:
//   Sel_CSN_Pin - Select the RF Module
//   reg - number of register to write
//   data - value to write
void nRF24_WriteReg(uint16_t Sel_CSN_Pin, uint8_t reg, uint8_t data)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	80fb      	strh	r3, [r7, #6]
 8003bda:	460b      	mov	r3, r1
 8003bdc:	717b      	strb	r3, [r7, #5]
 8003bde:	4613      	mov	r3, r2
 8003be0:	713b      	strb	r3, [r7, #4]
	uint8_t buf[2];
	buf[0] = reg | 1<<5;                                  //Set the 6th bit of the reg to make it a write command
 8003be2:	797b      	ldrb	r3, [r7, #5]
 8003be4:	f043 0320 	orr.w	r3, r3, #32
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	733b      	strb	r3, [r7, #12]
	buf[1] = data;
 8003bec:	793b      	ldrb	r3, [r7, #4]
 8003bee:	737b      	strb	r3, [r7, #13]

	switch(Sel_CSN_Pin)
 8003bf0:	88fb      	ldrh	r3, [r7, #6]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	d858      	bhi.n	8003caa <nRF24_WriteReg+0xda>
 8003bf8:	a201      	add	r2, pc, #4	; (adr r2, 8003c00 <nRF24_WriteReg+0x30>)
 8003bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfe:	bf00      	nop
 8003c00:	08003c15 	.word	0x08003c15
 8003c04:	08003c33 	.word	0x08003c33
 8003c08:	08003c51 	.word	0x08003c51
 8003c0c:	08003c6f 	.word	0x08003c6f
 8003c10:	08003c8d 	.word	0x08003c8d
	{
	case Sel_B_Module1:
		nRF24_CSN_Select(Sel_B_Module1);                  //Pull CSN pin low to select the nRF24 on SPI BUS
 8003c14:	2001      	movs	r0, #1
 8003c16:	f7ff fedf 	bl	80039d8 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&Button_hspi1, buf, 2, 1000);    //Write command and register address (001AAAAA) and then the data to be written
 8003c1a:	f107 010c 	add.w	r1, r7, #12
 8003c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c22:	2202      	movs	r2, #2
 8003c24:	4823      	ldr	r0, [pc, #140]	; (8003cb4 <nRF24_WriteReg+0xe4>)
 8003c26:	f7fe fdf6 	bl	8002816 <HAL_SPI_Transmit>
		nRF24_CSN_UnSelect(Sel_B_Module1);                //Pull CSN pin high to unselect the nRF24 on SPI BUS
 8003c2a:	2001      	movs	r0, #1
 8003c2c:	f7ff ff12 	bl	8003a54 <nRF24_CSN_UnSelect>
		break;
 8003c30:	e03b      	b.n	8003caa <nRF24_WriteReg+0xda>
	case Sel_B_Module2:
		nRF24_CSN_Select(Sel_B_Module2);                  //Pull CSN pin low to select the nRF24 on SPI BUS
 8003c32:	2002      	movs	r0, #2
 8003c34:	f7ff fed0 	bl	80039d8 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&Button_hspi1, buf, 2, 1000);    //Write command and register address (001AAAAA) and then the data to be written
 8003c38:	f107 010c 	add.w	r1, r7, #12
 8003c3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c40:	2202      	movs	r2, #2
 8003c42:	481c      	ldr	r0, [pc, #112]	; (8003cb4 <nRF24_WriteReg+0xe4>)
 8003c44:	f7fe fde7 	bl	8002816 <HAL_SPI_Transmit>
		nRF24_CSN_UnSelect(Sel_B_Module2);		          //Pull CSN pin high to unselect the nRF24 on SPI BUS
 8003c48:	2002      	movs	r0, #2
 8003c4a:	f7ff ff03 	bl	8003a54 <nRF24_CSN_UnSelect>
		break;
 8003c4e:	e02c      	b.n	8003caa <nRF24_WriteReg+0xda>
	case Sel_B_Module3:
		nRF24_CSN_Select(Sel_B_Module3);                  //Pull CSN pin low to select the nRF24 on SPI BUS
 8003c50:	2003      	movs	r0, #3
 8003c52:	f7ff fec1 	bl	80039d8 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&Button_hspi1, buf, 2, 1000);    //Write command and register address (001AAAAA) and then the data to be written
 8003c56:	f107 010c 	add.w	r1, r7, #12
 8003c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c5e:	2202      	movs	r2, #2
 8003c60:	4814      	ldr	r0, [pc, #80]	; (8003cb4 <nRF24_WriteReg+0xe4>)
 8003c62:	f7fe fdd8 	bl	8002816 <HAL_SPI_Transmit>
		nRF24_CSN_UnSelect(Sel_B_Module3);	         	  //Pull CSN pin high to unselect the nRF24 on SPI BUS
 8003c66:	2003      	movs	r0, #3
 8003c68:	f7ff fef4 	bl	8003a54 <nRF24_CSN_UnSelect>
		break;
 8003c6c:	e01d      	b.n	8003caa <nRF24_WriteReg+0xda>
	case Sel_B_Module4:
		nRF24_CSN_Select(Sel_B_Module4);                  //Pull CSN pin low to select the nRF24 on SPI BUS
 8003c6e:	2004      	movs	r0, #4
 8003c70:	f7ff feb2 	bl	80039d8 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&Button_hspi1, buf, 2, 1000);    //Write command and register address (001AAAAA) and then the data to be written
 8003c74:	f107 010c 	add.w	r1, r7, #12
 8003c78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	480d      	ldr	r0, [pc, #52]	; (8003cb4 <nRF24_WriteReg+0xe4>)
 8003c80:	f7fe fdc9 	bl	8002816 <HAL_SPI_Transmit>
		nRF24_CSN_UnSelect(Sel_B_Module4);                //Pull CSN pin high to unselect the nRF24 on SPI BUS
 8003c84:	2004      	movs	r0, #4
 8003c86:	f7ff fee5 	bl	8003a54 <nRF24_CSN_UnSelect>
		break;
 8003c8a:	e00e      	b.n	8003caa <nRF24_WriteReg+0xda>
	case Sel_EL_Module:
		nRF24_CSN_Select(Sel_EL_Module);                  //Pull CSN pin low to select the nRF24 on SPI BUS
 8003c8c:	2005      	movs	r0, #5
 8003c8e:	f7ff fea3 	bl	80039d8 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&EL_hspi2, buf, 2, 1000);        //Write command and register address (001AAAAA) and then the data to be written
 8003c92:	f107 010c 	add.w	r1, r7, #12
 8003c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	4806      	ldr	r0, [pc, #24]	; (8003cb8 <nRF24_WriteReg+0xe8>)
 8003c9e:	f7fe fdba 	bl	8002816 <HAL_SPI_Transmit>
		nRF24_CSN_UnSelect(Sel_EL_Module);                //Pull CSN pin high to unselect the nRF24 on SPI BUS
 8003ca2:	2005      	movs	r0, #5
 8003ca4:	f7ff fed6 	bl	8003a54 <nRF24_CSN_UnSelect>
		break;
 8003ca8:	bf00      	nop
	}
}
 8003caa:	bf00      	nop
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	200000e0 	.word	0x200000e0
 8003cb8:	20000138 	.word	0x20000138

08003cbc <nRF24_WriteMBReg>:
//   Sel_CSN_Pin - Select the RF Module
//   reg - number of register to write
//   data - pointer to the buffer with data to write
//   size - number of bytes to write
void nRF24_WriteMBReg(uint16_t Sel_CSN_Pin, uint8_t reg, uint8_t *data, uint8_t size)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	603a      	str	r2, [r7, #0]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	80fb      	strh	r3, [r7, #6]
 8003cca:	460b      	mov	r3, r1
 8003ccc:	717b      	strb	r3, [r7, #5]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	713b      	strb	r3, [r7, #4]
	uint8_t buf[2];
	buf[0] = reg | 1<<5;                                      //Set the 6th bit of the reg to make it a write command
 8003cd2:	797b      	ldrb	r3, [r7, #5]
 8003cd4:	f043 0320 	orr.w	r3, r3, #32
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	733b      	strb	r3, [r7, #12]
//	buf[1] = data;

	switch(Sel_CSN_Pin)
 8003cdc:	88fb      	ldrh	r3, [r7, #6]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	f200 8080 	bhi.w	8003de6 <nRF24_WriteMBReg+0x12a>
 8003ce6:	a201      	add	r2, pc, #4	; (adr r2, 8003cec <nRF24_WriteMBReg+0x30>)
 8003ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cec:	08003d01 	.word	0x08003d01
 8003cf0:	08003d2f 	.word	0x08003d2f
 8003cf4:	08003d5d 	.word	0x08003d5d
 8003cf8:	08003d8b 	.word	0x08003d8b
 8003cfc:	08003db9 	.word	0x08003db9
	{
	case Sel_B_Module1:
		nRF24_CSN_Select(Sel_B_Module1);                      //Pull CSN pin low to select the nRF24 on SPI BUS
 8003d00:	2001      	movs	r0, #1
 8003d02:	f7ff fe69 	bl	80039d8 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&Button_hspi1, buf, 1, 1000);        //Write command and register address (001AAAAA)
 8003d06:	f107 010c 	add.w	r1, r7, #12
 8003d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d0e:	2201      	movs	r2, #1
 8003d10:	4837      	ldr	r0, [pc, #220]	; (8003df0 <nRF24_WriteMBReg+0x134>)
 8003d12:	f7fe fd80 	bl	8002816 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&Button_hspi1, data, size, 1000);    //Send the data to be written in that address
 8003d16:	793b      	ldrb	r3, [r7, #4]
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d1e:	6839      	ldr	r1, [r7, #0]
 8003d20:	4833      	ldr	r0, [pc, #204]	; (8003df0 <nRF24_WriteMBReg+0x134>)
 8003d22:	f7fe fd78 	bl	8002816 <HAL_SPI_Transmit>
		nRF24_CSN_UnSelect(Sel_B_Module1);                    //Pull CSN pin high to unselect the nRF24 on SPI BUS
 8003d26:	2001      	movs	r0, #1
 8003d28:	f7ff fe94 	bl	8003a54 <nRF24_CSN_UnSelect>
		break;
 8003d2c:	e05b      	b.n	8003de6 <nRF24_WriteMBReg+0x12a>
	case Sel_B_Module2:
		nRF24_CSN_Select(Sel_B_Module2);                      //Pull CSN pin low to select the nRF24 on SPI BUS
 8003d2e:	2002      	movs	r0, #2
 8003d30:	f7ff fe52 	bl	80039d8 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&Button_hspi1, buf, 1, 1000);        //Write command and register address (001AAAAA)
 8003d34:	f107 010c 	add.w	r1, r7, #12
 8003d38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	482c      	ldr	r0, [pc, #176]	; (8003df0 <nRF24_WriteMBReg+0x134>)
 8003d40:	f7fe fd69 	bl	8002816 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&Button_hspi1, data, size, 1000);    //Send the data to be written in that address
 8003d44:	793b      	ldrb	r3, [r7, #4]
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d4c:	6839      	ldr	r1, [r7, #0]
 8003d4e:	4828      	ldr	r0, [pc, #160]	; (8003df0 <nRF24_WriteMBReg+0x134>)
 8003d50:	f7fe fd61 	bl	8002816 <HAL_SPI_Transmit>
		nRF24_CSN_UnSelect(Sel_B_Module2);                    //Pull CSN pin high to unselect the nRF24 on SPI BUS
 8003d54:	2002      	movs	r0, #2
 8003d56:	f7ff fe7d 	bl	8003a54 <nRF24_CSN_UnSelect>
		break;
 8003d5a:	e044      	b.n	8003de6 <nRF24_WriteMBReg+0x12a>
	case Sel_B_Module3:
		nRF24_CSN_Select(Sel_B_Module3);                      //Pull CSN pin low to select the nRF24 on SPI BUS
 8003d5c:	2003      	movs	r0, #3
 8003d5e:	f7ff fe3b 	bl	80039d8 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&Button_hspi1, buf, 1, 1000);        //Write command and register address (001AAAAA)
 8003d62:	f107 010c 	add.w	r1, r7, #12
 8003d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	4820      	ldr	r0, [pc, #128]	; (8003df0 <nRF24_WriteMBReg+0x134>)
 8003d6e:	f7fe fd52 	bl	8002816 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&Button_hspi1, data, size, 1000);    //Send the data to be written in that address
 8003d72:	793b      	ldrb	r3, [r7, #4]
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d7a:	6839      	ldr	r1, [r7, #0]
 8003d7c:	481c      	ldr	r0, [pc, #112]	; (8003df0 <nRF24_WriteMBReg+0x134>)
 8003d7e:	f7fe fd4a 	bl	8002816 <HAL_SPI_Transmit>
		nRF24_CSN_UnSelect(Sel_B_Module3);                    //Pull CSN pin high to unselect the nRF24 on SPI BUS
 8003d82:	2003      	movs	r0, #3
 8003d84:	f7ff fe66 	bl	8003a54 <nRF24_CSN_UnSelect>
		break;
 8003d88:	e02d      	b.n	8003de6 <nRF24_WriteMBReg+0x12a>
	case Sel_B_Module4:
		nRF24_CSN_Select(Sel_B_Module4);                      //Pull CSN pin low to select the nRF24 on SPI BUS
 8003d8a:	2004      	movs	r0, #4
 8003d8c:	f7ff fe24 	bl	80039d8 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&Button_hspi1, buf, 1, 1000);        //Write command and register address (001AAAAA)
 8003d90:	f107 010c 	add.w	r1, r7, #12
 8003d94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d98:	2201      	movs	r2, #1
 8003d9a:	4815      	ldr	r0, [pc, #84]	; (8003df0 <nRF24_WriteMBReg+0x134>)
 8003d9c:	f7fe fd3b 	bl	8002816 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&Button_hspi1, data, size, 1000);    //Send the data to be written in that address
 8003da0:	793b      	ldrb	r3, [r7, #4]
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003da8:	6839      	ldr	r1, [r7, #0]
 8003daa:	4811      	ldr	r0, [pc, #68]	; (8003df0 <nRF24_WriteMBReg+0x134>)
 8003dac:	f7fe fd33 	bl	8002816 <HAL_SPI_Transmit>
		nRF24_CSN_UnSelect(Sel_B_Module4);                    //Pull CSN pin high to unselect the nRF24 on SPI BUS
 8003db0:	2004      	movs	r0, #4
 8003db2:	f7ff fe4f 	bl	8003a54 <nRF24_CSN_UnSelect>
		break;
 8003db6:	e016      	b.n	8003de6 <nRF24_WriteMBReg+0x12a>
	case Sel_EL_Module:
		nRF24_CSN_Select(Sel_EL_Module);                      //Pull CSN pin low to select the nRF24 on SPI BUS
 8003db8:	2005      	movs	r0, #5
 8003dba:	f7ff fe0d 	bl	80039d8 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&EL_hspi2, buf, 1, 1000);            //Write command and register address (001AAAAA)
 8003dbe:	f107 010c 	add.w	r1, r7, #12
 8003dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	480a      	ldr	r0, [pc, #40]	; (8003df4 <nRF24_WriteMBReg+0x138>)
 8003dca:	f7fe fd24 	bl	8002816 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&EL_hspi2, data, size, 1000);        //Send the data to be written in that address
 8003dce:	793b      	ldrb	r3, [r7, #4]
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dd6:	6839      	ldr	r1, [r7, #0]
 8003dd8:	4806      	ldr	r0, [pc, #24]	; (8003df4 <nRF24_WriteMBReg+0x138>)
 8003dda:	f7fe fd1c 	bl	8002816 <HAL_SPI_Transmit>
		nRF24_CSN_UnSelect(Sel_EL_Module);                    //Pull CSN pin high to unselect the nRF24 on SPI BUS
 8003dde:	2005      	movs	r0, #5
 8003de0:	f7ff fe38 	bl	8003a54 <nRF24_CSN_UnSelect>
		break;
 8003de4:	bf00      	nop
	}
}
 8003de6:	bf00      	nop
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	200000e0 	.word	0x200000e0
 8003df4:	20000138 	.word	0x20000138

08003df8 <nRF24_ReadReg>:
// Reads a value of register
// input:
//   Sel_CSN_Pin - Select the RF Module
//   reg - number of register to read
// return: value of register
uint8_t nRF24_ReadReg(uint16_t Sel_CSN_Pin, uint8_t reg) {
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	460a      	mov	r2, r1
 8003e02:	80fb      	strh	r3, [r7, #6]
 8003e04:	4613      	mov	r3, r2
 8003e06:	717b      	strb	r3, [r7, #5]

	uint8_t data = 0;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	73fb      	strb	r3, [r7, #15]

	switch(Sel_CSN_Pin)
 8003e0c:	88fb      	ldrh	r3, [r7, #6]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d87c      	bhi.n	8003f0e <nRF24_ReadReg+0x116>
 8003e14:	a201      	add	r2, pc, #4	; (adr r2, 8003e1c <nRF24_ReadReg+0x24>)
 8003e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1a:	bf00      	nop
 8003e1c:	08003e31 	.word	0x08003e31
 8003e20:	08003e5d 	.word	0x08003e5d
 8003e24:	08003e89 	.word	0x08003e89
 8003e28:	08003eb5 	.word	0x08003eb5
 8003e2c:	08003ee3 	.word	0x08003ee3
	{
	case Sel_B_Module1:
		nRF24_CSN_Select(Sel_B_Module1);                      //Pull CSN pin low to select the nRF24 on SPI BUS
 8003e30:	2001      	movs	r0, #1
 8003e32:	f7ff fdd1 	bl	80039d8 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&Button_hspi1, &reg, 1, 1000);       //Sending the read command and register address (000AAAAA)
 8003e36:	1d79      	adds	r1, r7, #5
 8003e38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	4836      	ldr	r0, [pc, #216]	; (8003f18 <nRF24_ReadReg+0x120>)
 8003e40:	f7fe fce9 	bl	8002816 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&Button_hspi1, &data, 1, 1000);       //Reading the one byte received
 8003e44:	f107 010f 	add.w	r1, r7, #15
 8003e48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	4832      	ldr	r0, [pc, #200]	; (8003f18 <nRF24_ReadReg+0x120>)
 8003e50:	f7fe fe1d 	bl	8002a8e <HAL_SPI_Receive>
		nRF24_CSN_UnSelect(Sel_B_Module1);                    //Pull CSN pin high to unselect the nRF24 on SPI BUS
 8003e54:	2001      	movs	r0, #1
 8003e56:	f7ff fdfd 	bl	8003a54 <nRF24_CSN_UnSelect>
		break;
 8003e5a:	e058      	b.n	8003f0e <nRF24_ReadReg+0x116>
	case Sel_B_Module2:
		nRF24_CSN_Select(Sel_B_Module2);                      //Pull CSN pin low to select the nRF24 on SPI BUS
 8003e5c:	2002      	movs	r0, #2
 8003e5e:	f7ff fdbb 	bl	80039d8 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&Button_hspi1, &reg, 1, 1000);       //Sending the read command and register address (000AAAAA)
 8003e62:	1d79      	adds	r1, r7, #5
 8003e64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e68:	2201      	movs	r2, #1
 8003e6a:	482b      	ldr	r0, [pc, #172]	; (8003f18 <nRF24_ReadReg+0x120>)
 8003e6c:	f7fe fcd3 	bl	8002816 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&Button_hspi1, &data, 1, 1000);       //Reading the one byte received
 8003e70:	f107 010f 	add.w	r1, r7, #15
 8003e74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e78:	2201      	movs	r2, #1
 8003e7a:	4827      	ldr	r0, [pc, #156]	; (8003f18 <nRF24_ReadReg+0x120>)
 8003e7c:	f7fe fe07 	bl	8002a8e <HAL_SPI_Receive>
		nRF24_CSN_UnSelect(Sel_B_Module2);                    //Pull CSN pin high to unselect the nRF24 on SPI BUS
 8003e80:	2002      	movs	r0, #2
 8003e82:	f7ff fde7 	bl	8003a54 <nRF24_CSN_UnSelect>
		break;
 8003e86:	e042      	b.n	8003f0e <nRF24_ReadReg+0x116>
	case Sel_B_Module3:
		nRF24_CSN_Select(Sel_B_Module3);                      //Pull CSN pin low to select the nRF24 on SPI BUS
 8003e88:	2003      	movs	r0, #3
 8003e8a:	f7ff fda5 	bl	80039d8 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&Button_hspi1, &reg, 1, 1000);       //Sending the read command and register address (000AAAAA)
 8003e8e:	1d79      	adds	r1, r7, #5
 8003e90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e94:	2201      	movs	r2, #1
 8003e96:	4820      	ldr	r0, [pc, #128]	; (8003f18 <nRF24_ReadReg+0x120>)
 8003e98:	f7fe fcbd 	bl	8002816 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&Button_hspi1, &data, 1, 1000);       //Reading the one byte received
 8003e9c:	f107 010f 	add.w	r1, r7, #15
 8003ea0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	481c      	ldr	r0, [pc, #112]	; (8003f18 <nRF24_ReadReg+0x120>)
 8003ea8:	f7fe fdf1 	bl	8002a8e <HAL_SPI_Receive>
		nRF24_CSN_UnSelect(Sel_B_Module3);                    //Pull CSN pin high to unselect the nRF24 on SPI BUS
 8003eac:	2003      	movs	r0, #3
 8003eae:	f7ff fdd1 	bl	8003a54 <nRF24_CSN_UnSelect>
		break;
 8003eb2:	e02c      	b.n	8003f0e <nRF24_ReadReg+0x116>
	case Sel_B_Module4:
		nRF24_CSN_Select(nRF_B_CSN4_Pin);                     //Pull CSN pin low to select the nRF24 on SPI BUS
 8003eb4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003eb8:	f7ff fd8e 	bl	80039d8 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&Button_hspi1, &reg, 1, 1000);       //Sending the read command and register address (000AAAAA)
 8003ebc:	1d79      	adds	r1, r7, #5
 8003ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	4814      	ldr	r0, [pc, #80]	; (8003f18 <nRF24_ReadReg+0x120>)
 8003ec6:	f7fe fca6 	bl	8002816 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&Button_hspi1, &data, 1, 1000);       //Reading the one byte received
 8003eca:	f107 010f 	add.w	r1, r7, #15
 8003ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	4810      	ldr	r0, [pc, #64]	; (8003f18 <nRF24_ReadReg+0x120>)
 8003ed6:	f7fe fdda 	bl	8002a8e <HAL_SPI_Receive>
		nRF24_CSN_UnSelect(Sel_B_Module4);                    //Pull CSN pin high to unselect the nRF24 on SPI BUS
 8003eda:	2004      	movs	r0, #4
 8003edc:	f7ff fdba 	bl	8003a54 <nRF24_CSN_UnSelect>
		break;
 8003ee0:	e015      	b.n	8003f0e <nRF24_ReadReg+0x116>
	case Sel_EL_Module:
		nRF24_CSN_Select(Sel_EL_Module);                      //Pull CSN pin low to select the nRF24 on SPI BUS
 8003ee2:	2005      	movs	r0, #5
 8003ee4:	f7ff fd78 	bl	80039d8 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&EL_hspi2, &reg, 1, 1000);           //Sending the read command and register address (000AAAAA)
 8003ee8:	1d79      	adds	r1, r7, #5
 8003eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003eee:	2201      	movs	r2, #1
 8003ef0:	480a      	ldr	r0, [pc, #40]	; (8003f1c <nRF24_ReadReg+0x124>)
 8003ef2:	f7fe fc90 	bl	8002816 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&EL_hspi2, &data, 1, 1000);           //Reading the one byte received
 8003ef6:	f107 010f 	add.w	r1, r7, #15
 8003efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003efe:	2201      	movs	r2, #1
 8003f00:	4806      	ldr	r0, [pc, #24]	; (8003f1c <nRF24_ReadReg+0x124>)
 8003f02:	f7fe fdc4 	bl	8002a8e <HAL_SPI_Receive>
		nRF24_CSN_UnSelect(Sel_EL_Module);                    //Pull CSN pin high to unselect the nRF24 on SPI BUS
 8003f06:	2005      	movs	r0, #5
 8003f08:	f7ff fda4 	bl	8003a54 <nRF24_CSN_UnSelect>
		break;
 8003f0c:	bf00      	nop
	}

	return data;
 8003f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	200000e0 	.word	0x200000e0
 8003f1c:	20000138 	.word	0x20000138

08003f20 <nRF24_ReadMBReg>:
// Reads multiple bytes starting from a particular register
// input:
//   reg - number of register to write
//   data - pointer to the buffer with data to write
//   size - number of bytes to write
void nRF24_ReadMBReg(uint16_t Sel_CSN_Pin, uint8_t reg, uint8_t *data, uint8_t size) {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	603a      	str	r2, [r7, #0]
 8003f28:	461a      	mov	r2, r3
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	80fb      	strh	r3, [r7, #6]
 8003f2e:	460b      	mov	r3, r1
 8003f30:	717b      	strb	r3, [r7, #5]
 8003f32:	4613      	mov	r3, r2
 8003f34:	713b      	strb	r3, [r7, #4]

	switch(Sel_CSN_Pin)
 8003f36:	88fb      	ldrh	r3, [r7, #6]
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d87a      	bhi.n	8004034 <nRF24_ReadMBReg+0x114>
 8003f3e:	a201      	add	r2, pc, #4	; (adr r2, 8003f44 <nRF24_ReadMBReg+0x24>)
 8003f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f44:	08003f59 	.word	0x08003f59
 8003f48:	08003f85 	.word	0x08003f85
 8003f4c:	08003fb1 	.word	0x08003fb1
 8003f50:	08003fdd 	.word	0x08003fdd
 8003f54:	08004009 	.word	0x08004009
	{
	case Sel_B_Module1:
		nRF24_CSN_Select(Sel_B_Module1);                      //Pull CSN pin low to select the nRF24 on SPI BUS
 8003f58:	2001      	movs	r0, #1
 8003f5a:	f7ff fd3d 	bl	80039d8 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&Button_hspi1, &reg, 1, 1000);       //Sending the read command and register address (000AAAAA)
 8003f5e:	1d79      	adds	r1, r7, #5
 8003f60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f64:	2201      	movs	r2, #1
 8003f66:	4835      	ldr	r0, [pc, #212]	; (800403c <nRF24_ReadMBReg+0x11c>)
 8003f68:	f7fe fc55 	bl	8002816 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&Button_hspi1, data, size, 1000);     //Reading the received bytes
 8003f6c:	793b      	ldrb	r3, [r7, #4]
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f74:	6839      	ldr	r1, [r7, #0]
 8003f76:	4831      	ldr	r0, [pc, #196]	; (800403c <nRF24_ReadMBReg+0x11c>)
 8003f78:	f7fe fd89 	bl	8002a8e <HAL_SPI_Receive>
		nRF24_CSN_UnSelect(Sel_B_Module1);		              //Pull CSN pin low to select the nRF24 on SPI BUS
 8003f7c:	2001      	movs	r0, #1
 8003f7e:	f7ff fd69 	bl	8003a54 <nRF24_CSN_UnSelect>
		break;
 8003f82:	e057      	b.n	8004034 <nRF24_ReadMBReg+0x114>
	case Sel_B_Module2:
		nRF24_CSN_Select(Sel_B_Module2);                      //Pull CSN pin low to select the nRF24 on SPI BUS
 8003f84:	2002      	movs	r0, #2
 8003f86:	f7ff fd27 	bl	80039d8 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&Button_hspi1, &reg, 1, 1000);       //Sending the read command and register address (000AAAAA)
 8003f8a:	1d79      	adds	r1, r7, #5
 8003f8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f90:	2201      	movs	r2, #1
 8003f92:	482a      	ldr	r0, [pc, #168]	; (800403c <nRF24_ReadMBReg+0x11c>)
 8003f94:	f7fe fc3f 	bl	8002816 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&Button_hspi1, data, size, 1000);     //Reading the received bytes
 8003f98:	793b      	ldrb	r3, [r7, #4]
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fa0:	6839      	ldr	r1, [r7, #0]
 8003fa2:	4826      	ldr	r0, [pc, #152]	; (800403c <nRF24_ReadMBReg+0x11c>)
 8003fa4:	f7fe fd73 	bl	8002a8e <HAL_SPI_Receive>
		nRF24_CSN_UnSelect(Sel_B_Module2);		              //Pull CSN pin low to select the nRF24 on SPI BUS
 8003fa8:	2002      	movs	r0, #2
 8003faa:	f7ff fd53 	bl	8003a54 <nRF24_CSN_UnSelect>
		break;
 8003fae:	e041      	b.n	8004034 <nRF24_ReadMBReg+0x114>
	case Sel_B_Module3:
		nRF24_CSN_Select(Sel_B_Module3);                      //Pull CSN pin low to select the nRF24 on SPI BUS
 8003fb0:	2003      	movs	r0, #3
 8003fb2:	f7ff fd11 	bl	80039d8 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&Button_hspi1, &reg, 1, 1000);       //Sending the read command and register address (000AAAAA)
 8003fb6:	1d79      	adds	r1, r7, #5
 8003fb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	481f      	ldr	r0, [pc, #124]	; (800403c <nRF24_ReadMBReg+0x11c>)
 8003fc0:	f7fe fc29 	bl	8002816 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&Button_hspi1, data, size, 1000);     //Reading the received bytes
 8003fc4:	793b      	ldrb	r3, [r7, #4]
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fcc:	6839      	ldr	r1, [r7, #0]
 8003fce:	481b      	ldr	r0, [pc, #108]	; (800403c <nRF24_ReadMBReg+0x11c>)
 8003fd0:	f7fe fd5d 	bl	8002a8e <HAL_SPI_Receive>
		nRF24_CSN_UnSelect(Sel_B_Module3);		              //Pull CSN pin low to select the nRF24 on SPI BUS
 8003fd4:	2003      	movs	r0, #3
 8003fd6:	f7ff fd3d 	bl	8003a54 <nRF24_CSN_UnSelect>
		break;
 8003fda:	e02b      	b.n	8004034 <nRF24_ReadMBReg+0x114>
	case Sel_B_Module4:
		nRF24_CSN_Select(Sel_B_Module4);                      //Pull CSN pin low to select the nRF24 on SPI BUS
 8003fdc:	2004      	movs	r0, #4
 8003fde:	f7ff fcfb 	bl	80039d8 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&Button_hspi1, &reg, 1, 1000);       //Sending the read command and register address (000AAAAA)
 8003fe2:	1d79      	adds	r1, r7, #5
 8003fe4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fe8:	2201      	movs	r2, #1
 8003fea:	4814      	ldr	r0, [pc, #80]	; (800403c <nRF24_ReadMBReg+0x11c>)
 8003fec:	f7fe fc13 	bl	8002816 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&Button_hspi1, data, size, 1000);     //Reading the received bytes
 8003ff0:	793b      	ldrb	r3, [r7, #4]
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ff8:	6839      	ldr	r1, [r7, #0]
 8003ffa:	4810      	ldr	r0, [pc, #64]	; (800403c <nRF24_ReadMBReg+0x11c>)
 8003ffc:	f7fe fd47 	bl	8002a8e <HAL_SPI_Receive>
		nRF24_CSN_UnSelect(Sel_B_Module4);		              //Pull CSN pin low to select the nRF24 on SPI BUS
 8004000:	2004      	movs	r0, #4
 8004002:	f7ff fd27 	bl	8003a54 <nRF24_CSN_UnSelect>
		break;
 8004006:	e015      	b.n	8004034 <nRF24_ReadMBReg+0x114>
	case Sel_EL_Module:
		nRF24_CSN_Select(Sel_EL_Module);                      //Pull CSN pin low to select the nRF24 on SPI BUS
 8004008:	2005      	movs	r0, #5
 800400a:	f7ff fce5 	bl	80039d8 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&EL_hspi2, &reg, 1, 1000);           //Sending the read command and register address (000AAAAA)
 800400e:	1d79      	adds	r1, r7, #5
 8004010:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004014:	2201      	movs	r2, #1
 8004016:	480a      	ldr	r0, [pc, #40]	; (8004040 <nRF24_ReadMBReg+0x120>)
 8004018:	f7fe fbfd 	bl	8002816 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&EL_hspi2, data, size, 1000);         //Reading the received bytes
 800401c:	793b      	ldrb	r3, [r7, #4]
 800401e:	b29a      	uxth	r2, r3
 8004020:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004024:	6839      	ldr	r1, [r7, #0]
 8004026:	4806      	ldr	r0, [pc, #24]	; (8004040 <nRF24_ReadMBReg+0x120>)
 8004028:	f7fe fd31 	bl	8002a8e <HAL_SPI_Receive>
		nRF24_CSN_UnSelect(Sel_EL_Module);		              //Pull CSN pin low to select the nRF24 on SPI BUS
 800402c:	2005      	movs	r0, #5
 800402e:	f7ff fd11 	bl	8003a54 <nRF24_CSN_UnSelect>
		break;
 8004032:	bf00      	nop
	}

}
 8004034:	bf00      	nop
 8004036:	3708      	adds	r7, #8
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	200000e0 	.word	0x200000e0
 8004040:	20000138 	.word	0x20000138

08004044 <nRF24_SendCMD>:
// Send the command to the nRF24
// input:
//   Sel_CSN_Pin - Select the RF Module
//   cmd - Command based on the nRF24l01 Command register
void nRF24_SendCMD(uint16_t Sel_CSN_Pin, uint8_t cmd)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	4603      	mov	r3, r0
 800404c:	460a      	mov	r2, r1
 800404e:	80fb      	strh	r3, [r7, #6]
 8004050:	4613      	mov	r3, r2
 8004052:	717b      	strb	r3, [r7, #5]
	switch(Sel_CSN_Pin)
 8004054:	88fb      	ldrh	r3, [r7, #6]
 8004056:	3b01      	subs	r3, #1
 8004058:	2b04      	cmp	r3, #4
 800405a:	d853      	bhi.n	8004104 <nRF24_SendCMD+0xc0>
 800405c:	a201      	add	r2, pc, #4	; (adr r2, 8004064 <nRF24_SendCMD+0x20>)
 800405e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004062:	bf00      	nop
 8004064:	08004079 	.word	0x08004079
 8004068:	08004095 	.word	0x08004095
 800406c:	080040b1 	.word	0x080040b1
 8004070:	080040cd 	.word	0x080040cd
 8004074:	080040e9 	.word	0x080040e9
	{
	case Sel_B_Module1:
		nRF24_CSN_Select(Sel_B_Module1);                      //Pull CSN pin low to select the nRF24 on SPI BUS
 8004078:	2001      	movs	r0, #1
 800407a:	f7ff fcad 	bl	80039d8 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&Button_hspi1, &cmd, 1, 1000);       //Transmit the command
 800407e:	1d79      	adds	r1, r7, #5
 8004080:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004084:	2201      	movs	r2, #1
 8004086:	4821      	ldr	r0, [pc, #132]	; (800410c <nRF24_SendCMD+0xc8>)
 8004088:	f7fe fbc5 	bl	8002816 <HAL_SPI_Transmit>
		nRF24_CSN_UnSelect(Sel_B_Module1);		              //Pull CSN pin low to select the nRF24 on SPI BUS
 800408c:	2001      	movs	r0, #1
 800408e:	f7ff fce1 	bl	8003a54 <nRF24_CSN_UnSelect>
		break;
 8004092:	e037      	b.n	8004104 <nRF24_SendCMD+0xc0>
	case Sel_B_Module2:
		nRF24_CSN_Select(Sel_B_Module2);                      //Pull CSN pin low to select the nRF24 on SPI BUS
 8004094:	2002      	movs	r0, #2
 8004096:	f7ff fc9f 	bl	80039d8 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&Button_hspi1, &cmd, 1, 1000);       //Transmit the command
 800409a:	1d79      	adds	r1, r7, #5
 800409c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040a0:	2201      	movs	r2, #1
 80040a2:	481a      	ldr	r0, [pc, #104]	; (800410c <nRF24_SendCMD+0xc8>)
 80040a4:	f7fe fbb7 	bl	8002816 <HAL_SPI_Transmit>
		nRF24_CSN_UnSelect(Sel_B_Module2);		              //Pull CSN pin low to select the nRF24 on SPI BUS
 80040a8:	2002      	movs	r0, #2
 80040aa:	f7ff fcd3 	bl	8003a54 <nRF24_CSN_UnSelect>
		break;
 80040ae:	e029      	b.n	8004104 <nRF24_SendCMD+0xc0>
	case Sel_B_Module3:
		nRF24_CSN_Select(Sel_B_Module3);                      //Pull CSN pin low to select the nRF24 on SPI BUS
 80040b0:	2003      	movs	r0, #3
 80040b2:	f7ff fc91 	bl	80039d8 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&Button_hspi1, &cmd, 1, 1000);       //Transmit the command
 80040b6:	1d79      	adds	r1, r7, #5
 80040b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040bc:	2201      	movs	r2, #1
 80040be:	4813      	ldr	r0, [pc, #76]	; (800410c <nRF24_SendCMD+0xc8>)
 80040c0:	f7fe fba9 	bl	8002816 <HAL_SPI_Transmit>
		nRF24_CSN_UnSelect(Sel_B_Module3);		              //Pull CSN pin low to select the nRF24 on SPI BUS
 80040c4:	2003      	movs	r0, #3
 80040c6:	f7ff fcc5 	bl	8003a54 <nRF24_CSN_UnSelect>
		break;
 80040ca:	e01b      	b.n	8004104 <nRF24_SendCMD+0xc0>
	case Sel_B_Module4:
		nRF24_CSN_Select(Sel_B_Module4);                      //Pull CSN pin low to select the nRF24 on SPI BUS
 80040cc:	2004      	movs	r0, #4
 80040ce:	f7ff fc83 	bl	80039d8 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&Button_hspi1, &cmd, 1, 1000);       //Transmit the command
 80040d2:	1d79      	adds	r1, r7, #5
 80040d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040d8:	2201      	movs	r2, #1
 80040da:	480c      	ldr	r0, [pc, #48]	; (800410c <nRF24_SendCMD+0xc8>)
 80040dc:	f7fe fb9b 	bl	8002816 <HAL_SPI_Transmit>
		nRF24_CSN_UnSelect(Sel_B_Module4);		              //Pull CSN pin low to select the nRF24 on SPI BUS
 80040e0:	2004      	movs	r0, #4
 80040e2:	f7ff fcb7 	bl	8003a54 <nRF24_CSN_UnSelect>
		break;
 80040e6:	e00d      	b.n	8004104 <nRF24_SendCMD+0xc0>
	case Sel_EL_Module:
		nRF24_CSN_Select(Sel_EL_Module);                      //Pull CSN pin low to select the nRF24 on SPI BUS
 80040e8:	2005      	movs	r0, #5
 80040ea:	f7ff fc75 	bl	80039d8 <nRF24_CSN_Select>
		HAL_SPI_Transmit(&EL_hspi2, &cmd, 1, 1000);           //Transmit the command
 80040ee:	1d79      	adds	r1, r7, #5
 80040f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040f4:	2201      	movs	r2, #1
 80040f6:	4806      	ldr	r0, [pc, #24]	; (8004110 <nRF24_SendCMD+0xcc>)
 80040f8:	f7fe fb8d 	bl	8002816 <HAL_SPI_Transmit>
		nRF24_CSN_UnSelect(Sel_EL_Module);		              //Pull CSN pin low to select the nRF24 on SPI BUS
 80040fc:	2005      	movs	r0, #5
 80040fe:	f7ff fca9 	bl	8003a54 <nRF24_CSN_UnSelect>
		break;
 8004102:	bf00      	nop
	}
}
 8004104:	bf00      	nop
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	200000e0 	.word	0x200000e0
 8004110:	20000138 	.word	0x20000138

08004114 <nRF24_Reset>:
// Reset all the nRF24's registers
// input:
//   Sel_CSN_Pin - Select the RF Module
//   reg - number of register to write
void nRF24_Reset(uint16_t Sel_CSN_Pin, uint8_t Reg)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	4603      	mov	r3, r0
 800411c:	460a      	mov	r2, r1
 800411e:	80fb      	strh	r3, [r7, #6]
 8004120:	4613      	mov	r3, r2
 8004122:	717b      	strb	r3, [r7, #5]

	switch(Sel_CSN_Pin)
 8004124:	88fb      	ldrh	r3, [r7, #6]
 8004126:	3b01      	subs	r3, #1
 8004128:	2b04      	cmp	r3, #4
 800412a:	d870      	bhi.n	800420e <nRF24_Reset+0xfa>
 800412c:	a201      	add	r2, pc, #4	; (adr r2, 8004134 <nRF24_Reset+0x20>)
 800412e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004132:	bf00      	nop
 8004134:	08004149 	.word	0x08004149
 8004138:	0800416d 	.word	0x0800416d
 800413c:	08004191 	.word	0x08004191
 8004140:	080041b5 	.word	0x080041b5
 8004144:	080041d9 	.word	0x080041d9
	{
	case Sel_B_Module1:
		if(Reg == nRF24_REG_STATUS)
 8004148:	797b      	ldrb	r3, [r7, #5]
 800414a:	2b07      	cmp	r3, #7
 800414c:	d105      	bne.n	800415a <nRF24_Reset+0x46>
		{
			nRF24_WriteReg(Sel_B_Module1, nRF24_REG_STATUS, 0x70);
 800414e:	2270      	movs	r2, #112	; 0x70
 8004150:	2107      	movs	r1, #7
 8004152:	2001      	movs	r0, #1
 8004154:	f7ff fd3c 	bl	8003bd0 <nRF24_WriteReg>
		}
		else if(Reg == nRF24_REG_FIFO_STATUS)
		{
			nRF24_WriteReg(Sel_B_Module1, nRF24_REG_FIFO_STATUS, 0x11);
		}
		break;
 8004158:	e050      	b.n	80041fc <nRF24_Reset+0xe8>
		else if(Reg == nRF24_REG_FIFO_STATUS)
 800415a:	797b      	ldrb	r3, [r7, #5]
 800415c:	2b17      	cmp	r3, #23
 800415e:	d14d      	bne.n	80041fc <nRF24_Reset+0xe8>
			nRF24_WriteReg(Sel_B_Module1, nRF24_REG_FIFO_STATUS, 0x11);
 8004160:	2211      	movs	r2, #17
 8004162:	2117      	movs	r1, #23
 8004164:	2001      	movs	r0, #1
 8004166:	f7ff fd33 	bl	8003bd0 <nRF24_WriteReg>
		break;
 800416a:	e047      	b.n	80041fc <nRF24_Reset+0xe8>

	case Sel_B_Module2:
		if(Reg == nRF24_REG_STATUS)
 800416c:	797b      	ldrb	r3, [r7, #5]
 800416e:	2b07      	cmp	r3, #7
 8004170:	d105      	bne.n	800417e <nRF24_Reset+0x6a>
		{
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_STATUS, 0x70);
 8004172:	2270      	movs	r2, #112	; 0x70
 8004174:	2107      	movs	r1, #7
 8004176:	2002      	movs	r0, #2
 8004178:	f7ff fd2a 	bl	8003bd0 <nRF24_WriteReg>
		}
		else if(Reg == nRF24_REG_FIFO_STATUS)
		{
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_FIFO_STATUS, 0x11);
		}
		break;
 800417c:	e040      	b.n	8004200 <nRF24_Reset+0xec>
		else if(Reg == nRF24_REG_FIFO_STATUS)
 800417e:	797b      	ldrb	r3, [r7, #5]
 8004180:	2b17      	cmp	r3, #23
 8004182:	d13d      	bne.n	8004200 <nRF24_Reset+0xec>
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_FIFO_STATUS, 0x11);
 8004184:	2211      	movs	r2, #17
 8004186:	2117      	movs	r1, #23
 8004188:	2002      	movs	r0, #2
 800418a:	f7ff fd21 	bl	8003bd0 <nRF24_WriteReg>
		break;
 800418e:	e037      	b.n	8004200 <nRF24_Reset+0xec>

	case Sel_B_Module3:
		if(Reg == nRF24_REG_STATUS)
 8004190:	797b      	ldrb	r3, [r7, #5]
 8004192:	2b07      	cmp	r3, #7
 8004194:	d105      	bne.n	80041a2 <nRF24_Reset+0x8e>
		{
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_STATUS, 0x70);
 8004196:	2270      	movs	r2, #112	; 0x70
 8004198:	2107      	movs	r1, #7
 800419a:	2003      	movs	r0, #3
 800419c:	f7ff fd18 	bl	8003bd0 <nRF24_WriteReg>
		}
		else if(Reg == nRF24_REG_FIFO_STATUS)
		{
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_FIFO_STATUS, 0x11);
		}
		break;
 80041a0:	e030      	b.n	8004204 <nRF24_Reset+0xf0>
		else if(Reg == nRF24_REG_FIFO_STATUS)
 80041a2:	797b      	ldrb	r3, [r7, #5]
 80041a4:	2b17      	cmp	r3, #23
 80041a6:	d12d      	bne.n	8004204 <nRF24_Reset+0xf0>
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_FIFO_STATUS, 0x11);
 80041a8:	2211      	movs	r2, #17
 80041aa:	2117      	movs	r1, #23
 80041ac:	2003      	movs	r0, #3
 80041ae:	f7ff fd0f 	bl	8003bd0 <nRF24_WriteReg>
		break;
 80041b2:	e027      	b.n	8004204 <nRF24_Reset+0xf0>

	case Sel_B_Module4:
		if(Reg == nRF24_REG_STATUS)
 80041b4:	797b      	ldrb	r3, [r7, #5]
 80041b6:	2b07      	cmp	r3, #7
 80041b8:	d105      	bne.n	80041c6 <nRF24_Reset+0xb2>
		{
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_STATUS, 0x70);
 80041ba:	2270      	movs	r2, #112	; 0x70
 80041bc:	2107      	movs	r1, #7
 80041be:	2004      	movs	r0, #4
 80041c0:	f7ff fd06 	bl	8003bd0 <nRF24_WriteReg>
		}
		else if(Reg == nRF24_REG_FIFO_STATUS)
		{
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_FIFO_STATUS, 0x11);
		}
		break;
 80041c4:	e020      	b.n	8004208 <nRF24_Reset+0xf4>
		else if(Reg == nRF24_REG_FIFO_STATUS)
 80041c6:	797b      	ldrb	r3, [r7, #5]
 80041c8:	2b17      	cmp	r3, #23
 80041ca:	d11d      	bne.n	8004208 <nRF24_Reset+0xf4>
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_FIFO_STATUS, 0x11);
 80041cc:	2211      	movs	r2, #17
 80041ce:	2117      	movs	r1, #23
 80041d0:	2004      	movs	r0, #4
 80041d2:	f7ff fcfd 	bl	8003bd0 <nRF24_WriteReg>
		break;
 80041d6:	e017      	b.n	8004208 <nRF24_Reset+0xf4>

	case Sel_EL_Module:
		if(Reg == nRF24_REG_STATUS)
 80041d8:	797b      	ldrb	r3, [r7, #5]
 80041da:	2b07      	cmp	r3, #7
 80041dc:	d105      	bne.n	80041ea <nRF24_Reset+0xd6>
		{
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_STATUS, 0x70);
 80041de:	2270      	movs	r2, #112	; 0x70
 80041e0:	2107      	movs	r1, #7
 80041e2:	2005      	movs	r0, #5
 80041e4:	f7ff fcf4 	bl	8003bd0 <nRF24_WriteReg>
		}
		else if(Reg == nRF24_REG_FIFO_STATUS)
		{
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_FIFO_STATUS, 0x11);
		}
		break;
 80041e8:	e010      	b.n	800420c <nRF24_Reset+0xf8>
		else if(Reg == nRF24_REG_FIFO_STATUS)
 80041ea:	797b      	ldrb	r3, [r7, #5]
 80041ec:	2b17      	cmp	r3, #23
 80041ee:	d10d      	bne.n	800420c <nRF24_Reset+0xf8>
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_FIFO_STATUS, 0x11);
 80041f0:	2211      	movs	r2, #17
 80041f2:	2117      	movs	r1, #23
 80041f4:	2005      	movs	r0, #5
 80041f6:	f7ff fceb 	bl	8003bd0 <nRF24_WriteReg>
		break;
 80041fa:	e007      	b.n	800420c <nRF24_Reset+0xf8>
		break;
 80041fc:	bf00      	nop
 80041fe:	e006      	b.n	800420e <nRF24_Reset+0xfa>
		break;
 8004200:	bf00      	nop
 8004202:	e004      	b.n	800420e <nRF24_Reset+0xfa>
		break;
 8004204:	bf00      	nop
 8004206:	e002      	b.n	800420e <nRF24_Reset+0xfa>
		break;
 8004208:	bf00      	nop
 800420a:	e000      	b.n	800420e <nRF24_Reset+0xfa>
		break;
 800420c:	bf00      	nop
	}
}
 800420e:	bf00      	nop
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop

08004218 <nRF24_Module_Setup>:


void nRF24_Module_Setup(uint16_t Sel_CSN_Pin, uint8_t mode, uint8_t RF_Ch, uint8_t *Tx_Addr, uint8_t *Rx_Addr, uint8_t RF_Setup, uint8_t Payloadsize)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b088      	sub	sp, #32
 800421c:	af00      	add	r7, sp, #0
 800421e:	603b      	str	r3, [r7, #0]
 8004220:	4603      	mov	r3, r0
 8004222:	80fb      	strh	r3, [r7, #6]
 8004224:	460b      	mov	r3, r1
 8004226:	717b      	strb	r3, [r7, #5]
 8004228:	4613      	mov	r3, r2
 800422a:	713b      	strb	r3, [r7, #4]
	Pipe3_Addr = Cat_Mod_Pipe[0][0][3];
	Pipe4_Addr = Cat_Mod_Pipe[0][0][4];
	Pipe5_Addr = Cat_Mod_Pipe[0][0][5];*/

	uint8_t rx_addr_p0[5],rx_addr_p1[5],rx_addr_p2,rx_addr_p3,rx_addr_p4,rx_addr_p5;
	rx_addr_p0[0] = *Rx_Addr;
 800422c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	753b      	strb	r3, [r7, #20]
	rx_addr_p0[1] = *(Rx_Addr+1);
 8004232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004234:	785b      	ldrb	r3, [r3, #1]
 8004236:	757b      	strb	r3, [r7, #21]
	rx_addr_p0[2] = *(Rx_Addr+2);
 8004238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423a:	789b      	ldrb	r3, [r3, #2]
 800423c:	75bb      	strb	r3, [r7, #22]
	rx_addr_p0[3] = *(Rx_Addr+3);
 800423e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004240:	78db      	ldrb	r3, [r3, #3]
 8004242:	75fb      	strb	r3, [r7, #23]
	rx_addr_p0[4] = *(Rx_Addr+4);
 8004244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004246:	791b      	ldrb	r3, [r3, #4]
 8004248:	763b      	strb	r3, [r7, #24]
	rx_addr_p1[0] = (*Rx_Addr)+1;
 800424a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	3301      	adds	r3, #1
 8004250:	b2db      	uxtb	r3, r3
 8004252:	733b      	strb	r3, [r7, #12]
	rx_addr_p1[1] = *(Rx_Addr+1);
 8004254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004256:	785b      	ldrb	r3, [r3, #1]
 8004258:	737b      	strb	r3, [r7, #13]
	rx_addr_p1[2] = *(Rx_Addr+2);
 800425a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425c:	789b      	ldrb	r3, [r3, #2]
 800425e:	73bb      	strb	r3, [r7, #14]
	rx_addr_p1[3] = *(Rx_Addr+3);
 8004260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004262:	78db      	ldrb	r3, [r3, #3]
 8004264:	73fb      	strb	r3, [r7, #15]
	rx_addr_p1[4] = *(Rx_Addr+4);
 8004266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004268:	791b      	ldrb	r3, [r3, #4]
 800426a:	743b      	strb	r3, [r7, #16]
	rx_addr_p2 = rx_addr_p1[0]+1;
 800426c:	7b3b      	ldrb	r3, [r7, #12]
 800426e:	3301      	adds	r3, #1
 8004270:	77fb      	strb	r3, [r7, #31]
	rx_addr_p3 = rx_addr_p2+1;
 8004272:	7ffb      	ldrb	r3, [r7, #31]
 8004274:	3301      	adds	r3, #1
 8004276:	77bb      	strb	r3, [r7, #30]
	rx_addr_p4 = rx_addr_p3+1;
 8004278:	7fbb      	ldrb	r3, [r7, #30]
 800427a:	3301      	adds	r3, #1
 800427c:	777b      	strb	r3, [r7, #29]
	rx_addr_p5 = rx_addr_p4+1;
 800427e:	7f7b      	ldrb	r3, [r7, #29]
 8004280:	3301      	adds	r3, #1
 8004282:	773b      	strb	r3, [r7, #28]

	switch(Sel_CSN_Pin)
 8004284:	88fb      	ldrh	r3, [r7, #6]
 8004286:	3b01      	subs	r3, #1
 8004288:	2b04      	cmp	r3, #4
 800428a:	f200 864f 	bhi.w	8004f2c <nRF24_Module_Setup+0xd14>
 800428e:	a201      	add	r2, pc, #4	; (adr r2, 8004294 <nRF24_Module_Setup+0x7c>)
 8004290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004294:	080042a9 	.word	0x080042a9
 8004298:	0800452b 	.word	0x0800452b
 800429c:	080047ad 	.word	0x080047ad
 80042a0:	08004a2d 	.word	0x08004a2d
 80042a4:	08004cad 	.word	0x08004cad
	{
	case Sel_B_Module1:

		switch(mode)
 80042a8:	797b      	ldrb	r3, [r7, #5]
 80042aa:	2b05      	cmp	r3, #5
 80042ac:	d86e      	bhi.n	800438c <nRF24_Module_Setup+0x174>
 80042ae:	a201      	add	r2, pc, #4	; (adr r2, 80042b4 <nRF24_Module_Setup+0x9c>)
 80042b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b4:	080042cd 	.word	0x080042cd
 80042b8:	080042ed 	.word	0x080042ed
 80042bc:	0800430d 	.word	0x0800430d
 80042c0:	0800432d 	.word	0x0800432d
 80042c4:	0800434d 	.word	0x0800434d
 80042c8:	0800436d 	.word	0x0800436d
		{
	    case Receiver_Mode_AA:
			nRF24_WriteReg(Sel_B_Module1, nRF24_REG_CONFIG, 0x09);                      //PRIM_RX=1, PWR_UP=0, EN_CRC=1
 80042cc:	2209      	movs	r2, #9
 80042ce:	2100      	movs	r1, #0
 80042d0:	2001      	movs	r0, #1
 80042d2:	f7ff fc7d 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module1, nRF24_REG_EN_AA, 0x3F);                       //Enable AA for all pipes
 80042d6:	223f      	movs	r2, #63	; 0x3f
 80042d8:	2101      	movs	r1, #1
 80042da:	2001      	movs	r0, #1
 80042dc:	f7ff fc78 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module1, nRF24_REG_EN_RXADDR, 0x3F);                   //Enable RX addresses for all pipes
 80042e0:	223f      	movs	r2, #63	; 0x3f
 80042e2:	2102      	movs	r1, #2
 80042e4:	2001      	movs	r0, #1
 80042e6:	f7ff fc73 	bl	8003bd0 <nRF24_WriteReg>
			break;
 80042ea:	e04f      	b.n	800438c <nRF24_Module_Setup+0x174>
	    case Receiver_Mode_noAA_CRC:
			nRF24_WriteReg(Sel_B_Module1, nRF24_REG_CONFIG, 0x09);                      //PRIM_RX=1, PWR_UP=0, EN_CRC=1
 80042ec:	2209      	movs	r2, #9
 80042ee:	2100      	movs	r1, #0
 80042f0:	2001      	movs	r0, #1
 80042f2:	f7ff fc6d 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module1, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 80042f6:	2200      	movs	r2, #0
 80042f8:	2101      	movs	r1, #1
 80042fa:	2001      	movs	r0, #1
 80042fc:	f7ff fc68 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module1, nRF24_REG_EN_RXADDR, 0x3F);                   //Enable RX addresses for all pipes
 8004300:	223f      	movs	r2, #63	; 0x3f
 8004302:	2102      	movs	r1, #2
 8004304:	2001      	movs	r0, #1
 8004306:	f7ff fc63 	bl	8003bd0 <nRF24_WriteReg>
			break;
 800430a:	e03f      	b.n	800438c <nRF24_Module_Setup+0x174>
	    case Receiver_Mode_noAA_noCRC:
			nRF24_WriteReg(Sel_B_Module1, nRF24_REG_CONFIG, 0x01);                      //PRIM_RX=1, PWR_UP=0, EN_CRC=0
 800430c:	2201      	movs	r2, #1
 800430e:	2100      	movs	r1, #0
 8004310:	2001      	movs	r0, #1
 8004312:	f7ff fc5d 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module1, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 8004316:	2200      	movs	r2, #0
 8004318:	2101      	movs	r1, #1
 800431a:	2001      	movs	r0, #1
 800431c:	f7ff fc58 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module1, nRF24_REG_EN_RXADDR, 0x3F);                   //Enable RX addresses for all pipes
 8004320:	223f      	movs	r2, #63	; 0x3f
 8004322:	2102      	movs	r1, #2
 8004324:	2001      	movs	r0, #1
 8004326:	f7ff fc53 	bl	8003bd0 <nRF24_WriteReg>
			break;
 800432a:	e02f      	b.n	800438c <nRF24_Module_Setup+0x174>
	    case Transmitter_Mode_AA:
			nRF24_WriteReg(Sel_B_Module1, nRF24_REG_CONFIG, 0x08);                      //PRIM_RX=0, PWR_UP=0, EN_CRC=1
 800432c:	2208      	movs	r2, #8
 800432e:	2100      	movs	r1, #0
 8004330:	2001      	movs	r0, #1
 8004332:	f7ff fc4d 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module1, nRF24_REG_EN_AA, 0x3F);                       //Enable AA for all pipes
 8004336:	223f      	movs	r2, #63	; 0x3f
 8004338:	2101      	movs	r1, #1
 800433a:	2001      	movs	r0, #1
 800433c:	f7ff fc48 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module1, nRF24_REG_EN_RXADDR, 0x01);                   //Enable RX addresses for pipe0
 8004340:	2201      	movs	r2, #1
 8004342:	2102      	movs	r1, #2
 8004344:	2001      	movs	r0, #1
 8004346:	f7ff fc43 	bl	8003bd0 <nRF24_WriteReg>
			break;
 800434a:	e01f      	b.n	800438c <nRF24_Module_Setup+0x174>
	    case Transmitter_Mode_noAA_CRC:
			nRF24_WriteReg(Sel_B_Module1, nRF24_REG_CONFIG, 0x08);                      //PRIM_RX=0, PWR_UP=0, EN_CRC=1
 800434c:	2208      	movs	r2, #8
 800434e:	2100      	movs	r1, #0
 8004350:	2001      	movs	r0, #1
 8004352:	f7ff fc3d 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module1, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 8004356:	2200      	movs	r2, #0
 8004358:	2101      	movs	r1, #1
 800435a:	2001      	movs	r0, #1
 800435c:	f7ff fc38 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module1, nRF24_REG_EN_RXADDR, 0x01);                   //Enable RX addresses for pipe0
 8004360:	2201      	movs	r2, #1
 8004362:	2102      	movs	r1, #2
 8004364:	2001      	movs	r0, #1
 8004366:	f7ff fc33 	bl	8003bd0 <nRF24_WriteReg>
			break;
 800436a:	e00f      	b.n	800438c <nRF24_Module_Setup+0x174>
	    case Transmitter_Mode_noAA_noCRC:
			nRF24_WriteReg(Sel_B_Module1, nRF24_REG_CONFIG, 0x00);                      //PRIM_RX=0, PWR_UP=0, EN_CRC=0
 800436c:	2200      	movs	r2, #0
 800436e:	2100      	movs	r1, #0
 8004370:	2001      	movs	r0, #1
 8004372:	f7ff fc2d 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module1, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 8004376:	2200      	movs	r2, #0
 8004378:	2101      	movs	r1, #1
 800437a:	2001      	movs	r0, #1
 800437c:	f7ff fc28 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module1, nRF24_REG_EN_RXADDR, 0x01);                   //Enable RX addresses for pipe0
 8004380:	2201      	movs	r2, #1
 8004382:	2102      	movs	r1, #2
 8004384:	2001      	movs	r0, #1
 8004386:	f7ff fc23 	bl	8003bd0 <nRF24_WriteReg>
			break;
 800438a:	bf00      	nop
		}

		nRF24_WriteReg(Sel_B_Module1, nRF24_REG_SETUP_AW, 0x03);                        //5 Bytes Length Address
 800438c:	2203      	movs	r2, #3
 800438e:	2103      	movs	r1, #3
 8004390:	2001      	movs	r0, #1
 8004392:	f7ff fc1d 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_B_Module1, nRF24_REG_SETUP_RETR, 0x8A);                      //ARD=2000us, ARC=10
 8004396:	228a      	movs	r2, #138	; 0x8a
 8004398:	2104      	movs	r1, #4
 800439a:	2001      	movs	r0, #1
 800439c:	f7ff fc18 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_B_Module1, nRF24_REG_RF_CH, RF_Ch);                          //Set the Frequency Channel to 2
 80043a0:	793b      	ldrb	r3, [r7, #4]
 80043a2:	461a      	mov	r2, r3
 80043a4:	2105      	movs	r1, #5
 80043a6:	2001      	movs	r0, #1
 80043a8:	f7ff fc12 	bl	8003bd0 <nRF24_WriteReg>

		switch(RF_Setup)
 80043ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80043b0:	2b07      	cmp	r3, #7
 80043b2:	d843      	bhi.n	800443c <nRF24_Module_Setup+0x224>
 80043b4:	a201      	add	r2, pc, #4	; (adr r2, 80043bc <nRF24_Module_Setup+0x1a4>)
 80043b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ba:	bf00      	nop
 80043bc:	080043dd 	.word	0x080043dd
 80043c0:	080043e9 	.word	0x080043e9
 80043c4:	080043f5 	.word	0x080043f5
 80043c8:	08004401 	.word	0x08004401
 80043cc:	0800440d 	.word	0x0800440d
 80043d0:	08004419 	.word	0x08004419
 80043d4:	08004425 	.word	0x08004425
 80043d8:	08004431 	.word	0x08004431
		{
	    case MBPS1_Minus18dBm:
	    	nRF24_WriteReg(Sel_B_Module1, nRF24_REG_RF_SETUP, 0x01);                    //-18dBm, 1MBPS, LNA_HCURR=1
 80043dc:	2201      	movs	r2, #1
 80043de:	2106      	movs	r1, #6
 80043e0:	2001      	movs	r0, #1
 80043e2:	f7ff fbf5 	bl	8003bd0 <nRF24_WriteReg>
	    	break;
 80043e6:	e029      	b.n	800443c <nRF24_Module_Setup+0x224>
	    case MBPS1_Minus12dBm:
	    	nRF24_WriteReg(Sel_B_Module1, nRF24_REG_RF_SETUP, 0x03);                    //-12dBm, 1MBPS, LNA_HCURR=1
 80043e8:	2203      	movs	r2, #3
 80043ea:	2106      	movs	r1, #6
 80043ec:	2001      	movs	r0, #1
 80043ee:	f7ff fbef 	bl	8003bd0 <nRF24_WriteReg>
	    	break;
 80043f2:	e023      	b.n	800443c <nRF24_Module_Setup+0x224>
	    case MBPS1_Minus6dBm:
	    	nRF24_WriteReg(Sel_B_Module1, nRF24_REG_RF_SETUP, 0x05);                    //-6dBm, 1MBPS, LNA_HCURR=1
 80043f4:	2205      	movs	r2, #5
 80043f6:	2106      	movs	r1, #6
 80043f8:	2001      	movs	r0, #1
 80043fa:	f7ff fbe9 	bl	8003bd0 <nRF24_WriteReg>
	    	break;
 80043fe:	e01d      	b.n	800443c <nRF24_Module_Setup+0x224>
	    case MBPS1_0dBm:
	    	nRF24_WriteReg(Sel_B_Module1, nRF24_REG_RF_SETUP, 0x07);                    //0dBm, 1MBPS, LNA_HCURR=1
 8004400:	2207      	movs	r2, #7
 8004402:	2106      	movs	r1, #6
 8004404:	2001      	movs	r0, #1
 8004406:	f7ff fbe3 	bl	8003bd0 <nRF24_WriteReg>
	    	break;
 800440a:	e017      	b.n	800443c <nRF24_Module_Setup+0x224>
	    case MBPS2_Minus18dBm:
	    	nRF24_WriteReg(Sel_B_Module1, nRF24_REG_RF_SETUP, 0x09);                    //-18dBm, 2MBPS, LNA_HCURR=1
 800440c:	2209      	movs	r2, #9
 800440e:	2106      	movs	r1, #6
 8004410:	2001      	movs	r0, #1
 8004412:	f7ff fbdd 	bl	8003bd0 <nRF24_WriteReg>
	    	break;
 8004416:	e011      	b.n	800443c <nRF24_Module_Setup+0x224>
	    case MBPS2_Minus12dBm:
	    	nRF24_WriteReg(Sel_B_Module1, nRF24_REG_RF_SETUP, 0x0B);                    //-12dBm, 2MBPS, LNA_HCURR=1
 8004418:	220b      	movs	r2, #11
 800441a:	2106      	movs	r1, #6
 800441c:	2001      	movs	r0, #1
 800441e:	f7ff fbd7 	bl	8003bd0 <nRF24_WriteReg>
	    	break;
 8004422:	e00b      	b.n	800443c <nRF24_Module_Setup+0x224>
	    case MBPS2_Minus6dBm:
	    	nRF24_WriteReg(Sel_B_Module1, nRF24_REG_RF_SETUP, 0x0D);                    //-6dBm, 2MBPS, LNA_HCURR=1
 8004424:	220d      	movs	r2, #13
 8004426:	2106      	movs	r1, #6
 8004428:	2001      	movs	r0, #1
 800442a:	f7ff fbd1 	bl	8003bd0 <nRF24_WriteReg>
	    	break;
 800442e:	e005      	b.n	800443c <nRF24_Module_Setup+0x224>
	    case MBPS2_0dBm:
	    	nRF24_WriteReg(Sel_B_Module1, nRF24_REG_RF_SETUP, 0x0F);                    //0dBm, 2MBPS, LNA_HCURR=1
 8004430:	220f      	movs	r2, #15
 8004432:	2106      	movs	r1, #6
 8004434:	2001      	movs	r0, #1
 8004436:	f7ff fbcb 	bl	8003bd0 <nRF24_WriteReg>
	    	break;
 800443a:	bf00      	nop
		}

		if((mode==Transmitter_Mode_AA)||(mode==Transmitter_Mode_noAA_CRC)||(mode==Transmitter_Mode_noAA_noCRC))
 800443c:	797b      	ldrb	r3, [r7, #5]
 800443e:	2b03      	cmp	r3, #3
 8004440:	d005      	beq.n	800444e <nRF24_Module_Setup+0x236>
 8004442:	797b      	ldrb	r3, [r7, #5]
 8004444:	2b04      	cmp	r3, #4
 8004446:	d002      	beq.n	800444e <nRF24_Module_Setup+0x236>
 8004448:	797b      	ldrb	r3, [r7, #5]
 800444a:	2b05      	cmp	r3, #5
 800444c:	d10c      	bne.n	8004468 <nRF24_Module_Setup+0x250>
		{
			nRF24_WriteMBReg(Sel_B_Module1, nRF24_REG_RX_ADDR_P0, Tx_Addr, 5);          //Set the Pipe0 address to {0x53, 0x52, 0x36, 0x34, 0x00}
 800444e:	2305      	movs	r3, #5
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	210a      	movs	r1, #10
 8004454:	2001      	movs	r0, #1
 8004456:	f7ff fc31 	bl	8003cbc <nRF24_WriteMBReg>
			nRF24_WriteMBReg(Sel_B_Module1, nRF24_REG_TX_ADDR, Tx_Addr, 5);             //Set the TX address to {0x53, 0x52, 0x36, 0x34, 0x00}
 800445a:	2305      	movs	r3, #5
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	2110      	movs	r1, #16
 8004460:	2001      	movs	r0, #1
 8004462:	f7ff fc2b 	bl	8003cbc <nRF24_WriteMBReg>
 8004466:	e034      	b.n	80044d2 <nRF24_Module_Setup+0x2ba>
		}
		else if((mode==Receiver_Mode_AA)||(mode==Receiver_Mode_noAA_CRC)||(mode==Receiver_Mode_noAA_noCRC))
 8004468:	797b      	ldrb	r3, [r7, #5]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <nRF24_Module_Setup+0x262>
 800446e:	797b      	ldrb	r3, [r7, #5]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d002      	beq.n	800447a <nRF24_Module_Setup+0x262>
 8004474:	797b      	ldrb	r3, [r7, #5]
 8004476:	2b02      	cmp	r3, #2
 8004478:	d12b      	bne.n	80044d2 <nRF24_Module_Setup+0x2ba>
		{
			nRF24_WriteMBReg(Sel_B_Module1, nRF24_REG_RX_ADDR_P0, rx_addr_p0, 5);       //Set the Pipe0 address
 800447a:	f107 0214 	add.w	r2, r7, #20
 800447e:	2305      	movs	r3, #5
 8004480:	210a      	movs	r1, #10
 8004482:	2001      	movs	r0, #1
 8004484:	f7ff fc1a 	bl	8003cbc <nRF24_WriteMBReg>
			nRF24_WriteMBReg(Sel_B_Module1, nRF24_REG_RX_ADDR_P1, rx_addr_p1, 5);       //Set the Pipe1 address
 8004488:	f107 020c 	add.w	r2, r7, #12
 800448c:	2305      	movs	r3, #5
 800448e:	210b      	movs	r1, #11
 8004490:	2001      	movs	r0, #1
 8004492:	f7ff fc13 	bl	8003cbc <nRF24_WriteMBReg>
			nRF24_WriteReg(Sel_B_Module1, nRF24_REG_RX_ADDR_P2, rx_addr_p2);            //Set the Pipe2 address
 8004496:	7ffb      	ldrb	r3, [r7, #31]
 8004498:	461a      	mov	r2, r3
 800449a:	210c      	movs	r1, #12
 800449c:	2001      	movs	r0, #1
 800449e:	f7ff fb97 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module1, nRF24_REG_RX_ADDR_P3, rx_addr_p3);            //Set the Pipe3 address
 80044a2:	7fbb      	ldrb	r3, [r7, #30]
 80044a4:	461a      	mov	r2, r3
 80044a6:	210d      	movs	r1, #13
 80044a8:	2001      	movs	r0, #1
 80044aa:	f7ff fb91 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module1, nRF24_REG_RX_ADDR_P4, rx_addr_p4);            //Set the Pipe4 address
 80044ae:	7f7b      	ldrb	r3, [r7, #29]
 80044b0:	461a      	mov	r2, r3
 80044b2:	210e      	movs	r1, #14
 80044b4:	2001      	movs	r0, #1
 80044b6:	f7ff fb8b 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module1, nRF24_REG_RX_ADDR_P5, rx_addr_p5);            //Set the Pipe5 address
 80044ba:	7f3b      	ldrb	r3, [r7, #28]
 80044bc:	461a      	mov	r2, r3
 80044be:	210f      	movs	r1, #15
 80044c0:	2001      	movs	r0, #1
 80044c2:	f7ff fb85 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteMBReg(Sel_B_Module1, nRF24_REG_TX_ADDR, Tx_Addr, 5);             //Set the TX address
 80044c6:	2305      	movs	r3, #5
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	2110      	movs	r1, #16
 80044cc:	2001      	movs	r0, #1
 80044ce:	f7ff fbf5 	bl	8003cbc <nRF24_WriteMBReg>
		}


		nRF24_WriteReg(Sel_B_Module1, nRF24_REG_RX_PW_P0, Payloadsize);                 //Set the Pipe0 Payload size
 80044d2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80044d6:	461a      	mov	r2, r3
 80044d8:	2111      	movs	r1, #17
 80044da:	2001      	movs	r0, #1
 80044dc:	f7ff fb78 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_B_Module1, nRF24_REG_RX_PW_P1, Payloadsize);                 //Set the Pipe1 Payload size
 80044e0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80044e4:	461a      	mov	r2, r3
 80044e6:	2112      	movs	r1, #18
 80044e8:	2001      	movs	r0, #1
 80044ea:	f7ff fb71 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_B_Module1, nRF24_REG_RX_PW_P2, Payloadsize);                 //Set the Pipe2 Payload size
 80044ee:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80044f2:	461a      	mov	r2, r3
 80044f4:	2113      	movs	r1, #19
 80044f6:	2001      	movs	r0, #1
 80044f8:	f7ff fb6a 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_B_Module1, nRF24_REG_RX_PW_P3, Payloadsize);                 //Set the Pipe3 Payload size
 80044fc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004500:	461a      	mov	r2, r3
 8004502:	2114      	movs	r1, #20
 8004504:	2001      	movs	r0, #1
 8004506:	f7ff fb63 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_B_Module1, nRF24_REG_RX_PW_P4, Payloadsize);                 //Set the Pipe4 Payload size
 800450a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800450e:	461a      	mov	r2, r3
 8004510:	2115      	movs	r1, #21
 8004512:	2001      	movs	r0, #1
 8004514:	f7ff fb5c 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_B_Module1, nRF24_REG_RX_PW_P5, Payloadsize);                 //Set the Pipe5 Payload size
 8004518:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800451c:	461a      	mov	r2, r3
 800451e:	2116      	movs	r1, #22
 8004520:	2001      	movs	r0, #1
 8004522:	f7ff fb55 	bl	8003bd0 <nRF24_WriteReg>
		break;
 8004526:	f000 bd01 	b.w	8004f2c <nRF24_Module_Setup+0xd14>
	case Sel_B_Module2:

		switch(mode)
 800452a:	797b      	ldrb	r3, [r7, #5]
 800452c:	2b05      	cmp	r3, #5
 800452e:	d86f      	bhi.n	8004610 <nRF24_Module_Setup+0x3f8>
 8004530:	a201      	add	r2, pc, #4	; (adr r2, 8004538 <nRF24_Module_Setup+0x320>)
 8004532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004536:	bf00      	nop
 8004538:	08004551 	.word	0x08004551
 800453c:	08004571 	.word	0x08004571
 8004540:	08004591 	.word	0x08004591
 8004544:	080045b1 	.word	0x080045b1
 8004548:	080045d1 	.word	0x080045d1
 800454c:	080045f1 	.word	0x080045f1
		{
		case Receiver_Mode_AA:
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_CONFIG, 0x09);                      //PRIM_RX=1, PWR_UP=0, EN_CRC=1
 8004550:	2209      	movs	r2, #9
 8004552:	2100      	movs	r1, #0
 8004554:	2002      	movs	r0, #2
 8004556:	f7ff fb3b 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_EN_AA, 0x3F);                       //Enable AA for all pipes
 800455a:	223f      	movs	r2, #63	; 0x3f
 800455c:	2101      	movs	r1, #1
 800455e:	2002      	movs	r0, #2
 8004560:	f7ff fb36 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_EN_RXADDR, 0x3F);                   //Enable RX addresses for all pipes
 8004564:	223f      	movs	r2, #63	; 0x3f
 8004566:	2102      	movs	r1, #2
 8004568:	2002      	movs	r0, #2
 800456a:	f7ff fb31 	bl	8003bd0 <nRF24_WriteReg>
			break;
 800456e:	e04f      	b.n	8004610 <nRF24_Module_Setup+0x3f8>
		case Receiver_Mode_noAA_CRC:
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_CONFIG, 0x09);                      //PRIM_RX=1, PWR_UP=0, EN_CRC=1
 8004570:	2209      	movs	r2, #9
 8004572:	2100      	movs	r1, #0
 8004574:	2002      	movs	r0, #2
 8004576:	f7ff fb2b 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 800457a:	2200      	movs	r2, #0
 800457c:	2101      	movs	r1, #1
 800457e:	2002      	movs	r0, #2
 8004580:	f7ff fb26 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_EN_RXADDR, 0x3F);                   //Enable RX addresses for all pipes
 8004584:	223f      	movs	r2, #63	; 0x3f
 8004586:	2102      	movs	r1, #2
 8004588:	2002      	movs	r0, #2
 800458a:	f7ff fb21 	bl	8003bd0 <nRF24_WriteReg>
			break;
 800458e:	e03f      	b.n	8004610 <nRF24_Module_Setup+0x3f8>
		case Receiver_Mode_noAA_noCRC:
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_CONFIG, 0x01);                      //PRIM_RX=1, PWR_UP=0, EN_CRC=0
 8004590:	2201      	movs	r2, #1
 8004592:	2100      	movs	r1, #0
 8004594:	2002      	movs	r0, #2
 8004596:	f7ff fb1b 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 800459a:	2200      	movs	r2, #0
 800459c:	2101      	movs	r1, #1
 800459e:	2002      	movs	r0, #2
 80045a0:	f7ff fb16 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_EN_RXADDR, 0x3F);                   //Enable RX addresses for all pipes
 80045a4:	223f      	movs	r2, #63	; 0x3f
 80045a6:	2102      	movs	r1, #2
 80045a8:	2002      	movs	r0, #2
 80045aa:	f7ff fb11 	bl	8003bd0 <nRF24_WriteReg>
			break;
 80045ae:	e02f      	b.n	8004610 <nRF24_Module_Setup+0x3f8>
		case Transmitter_Mode_AA:
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_CONFIG, 0x08);                      //PRIM_RX=0, PWR_UP=0, EN_CRC=1
 80045b0:	2208      	movs	r2, #8
 80045b2:	2100      	movs	r1, #0
 80045b4:	2002      	movs	r0, #2
 80045b6:	f7ff fb0b 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_EN_AA, 0x3F);                       //Enable AA for all pipes
 80045ba:	223f      	movs	r2, #63	; 0x3f
 80045bc:	2101      	movs	r1, #1
 80045be:	2002      	movs	r0, #2
 80045c0:	f7ff fb06 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_EN_RXADDR, 0x01);                   //Enable RX addresses for pipe0
 80045c4:	2201      	movs	r2, #1
 80045c6:	2102      	movs	r1, #2
 80045c8:	2002      	movs	r0, #2
 80045ca:	f7ff fb01 	bl	8003bd0 <nRF24_WriteReg>
			break;
 80045ce:	e01f      	b.n	8004610 <nRF24_Module_Setup+0x3f8>
		case Transmitter_Mode_noAA_CRC:
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_CONFIG, 0x08);                      //PRIM_RX=0, PWR_UP=0, EN_CRC=1
 80045d0:	2208      	movs	r2, #8
 80045d2:	2100      	movs	r1, #0
 80045d4:	2002      	movs	r0, #2
 80045d6:	f7ff fafb 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 80045da:	2200      	movs	r2, #0
 80045dc:	2101      	movs	r1, #1
 80045de:	2002      	movs	r0, #2
 80045e0:	f7ff faf6 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_EN_RXADDR, 0x01);                   //Enable RX addresses for pipe0
 80045e4:	2201      	movs	r2, #1
 80045e6:	2102      	movs	r1, #2
 80045e8:	2002      	movs	r0, #2
 80045ea:	f7ff faf1 	bl	8003bd0 <nRF24_WriteReg>
			break;
 80045ee:	e00f      	b.n	8004610 <nRF24_Module_Setup+0x3f8>
		case Transmitter_Mode_noAA_noCRC:
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_CONFIG, 0x00);                      //PRIM_RX=0, PWR_UP=0, EN_CRC=0
 80045f0:	2200      	movs	r2, #0
 80045f2:	2100      	movs	r1, #0
 80045f4:	2002      	movs	r0, #2
 80045f6:	f7ff faeb 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 80045fa:	2200      	movs	r2, #0
 80045fc:	2101      	movs	r1, #1
 80045fe:	2002      	movs	r0, #2
 8004600:	f7ff fae6 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_EN_RXADDR, 0x01);                   //Enable RX addresses for pipe0
 8004604:	2201      	movs	r2, #1
 8004606:	2102      	movs	r1, #2
 8004608:	2002      	movs	r0, #2
 800460a:	f7ff fae1 	bl	8003bd0 <nRF24_WriteReg>
			break;
 800460e:	bf00      	nop
		}
		nRF24_WriteReg(Sel_B_Module2, nRF24_REG_SETUP_AW, 0x03);                        //5 Bytes Length Address
 8004610:	2203      	movs	r2, #3
 8004612:	2103      	movs	r1, #3
 8004614:	2002      	movs	r0, #2
 8004616:	f7ff fadb 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_B_Module2, nRF24_REG_SETUP_RETR, 0x8A);                      //ARD=2000us, ARC=10
 800461a:	228a      	movs	r2, #138	; 0x8a
 800461c:	2104      	movs	r1, #4
 800461e:	2002      	movs	r0, #2
 8004620:	f7ff fad6 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_B_Module2, nRF24_REG_RF_CH, RF_Ch);                          //Set the Frequency Channel to 2
 8004624:	793b      	ldrb	r3, [r7, #4]
 8004626:	461a      	mov	r2, r3
 8004628:	2105      	movs	r1, #5
 800462a:	2002      	movs	r0, #2
 800462c:	f7ff fad0 	bl	8003bd0 <nRF24_WriteReg>
		switch(RF_Setup)
 8004630:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004634:	2b07      	cmp	r3, #7
 8004636:	d843      	bhi.n	80046c0 <nRF24_Module_Setup+0x4a8>
 8004638:	a201      	add	r2, pc, #4	; (adr r2, 8004640 <nRF24_Module_Setup+0x428>)
 800463a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463e:	bf00      	nop
 8004640:	08004661 	.word	0x08004661
 8004644:	0800466d 	.word	0x0800466d
 8004648:	08004679 	.word	0x08004679
 800464c:	08004685 	.word	0x08004685
 8004650:	08004691 	.word	0x08004691
 8004654:	0800469d 	.word	0x0800469d
 8004658:	080046a9 	.word	0x080046a9
 800465c:	080046b5 	.word	0x080046b5
		{
		case MBPS1_Minus18dBm:
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_RF_SETUP, 0x01);                    //-18dBm, 1MBPS, LNA_HCURR=1
 8004660:	2201      	movs	r2, #1
 8004662:	2106      	movs	r1, #6
 8004664:	2002      	movs	r0, #2
 8004666:	f7ff fab3 	bl	8003bd0 <nRF24_WriteReg>
			break;
 800466a:	e029      	b.n	80046c0 <nRF24_Module_Setup+0x4a8>
		case MBPS1_Minus12dBm:
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_RF_SETUP, 0x03);                    //-12dBm, 1MBPS, LNA_HCURR=1
 800466c:	2203      	movs	r2, #3
 800466e:	2106      	movs	r1, #6
 8004670:	2002      	movs	r0, #2
 8004672:	f7ff faad 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004676:	e023      	b.n	80046c0 <nRF24_Module_Setup+0x4a8>
		case MBPS1_Minus6dBm:
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_RF_SETUP, 0x05);                    //-6dBm, 1MBPS, LNA_HCURR=1
 8004678:	2205      	movs	r2, #5
 800467a:	2106      	movs	r1, #6
 800467c:	2002      	movs	r0, #2
 800467e:	f7ff faa7 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004682:	e01d      	b.n	80046c0 <nRF24_Module_Setup+0x4a8>
		case MBPS1_0dBm:
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_RF_SETUP, 0x07);                    //0dBm, 1MBPS, LNA_HCURR=1
 8004684:	2207      	movs	r2, #7
 8004686:	2106      	movs	r1, #6
 8004688:	2002      	movs	r0, #2
 800468a:	f7ff faa1 	bl	8003bd0 <nRF24_WriteReg>
			break;
 800468e:	e017      	b.n	80046c0 <nRF24_Module_Setup+0x4a8>
		case MBPS2_Minus18dBm:
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_RF_SETUP, 0x09);                    //-18dBm, 2MBPS, LNA_HCURR=1
 8004690:	2209      	movs	r2, #9
 8004692:	2106      	movs	r1, #6
 8004694:	2002      	movs	r0, #2
 8004696:	f7ff fa9b 	bl	8003bd0 <nRF24_WriteReg>
			break;
 800469a:	e011      	b.n	80046c0 <nRF24_Module_Setup+0x4a8>
		case MBPS2_Minus12dBm:
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_RF_SETUP, 0x0B);                    //-12dBm, 2MBPS, LNA_HCURR=1
 800469c:	220b      	movs	r2, #11
 800469e:	2106      	movs	r1, #6
 80046a0:	2002      	movs	r0, #2
 80046a2:	f7ff fa95 	bl	8003bd0 <nRF24_WriteReg>
			break;
 80046a6:	e00b      	b.n	80046c0 <nRF24_Module_Setup+0x4a8>
		case MBPS2_Minus6dBm:
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_RF_SETUP, 0x0D);                    //-6dBm, 2MBPS, LNA_HCURR=1
 80046a8:	220d      	movs	r2, #13
 80046aa:	2106      	movs	r1, #6
 80046ac:	2002      	movs	r0, #2
 80046ae:	f7ff fa8f 	bl	8003bd0 <nRF24_WriteReg>
			break;
 80046b2:	e005      	b.n	80046c0 <nRF24_Module_Setup+0x4a8>
		case MBPS2_0dBm:
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_RF_SETUP, 0x0F);                    //0dBm, 2MBPS, LNA_HCURR=1
 80046b4:	220f      	movs	r2, #15
 80046b6:	2106      	movs	r1, #6
 80046b8:	2002      	movs	r0, #2
 80046ba:	f7ff fa89 	bl	8003bd0 <nRF24_WriteReg>
			break;
 80046be:	bf00      	nop
		}

		if((mode==Transmitter_Mode_AA)||(mode==Transmitter_Mode_noAA_CRC)||(mode==Transmitter_Mode_noAA_noCRC))
 80046c0:	797b      	ldrb	r3, [r7, #5]
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d005      	beq.n	80046d2 <nRF24_Module_Setup+0x4ba>
 80046c6:	797b      	ldrb	r3, [r7, #5]
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d002      	beq.n	80046d2 <nRF24_Module_Setup+0x4ba>
 80046cc:	797b      	ldrb	r3, [r7, #5]
 80046ce:	2b05      	cmp	r3, #5
 80046d0:	d10c      	bne.n	80046ec <nRF24_Module_Setup+0x4d4>
		{
			nRF24_WriteMBReg(Sel_B_Module2, nRF24_REG_RX_ADDR_P0, Tx_Addr, 5);          //Set the Pipe0 address to {0x53, 0x52, 0x36, 0x34, 0x00}
 80046d2:	2305      	movs	r3, #5
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	210a      	movs	r1, #10
 80046d8:	2002      	movs	r0, #2
 80046da:	f7ff faef 	bl	8003cbc <nRF24_WriteMBReg>
			nRF24_WriteMBReg(Sel_B_Module2, nRF24_REG_TX_ADDR, Tx_Addr, 5);             //Set the TX address to {0x53, 0x52, 0x36, 0x34, 0x00}
 80046de:	2305      	movs	r3, #5
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	2110      	movs	r1, #16
 80046e4:	2002      	movs	r0, #2
 80046e6:	f7ff fae9 	bl	8003cbc <nRF24_WriteMBReg>
 80046ea:	e034      	b.n	8004756 <nRF24_Module_Setup+0x53e>
		}
		else if((mode==Receiver_Mode_AA)||(mode==Receiver_Mode_noAA_CRC)||(mode==Receiver_Mode_noAA_noCRC))
 80046ec:	797b      	ldrb	r3, [r7, #5]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d005      	beq.n	80046fe <nRF24_Module_Setup+0x4e6>
 80046f2:	797b      	ldrb	r3, [r7, #5]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d002      	beq.n	80046fe <nRF24_Module_Setup+0x4e6>
 80046f8:	797b      	ldrb	r3, [r7, #5]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d12b      	bne.n	8004756 <nRF24_Module_Setup+0x53e>
		{
			nRF24_WriteMBReg(Sel_B_Module2, nRF24_REG_RX_ADDR_P0, rx_addr_p0, 5);       //Set the Pipe0 address
 80046fe:	f107 0214 	add.w	r2, r7, #20
 8004702:	2305      	movs	r3, #5
 8004704:	210a      	movs	r1, #10
 8004706:	2002      	movs	r0, #2
 8004708:	f7ff fad8 	bl	8003cbc <nRF24_WriteMBReg>
			nRF24_WriteMBReg(Sel_B_Module2, nRF24_REG_RX_ADDR_P1, rx_addr_p1, 5);       //Set the Pipe1 address
 800470c:	f107 020c 	add.w	r2, r7, #12
 8004710:	2305      	movs	r3, #5
 8004712:	210b      	movs	r1, #11
 8004714:	2002      	movs	r0, #2
 8004716:	f7ff fad1 	bl	8003cbc <nRF24_WriteMBReg>
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_RX_ADDR_P2, rx_addr_p2);            //Set the Pipe2 address
 800471a:	7ffb      	ldrb	r3, [r7, #31]
 800471c:	461a      	mov	r2, r3
 800471e:	210c      	movs	r1, #12
 8004720:	2002      	movs	r0, #2
 8004722:	f7ff fa55 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_RX_ADDR_P3, rx_addr_p3);            //Set the Pipe3 address
 8004726:	7fbb      	ldrb	r3, [r7, #30]
 8004728:	461a      	mov	r2, r3
 800472a:	210d      	movs	r1, #13
 800472c:	2002      	movs	r0, #2
 800472e:	f7ff fa4f 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_RX_ADDR_P4, rx_addr_p4);            //Set the Pipe4 address
 8004732:	7f7b      	ldrb	r3, [r7, #29]
 8004734:	461a      	mov	r2, r3
 8004736:	210e      	movs	r1, #14
 8004738:	2002      	movs	r0, #2
 800473a:	f7ff fa49 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_RX_ADDR_P5, rx_addr_p5);            //Set the Pipe5 address
 800473e:	7f3b      	ldrb	r3, [r7, #28]
 8004740:	461a      	mov	r2, r3
 8004742:	210f      	movs	r1, #15
 8004744:	2002      	movs	r0, #2
 8004746:	f7ff fa43 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteMBReg(Sel_B_Module2, nRF24_REG_TX_ADDR, Tx_Addr, 5);             //Set the TX address
 800474a:	2305      	movs	r3, #5
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	2110      	movs	r1, #16
 8004750:	2002      	movs	r0, #2
 8004752:	f7ff fab3 	bl	8003cbc <nRF24_WriteMBReg>
		}


		nRF24_WriteReg(Sel_B_Module2, nRF24_REG_RX_PW_P0, Payloadsize);                 //Set the Pipe0 Payload size
 8004756:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800475a:	461a      	mov	r2, r3
 800475c:	2111      	movs	r1, #17
 800475e:	2002      	movs	r0, #2
 8004760:	f7ff fa36 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_B_Module2, nRF24_REG_RX_PW_P1, Payloadsize);                 //Set the Pipe1 Payload size
 8004764:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004768:	461a      	mov	r2, r3
 800476a:	2112      	movs	r1, #18
 800476c:	2002      	movs	r0, #2
 800476e:	f7ff fa2f 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_B_Module2, nRF24_REG_RX_PW_P2, Payloadsize);                 //Set the Pipe2 Payload size
 8004772:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004776:	461a      	mov	r2, r3
 8004778:	2113      	movs	r1, #19
 800477a:	2002      	movs	r0, #2
 800477c:	f7ff fa28 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_B_Module2, nRF24_REG_RX_PW_P3, Payloadsize);                 //Set the Pipe3 Payload size
 8004780:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004784:	461a      	mov	r2, r3
 8004786:	2114      	movs	r1, #20
 8004788:	2002      	movs	r0, #2
 800478a:	f7ff fa21 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_B_Module2, nRF24_REG_RX_PW_P4, Payloadsize);                 //Set the Pipe4 Payload size
 800478e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004792:	461a      	mov	r2, r3
 8004794:	2115      	movs	r1, #21
 8004796:	2002      	movs	r0, #2
 8004798:	f7ff fa1a 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_B_Module2, nRF24_REG_RX_PW_P5, Payloadsize);                 //Set the Pipe5 Payload size
 800479c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80047a0:	461a      	mov	r2, r3
 80047a2:	2116      	movs	r1, #22
 80047a4:	2002      	movs	r0, #2
 80047a6:	f7ff fa13 	bl	8003bd0 <nRF24_WriteReg>
		break;
 80047aa:	e3bf      	b.n	8004f2c <nRF24_Module_Setup+0xd14>
	case Sel_B_Module3:

		switch(mode)
 80047ac:	797b      	ldrb	r3, [r7, #5]
 80047ae:	2b05      	cmp	r3, #5
 80047b0:	d86e      	bhi.n	8004890 <nRF24_Module_Setup+0x678>
 80047b2:	a201      	add	r2, pc, #4	; (adr r2, 80047b8 <nRF24_Module_Setup+0x5a0>)
 80047b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b8:	080047d1 	.word	0x080047d1
 80047bc:	080047f1 	.word	0x080047f1
 80047c0:	08004811 	.word	0x08004811
 80047c4:	08004831 	.word	0x08004831
 80047c8:	08004851 	.word	0x08004851
 80047cc:	08004871 	.word	0x08004871
		{
		case Receiver_Mode_AA:
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_CONFIG, 0x09);                      //PRIM_RX=1, PWR_UP=0, EN_CRC=1
 80047d0:	2209      	movs	r2, #9
 80047d2:	2100      	movs	r1, #0
 80047d4:	2003      	movs	r0, #3
 80047d6:	f7ff f9fb 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_EN_AA, 0x3F);                       //Enable AA for all pipes
 80047da:	223f      	movs	r2, #63	; 0x3f
 80047dc:	2101      	movs	r1, #1
 80047de:	2003      	movs	r0, #3
 80047e0:	f7ff f9f6 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_EN_RXADDR, 0x3F);                   //Enable RX addresses for all pipes
 80047e4:	223f      	movs	r2, #63	; 0x3f
 80047e6:	2102      	movs	r1, #2
 80047e8:	2003      	movs	r0, #3
 80047ea:	f7ff f9f1 	bl	8003bd0 <nRF24_WriteReg>
			break;
 80047ee:	e04f      	b.n	8004890 <nRF24_Module_Setup+0x678>
		case Receiver_Mode_noAA_CRC:
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_CONFIG, 0x09);                      //PRIM_RX=1, PWR_UP=0, EN_CRC=1
 80047f0:	2209      	movs	r2, #9
 80047f2:	2100      	movs	r1, #0
 80047f4:	2003      	movs	r0, #3
 80047f6:	f7ff f9eb 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 80047fa:	2200      	movs	r2, #0
 80047fc:	2101      	movs	r1, #1
 80047fe:	2003      	movs	r0, #3
 8004800:	f7ff f9e6 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_EN_RXADDR, 0x3F);                   //Enable RX addresses for all pipes
 8004804:	223f      	movs	r2, #63	; 0x3f
 8004806:	2102      	movs	r1, #2
 8004808:	2003      	movs	r0, #3
 800480a:	f7ff f9e1 	bl	8003bd0 <nRF24_WriteReg>
			break;
 800480e:	e03f      	b.n	8004890 <nRF24_Module_Setup+0x678>
		case Receiver_Mode_noAA_noCRC:
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_CONFIG, 0x01);                      //PRIM_RX=1, PWR_UP=0, EN_CRC=0
 8004810:	2201      	movs	r2, #1
 8004812:	2100      	movs	r1, #0
 8004814:	2003      	movs	r0, #3
 8004816:	f7ff f9db 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 800481a:	2200      	movs	r2, #0
 800481c:	2101      	movs	r1, #1
 800481e:	2003      	movs	r0, #3
 8004820:	f7ff f9d6 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_EN_RXADDR, 0x3F);                   //Enable RX addresses for all pipes
 8004824:	223f      	movs	r2, #63	; 0x3f
 8004826:	2102      	movs	r1, #2
 8004828:	2003      	movs	r0, #3
 800482a:	f7ff f9d1 	bl	8003bd0 <nRF24_WriteReg>
			break;
 800482e:	e02f      	b.n	8004890 <nRF24_Module_Setup+0x678>
		case Transmitter_Mode_AA:
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_CONFIG, 0x08);                      //PRIM_RX=0, PWR_UP=0, EN_CRC=1
 8004830:	2208      	movs	r2, #8
 8004832:	2100      	movs	r1, #0
 8004834:	2003      	movs	r0, #3
 8004836:	f7ff f9cb 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_EN_AA, 0x3F);                       //Enable AA for all pipes
 800483a:	223f      	movs	r2, #63	; 0x3f
 800483c:	2101      	movs	r1, #1
 800483e:	2003      	movs	r0, #3
 8004840:	f7ff f9c6 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_EN_RXADDR, 0x01);                   //Enable RX addresses for pipe0
 8004844:	2201      	movs	r2, #1
 8004846:	2102      	movs	r1, #2
 8004848:	2003      	movs	r0, #3
 800484a:	f7ff f9c1 	bl	8003bd0 <nRF24_WriteReg>
			break;
 800484e:	e01f      	b.n	8004890 <nRF24_Module_Setup+0x678>
		case Transmitter_Mode_noAA_CRC:
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_CONFIG, 0x08);                      //PRIM_RX=0, PWR_UP=0, EN_CRC=1
 8004850:	2208      	movs	r2, #8
 8004852:	2100      	movs	r1, #0
 8004854:	2003      	movs	r0, #3
 8004856:	f7ff f9bb 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 800485a:	2200      	movs	r2, #0
 800485c:	2101      	movs	r1, #1
 800485e:	2003      	movs	r0, #3
 8004860:	f7ff f9b6 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_EN_RXADDR, 0x01);                   //Enable RX addresses for pipe0
 8004864:	2201      	movs	r2, #1
 8004866:	2102      	movs	r1, #2
 8004868:	2003      	movs	r0, #3
 800486a:	f7ff f9b1 	bl	8003bd0 <nRF24_WriteReg>
			break;
 800486e:	e00f      	b.n	8004890 <nRF24_Module_Setup+0x678>
		case Transmitter_Mode_noAA_noCRC:
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_CONFIG, 0x00);                      //PRIM_RX=0, PWR_UP=0, EN_CRC=0
 8004870:	2200      	movs	r2, #0
 8004872:	2100      	movs	r1, #0
 8004874:	2003      	movs	r0, #3
 8004876:	f7ff f9ab 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 800487a:	2200      	movs	r2, #0
 800487c:	2101      	movs	r1, #1
 800487e:	2003      	movs	r0, #3
 8004880:	f7ff f9a6 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_EN_RXADDR, 0x01);                   //Enable RX addresses for pipe0
 8004884:	2201      	movs	r2, #1
 8004886:	2102      	movs	r1, #2
 8004888:	2003      	movs	r0, #3
 800488a:	f7ff f9a1 	bl	8003bd0 <nRF24_WriteReg>
			break;
 800488e:	bf00      	nop
		}
		nRF24_WriteReg(Sel_B_Module3, nRF24_REG_SETUP_AW, 0x03);                        //5 Bytes Length Address
 8004890:	2203      	movs	r2, #3
 8004892:	2103      	movs	r1, #3
 8004894:	2003      	movs	r0, #3
 8004896:	f7ff f99b 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_B_Module3, nRF24_REG_SETUP_RETR, 0x8A);                      //ARD=2000us, ARC=10
 800489a:	228a      	movs	r2, #138	; 0x8a
 800489c:	2104      	movs	r1, #4
 800489e:	2003      	movs	r0, #3
 80048a0:	f7ff f996 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_B_Module3, nRF24_REG_RF_CH, RF_Ch);                          //Set the Frequency Channel to 2
 80048a4:	793b      	ldrb	r3, [r7, #4]
 80048a6:	461a      	mov	r2, r3
 80048a8:	2105      	movs	r1, #5
 80048aa:	2003      	movs	r0, #3
 80048ac:	f7ff f990 	bl	8003bd0 <nRF24_WriteReg>
		switch(RF_Setup)
 80048b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80048b4:	2b07      	cmp	r3, #7
 80048b6:	d843      	bhi.n	8004940 <nRF24_Module_Setup+0x728>
 80048b8:	a201      	add	r2, pc, #4	; (adr r2, 80048c0 <nRF24_Module_Setup+0x6a8>)
 80048ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048be:	bf00      	nop
 80048c0:	080048e1 	.word	0x080048e1
 80048c4:	080048ed 	.word	0x080048ed
 80048c8:	080048f9 	.word	0x080048f9
 80048cc:	08004905 	.word	0x08004905
 80048d0:	08004911 	.word	0x08004911
 80048d4:	0800491d 	.word	0x0800491d
 80048d8:	08004929 	.word	0x08004929
 80048dc:	08004935 	.word	0x08004935
		{
		case MBPS1_Minus18dBm:
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_RF_SETUP, 0x01);                    //-18dBm, 1MBPS, LNA_HCURR=1
 80048e0:	2201      	movs	r2, #1
 80048e2:	2106      	movs	r1, #6
 80048e4:	2003      	movs	r0, #3
 80048e6:	f7ff f973 	bl	8003bd0 <nRF24_WriteReg>
			break;
 80048ea:	e029      	b.n	8004940 <nRF24_Module_Setup+0x728>
		case MBPS1_Minus12dBm:
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_RF_SETUP, 0x03);                    //-12dBm, 1MBPS, LNA_HCURR=1
 80048ec:	2203      	movs	r2, #3
 80048ee:	2106      	movs	r1, #6
 80048f0:	2003      	movs	r0, #3
 80048f2:	f7ff f96d 	bl	8003bd0 <nRF24_WriteReg>
			break;
 80048f6:	e023      	b.n	8004940 <nRF24_Module_Setup+0x728>
		case MBPS1_Minus6dBm:
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_RF_SETUP, 0x05);                    //-6dBm, 1MBPS, LNA_HCURR=1
 80048f8:	2205      	movs	r2, #5
 80048fa:	2106      	movs	r1, #6
 80048fc:	2003      	movs	r0, #3
 80048fe:	f7ff f967 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004902:	e01d      	b.n	8004940 <nRF24_Module_Setup+0x728>
		case MBPS1_0dBm:
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_RF_SETUP, 0x07);                    //0dBm, 1MBPS, LNA_HCURR=1
 8004904:	2207      	movs	r2, #7
 8004906:	2106      	movs	r1, #6
 8004908:	2003      	movs	r0, #3
 800490a:	f7ff f961 	bl	8003bd0 <nRF24_WriteReg>
			break;
 800490e:	e017      	b.n	8004940 <nRF24_Module_Setup+0x728>
		case MBPS2_Minus18dBm:
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_RF_SETUP, 0x09);                    //-18dBm, 2MBPS, LNA_HCURR=1
 8004910:	2209      	movs	r2, #9
 8004912:	2106      	movs	r1, #6
 8004914:	2003      	movs	r0, #3
 8004916:	f7ff f95b 	bl	8003bd0 <nRF24_WriteReg>
			break;
 800491a:	e011      	b.n	8004940 <nRF24_Module_Setup+0x728>
		case MBPS2_Minus12dBm:
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_RF_SETUP, 0x0B);                    //-12dBm, 2MBPS, LNA_HCURR=1
 800491c:	220b      	movs	r2, #11
 800491e:	2106      	movs	r1, #6
 8004920:	2003      	movs	r0, #3
 8004922:	f7ff f955 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004926:	e00b      	b.n	8004940 <nRF24_Module_Setup+0x728>
		case MBPS2_Minus6dBm:
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_RF_SETUP, 0x0D);                    //-6dBm, 2MBPS, LNA_HCURR=1
 8004928:	220d      	movs	r2, #13
 800492a:	2106      	movs	r1, #6
 800492c:	2003      	movs	r0, #3
 800492e:	f7ff f94f 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004932:	e005      	b.n	8004940 <nRF24_Module_Setup+0x728>
		case MBPS2_0dBm:
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_RF_SETUP, 0x0F);                    //0dBm, 2MBPS, LNA_HCURR=1
 8004934:	220f      	movs	r2, #15
 8004936:	2106      	movs	r1, #6
 8004938:	2003      	movs	r0, #3
 800493a:	f7ff f949 	bl	8003bd0 <nRF24_WriteReg>
			break;
 800493e:	bf00      	nop
		}

		if((mode==Transmitter_Mode_AA)||(mode==Transmitter_Mode_noAA_CRC)||(mode==Transmitter_Mode_noAA_noCRC))
 8004940:	797b      	ldrb	r3, [r7, #5]
 8004942:	2b03      	cmp	r3, #3
 8004944:	d005      	beq.n	8004952 <nRF24_Module_Setup+0x73a>
 8004946:	797b      	ldrb	r3, [r7, #5]
 8004948:	2b04      	cmp	r3, #4
 800494a:	d002      	beq.n	8004952 <nRF24_Module_Setup+0x73a>
 800494c:	797b      	ldrb	r3, [r7, #5]
 800494e:	2b05      	cmp	r3, #5
 8004950:	d10c      	bne.n	800496c <nRF24_Module_Setup+0x754>
		{
			nRF24_WriteMBReg(Sel_B_Module3, nRF24_REG_RX_ADDR_P0, Tx_Addr, 5);          //Set the Pipe0 address to {0x53, 0x52, 0x36, 0x34, 0x00}
 8004952:	2305      	movs	r3, #5
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	210a      	movs	r1, #10
 8004958:	2003      	movs	r0, #3
 800495a:	f7ff f9af 	bl	8003cbc <nRF24_WriteMBReg>
			nRF24_WriteMBReg(Sel_B_Module3, nRF24_REG_TX_ADDR, Tx_Addr, 5);             //Set the TX address to {0x53, 0x52, 0x36, 0x34, 0x00}
 800495e:	2305      	movs	r3, #5
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	2110      	movs	r1, #16
 8004964:	2003      	movs	r0, #3
 8004966:	f7ff f9a9 	bl	8003cbc <nRF24_WriteMBReg>
 800496a:	e034      	b.n	80049d6 <nRF24_Module_Setup+0x7be>
		}
		else if((mode==Receiver_Mode_AA)||(mode==Receiver_Mode_noAA_CRC)||(mode==Receiver_Mode_noAA_noCRC))
 800496c:	797b      	ldrb	r3, [r7, #5]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d005      	beq.n	800497e <nRF24_Module_Setup+0x766>
 8004972:	797b      	ldrb	r3, [r7, #5]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d002      	beq.n	800497e <nRF24_Module_Setup+0x766>
 8004978:	797b      	ldrb	r3, [r7, #5]
 800497a:	2b02      	cmp	r3, #2
 800497c:	d12b      	bne.n	80049d6 <nRF24_Module_Setup+0x7be>
		{
			nRF24_WriteMBReg(Sel_B_Module3, nRF24_REG_RX_ADDR_P0, rx_addr_p0, 5);       //Set the Pipe0 address
 800497e:	f107 0214 	add.w	r2, r7, #20
 8004982:	2305      	movs	r3, #5
 8004984:	210a      	movs	r1, #10
 8004986:	2003      	movs	r0, #3
 8004988:	f7ff f998 	bl	8003cbc <nRF24_WriteMBReg>
			nRF24_WriteMBReg(Sel_B_Module3, nRF24_REG_RX_ADDR_P1, rx_addr_p1, 5);       //Set the Pipe1 address
 800498c:	f107 020c 	add.w	r2, r7, #12
 8004990:	2305      	movs	r3, #5
 8004992:	210b      	movs	r1, #11
 8004994:	2003      	movs	r0, #3
 8004996:	f7ff f991 	bl	8003cbc <nRF24_WriteMBReg>
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_RX_ADDR_P2, rx_addr_p2);            //Set the Pipe2 address
 800499a:	7ffb      	ldrb	r3, [r7, #31]
 800499c:	461a      	mov	r2, r3
 800499e:	210c      	movs	r1, #12
 80049a0:	2003      	movs	r0, #3
 80049a2:	f7ff f915 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_RX_ADDR_P3, rx_addr_p3);            //Set the Pipe3 address
 80049a6:	7fbb      	ldrb	r3, [r7, #30]
 80049a8:	461a      	mov	r2, r3
 80049aa:	210d      	movs	r1, #13
 80049ac:	2003      	movs	r0, #3
 80049ae:	f7ff f90f 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_RX_ADDR_P4, rx_addr_p4);            //Set the Pipe4 address
 80049b2:	7f7b      	ldrb	r3, [r7, #29]
 80049b4:	461a      	mov	r2, r3
 80049b6:	210e      	movs	r1, #14
 80049b8:	2003      	movs	r0, #3
 80049ba:	f7ff f909 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_RX_ADDR_P5, rx_addr_p5);            //Set the Pipe5 address
 80049be:	7f3b      	ldrb	r3, [r7, #28]
 80049c0:	461a      	mov	r2, r3
 80049c2:	210f      	movs	r1, #15
 80049c4:	2003      	movs	r0, #3
 80049c6:	f7ff f903 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteMBReg(Sel_B_Module3, nRF24_REG_TX_ADDR, Tx_Addr, 5);             //Set the TX address
 80049ca:	2305      	movs	r3, #5
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	2110      	movs	r1, #16
 80049d0:	2003      	movs	r0, #3
 80049d2:	f7ff f973 	bl	8003cbc <nRF24_WriteMBReg>
		}


		nRF24_WriteReg(Sel_B_Module3, nRF24_REG_RX_PW_P0, Payloadsize);                 //Set the Pipe0 Payload size
 80049d6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80049da:	461a      	mov	r2, r3
 80049dc:	2111      	movs	r1, #17
 80049de:	2003      	movs	r0, #3
 80049e0:	f7ff f8f6 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_B_Module3, nRF24_REG_RX_PW_P1, Payloadsize);                 //Set the Pipe1 Payload size
 80049e4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80049e8:	461a      	mov	r2, r3
 80049ea:	2112      	movs	r1, #18
 80049ec:	2003      	movs	r0, #3
 80049ee:	f7ff f8ef 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_B_Module3, nRF24_REG_RX_PW_P2, Payloadsize);                 //Set the Pipe2 Payload size
 80049f2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80049f6:	461a      	mov	r2, r3
 80049f8:	2113      	movs	r1, #19
 80049fa:	2003      	movs	r0, #3
 80049fc:	f7ff f8e8 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_B_Module3, nRF24_REG_RX_PW_P3, Payloadsize);                 //Set the Pipe3 Payload size
 8004a00:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004a04:	461a      	mov	r2, r3
 8004a06:	2114      	movs	r1, #20
 8004a08:	2003      	movs	r0, #3
 8004a0a:	f7ff f8e1 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_B_Module3, nRF24_REG_RX_PW_P4, Payloadsize);                 //Set the Pipe4 Payload size
 8004a0e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004a12:	461a      	mov	r2, r3
 8004a14:	2115      	movs	r1, #21
 8004a16:	2003      	movs	r0, #3
 8004a18:	f7ff f8da 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_B_Module3, nRF24_REG_RX_PW_P5, Payloadsize);                 //Set the Pipe5 Payload size
 8004a1c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004a20:	461a      	mov	r2, r3
 8004a22:	2116      	movs	r1, #22
 8004a24:	2003      	movs	r0, #3
 8004a26:	f7ff f8d3 	bl	8003bd0 <nRF24_WriteReg>
		break;
 8004a2a:	e27f      	b.n	8004f2c <nRF24_Module_Setup+0xd14>
	case Sel_B_Module4:

		switch(mode)
 8004a2c:	797b      	ldrb	r3, [r7, #5]
 8004a2e:	2b05      	cmp	r3, #5
 8004a30:	d86e      	bhi.n	8004b10 <nRF24_Module_Setup+0x8f8>
 8004a32:	a201      	add	r2, pc, #4	; (adr r2, 8004a38 <nRF24_Module_Setup+0x820>)
 8004a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a38:	08004a51 	.word	0x08004a51
 8004a3c:	08004a71 	.word	0x08004a71
 8004a40:	08004a91 	.word	0x08004a91
 8004a44:	08004ab1 	.word	0x08004ab1
 8004a48:	08004ad1 	.word	0x08004ad1
 8004a4c:	08004af1 	.word	0x08004af1
		{
		case Receiver_Mode_AA:
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_CONFIG, 0x09);                      //PRIM_RX=1, PWR_UP=0, EN_CRC=1
 8004a50:	2209      	movs	r2, #9
 8004a52:	2100      	movs	r1, #0
 8004a54:	2004      	movs	r0, #4
 8004a56:	f7ff f8bb 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_EN_AA, 0x3F);                       //Enable AA for all pipes
 8004a5a:	223f      	movs	r2, #63	; 0x3f
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	2004      	movs	r0, #4
 8004a60:	f7ff f8b6 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_EN_RXADDR, 0x3F);                   //Enable RX addresses for all pipes
 8004a64:	223f      	movs	r2, #63	; 0x3f
 8004a66:	2102      	movs	r1, #2
 8004a68:	2004      	movs	r0, #4
 8004a6a:	f7ff f8b1 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004a6e:	e04f      	b.n	8004b10 <nRF24_Module_Setup+0x8f8>
		case Receiver_Mode_noAA_CRC:
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_CONFIG, 0x09);                      //PRIM_RX=1, PWR_UP=0, EN_CRC=1
 8004a70:	2209      	movs	r2, #9
 8004a72:	2100      	movs	r1, #0
 8004a74:	2004      	movs	r0, #4
 8004a76:	f7ff f8ab 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	2004      	movs	r0, #4
 8004a80:	f7ff f8a6 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_EN_RXADDR, 0x3F);                   //Enable RX addresses for all pipes
 8004a84:	223f      	movs	r2, #63	; 0x3f
 8004a86:	2102      	movs	r1, #2
 8004a88:	2004      	movs	r0, #4
 8004a8a:	f7ff f8a1 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004a8e:	e03f      	b.n	8004b10 <nRF24_Module_Setup+0x8f8>
		case Receiver_Mode_noAA_noCRC:
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_CONFIG, 0x01);                      //PRIM_RX=1, PWR_UP=0, EN_CRC=0
 8004a90:	2201      	movs	r2, #1
 8004a92:	2100      	movs	r1, #0
 8004a94:	2004      	movs	r0, #4
 8004a96:	f7ff f89b 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	2004      	movs	r0, #4
 8004aa0:	f7ff f896 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_EN_RXADDR, 0x3F);                   //Enable RX addresses for all pipes
 8004aa4:	223f      	movs	r2, #63	; 0x3f
 8004aa6:	2102      	movs	r1, #2
 8004aa8:	2004      	movs	r0, #4
 8004aaa:	f7ff f891 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004aae:	e02f      	b.n	8004b10 <nRF24_Module_Setup+0x8f8>
		case Transmitter_Mode_AA:
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_CONFIG, 0x08);                      //PRIM_RX=0, PWR_UP=0, EN_CRC=1
 8004ab0:	2208      	movs	r2, #8
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	2004      	movs	r0, #4
 8004ab6:	f7ff f88b 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_EN_AA, 0x3F);                       //Enable AA for all pipes
 8004aba:	223f      	movs	r2, #63	; 0x3f
 8004abc:	2101      	movs	r1, #1
 8004abe:	2004      	movs	r0, #4
 8004ac0:	f7ff f886 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_EN_RXADDR, 0x01);                   //Enable RX addresses for pipe0
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	2102      	movs	r1, #2
 8004ac8:	2004      	movs	r0, #4
 8004aca:	f7ff f881 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004ace:	e01f      	b.n	8004b10 <nRF24_Module_Setup+0x8f8>
		case Transmitter_Mode_noAA_CRC:
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_CONFIG, 0x08);                      //PRIM_RX=0, PWR_UP=0, EN_CRC=1
 8004ad0:	2208      	movs	r2, #8
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	2004      	movs	r0, #4
 8004ad6:	f7ff f87b 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 8004ada:	2200      	movs	r2, #0
 8004adc:	2101      	movs	r1, #1
 8004ade:	2004      	movs	r0, #4
 8004ae0:	f7ff f876 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_EN_RXADDR, 0x01);                   //Enable RX addresses for pipe0
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	2102      	movs	r1, #2
 8004ae8:	2004      	movs	r0, #4
 8004aea:	f7ff f871 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004aee:	e00f      	b.n	8004b10 <nRF24_Module_Setup+0x8f8>
		case Transmitter_Mode_noAA_noCRC:
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_CONFIG, 0x00);                      //PRIM_RX=0, PWR_UP=0, EN_CRC=0
 8004af0:	2200      	movs	r2, #0
 8004af2:	2100      	movs	r1, #0
 8004af4:	2004      	movs	r0, #4
 8004af6:	f7ff f86b 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 8004afa:	2200      	movs	r2, #0
 8004afc:	2101      	movs	r1, #1
 8004afe:	2004      	movs	r0, #4
 8004b00:	f7ff f866 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_EN_RXADDR, 0x01);                   //Enable RX addresses for pipe0
 8004b04:	2201      	movs	r2, #1
 8004b06:	2102      	movs	r1, #2
 8004b08:	2004      	movs	r0, #4
 8004b0a:	f7ff f861 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004b0e:	bf00      	nop
		}
		nRF24_WriteReg(Sel_B_Module4, nRF24_REG_SETUP_AW, 0x03);                        //5 Bytes Length Address
 8004b10:	2203      	movs	r2, #3
 8004b12:	2103      	movs	r1, #3
 8004b14:	2004      	movs	r0, #4
 8004b16:	f7ff f85b 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_B_Module4, nRF24_REG_SETUP_RETR, 0x8A);                      //ARD=2000us, ARC=10
 8004b1a:	228a      	movs	r2, #138	; 0x8a
 8004b1c:	2104      	movs	r1, #4
 8004b1e:	2004      	movs	r0, #4
 8004b20:	f7ff f856 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_B_Module4, nRF24_REG_RF_CH, RF_Ch);                          //Set the Frequency Channel to 2
 8004b24:	793b      	ldrb	r3, [r7, #4]
 8004b26:	461a      	mov	r2, r3
 8004b28:	2105      	movs	r1, #5
 8004b2a:	2004      	movs	r0, #4
 8004b2c:	f7ff f850 	bl	8003bd0 <nRF24_WriteReg>
		switch(RF_Setup)
 8004b30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004b34:	2b07      	cmp	r3, #7
 8004b36:	d843      	bhi.n	8004bc0 <nRF24_Module_Setup+0x9a8>
 8004b38:	a201      	add	r2, pc, #4	; (adr r2, 8004b40 <nRF24_Module_Setup+0x928>)
 8004b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3e:	bf00      	nop
 8004b40:	08004b61 	.word	0x08004b61
 8004b44:	08004b6d 	.word	0x08004b6d
 8004b48:	08004b79 	.word	0x08004b79
 8004b4c:	08004b85 	.word	0x08004b85
 8004b50:	08004b91 	.word	0x08004b91
 8004b54:	08004b9d 	.word	0x08004b9d
 8004b58:	08004ba9 	.word	0x08004ba9
 8004b5c:	08004bb5 	.word	0x08004bb5
		{
		case MBPS1_Minus18dBm:
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_RF_SETUP, 0x01);                    //-18dBm, 1MBPS, LNA_HCURR=1
 8004b60:	2201      	movs	r2, #1
 8004b62:	2106      	movs	r1, #6
 8004b64:	2004      	movs	r0, #4
 8004b66:	f7ff f833 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004b6a:	e029      	b.n	8004bc0 <nRF24_Module_Setup+0x9a8>
		case MBPS1_Minus12dBm:
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_RF_SETUP, 0x03);                    //-12dBm, 1MBPS, LNA_HCURR=1
 8004b6c:	2203      	movs	r2, #3
 8004b6e:	2106      	movs	r1, #6
 8004b70:	2004      	movs	r0, #4
 8004b72:	f7ff f82d 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004b76:	e023      	b.n	8004bc0 <nRF24_Module_Setup+0x9a8>
		case MBPS1_Minus6dBm:
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_RF_SETUP, 0x05);                    //-6dBm, 1MBPS, LNA_HCURR=1
 8004b78:	2205      	movs	r2, #5
 8004b7a:	2106      	movs	r1, #6
 8004b7c:	2004      	movs	r0, #4
 8004b7e:	f7ff f827 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004b82:	e01d      	b.n	8004bc0 <nRF24_Module_Setup+0x9a8>
		case MBPS1_0dBm:
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_RF_SETUP, 0x07);                    //0dBm, 1MBPS, LNA_HCURR=1
 8004b84:	2207      	movs	r2, #7
 8004b86:	2106      	movs	r1, #6
 8004b88:	2004      	movs	r0, #4
 8004b8a:	f7ff f821 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004b8e:	e017      	b.n	8004bc0 <nRF24_Module_Setup+0x9a8>
		case MBPS2_Minus18dBm:
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_RF_SETUP, 0x09);                    //-18dBm, 2MBPS, LNA_HCURR=1
 8004b90:	2209      	movs	r2, #9
 8004b92:	2106      	movs	r1, #6
 8004b94:	2004      	movs	r0, #4
 8004b96:	f7ff f81b 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004b9a:	e011      	b.n	8004bc0 <nRF24_Module_Setup+0x9a8>
		case MBPS2_Minus12dBm:
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_RF_SETUP, 0x0B);                    //-12dBm, 2MBPS, LNA_HCURR=1
 8004b9c:	220b      	movs	r2, #11
 8004b9e:	2106      	movs	r1, #6
 8004ba0:	2004      	movs	r0, #4
 8004ba2:	f7ff f815 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004ba6:	e00b      	b.n	8004bc0 <nRF24_Module_Setup+0x9a8>
		case MBPS2_Minus6dBm:
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_RF_SETUP, 0x0D);                    //-6dBm, 2MBPS, LNA_HCURR=1
 8004ba8:	220d      	movs	r2, #13
 8004baa:	2106      	movs	r1, #6
 8004bac:	2004      	movs	r0, #4
 8004bae:	f7ff f80f 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004bb2:	e005      	b.n	8004bc0 <nRF24_Module_Setup+0x9a8>
		case MBPS2_0dBm:
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_RF_SETUP, 0x0F);                    //0dBm, 2MBPS, LNA_HCURR=1
 8004bb4:	220f      	movs	r2, #15
 8004bb6:	2106      	movs	r1, #6
 8004bb8:	2004      	movs	r0, #4
 8004bba:	f7ff f809 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004bbe:	bf00      	nop
		}

		if((mode==Transmitter_Mode_AA)||(mode==Transmitter_Mode_noAA_CRC)||(mode==Transmitter_Mode_noAA_noCRC))
 8004bc0:	797b      	ldrb	r3, [r7, #5]
 8004bc2:	2b03      	cmp	r3, #3
 8004bc4:	d005      	beq.n	8004bd2 <nRF24_Module_Setup+0x9ba>
 8004bc6:	797b      	ldrb	r3, [r7, #5]
 8004bc8:	2b04      	cmp	r3, #4
 8004bca:	d002      	beq.n	8004bd2 <nRF24_Module_Setup+0x9ba>
 8004bcc:	797b      	ldrb	r3, [r7, #5]
 8004bce:	2b05      	cmp	r3, #5
 8004bd0:	d10c      	bne.n	8004bec <nRF24_Module_Setup+0x9d4>
		{
			nRF24_WriteMBReg(Sel_B_Module4, nRF24_REG_RX_ADDR_P0, Tx_Addr, 5);          //Set the Pipe0 address to {0x53, 0x52, 0x36, 0x34, 0x00}
 8004bd2:	2305      	movs	r3, #5
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	210a      	movs	r1, #10
 8004bd8:	2004      	movs	r0, #4
 8004bda:	f7ff f86f 	bl	8003cbc <nRF24_WriteMBReg>
			nRF24_WriteMBReg(Sel_B_Module4, nRF24_REG_TX_ADDR, Tx_Addr, 5);             //Set the TX address to {0x53, 0x52, 0x36, 0x34, 0x00}
 8004bde:	2305      	movs	r3, #5
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	2110      	movs	r1, #16
 8004be4:	2004      	movs	r0, #4
 8004be6:	f7ff f869 	bl	8003cbc <nRF24_WriteMBReg>
 8004bea:	e034      	b.n	8004c56 <nRF24_Module_Setup+0xa3e>
		}
		else if((mode==Receiver_Mode_AA)||(mode==Receiver_Mode_noAA_CRC)||(mode==Receiver_Mode_noAA_noCRC))
 8004bec:	797b      	ldrb	r3, [r7, #5]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d005      	beq.n	8004bfe <nRF24_Module_Setup+0x9e6>
 8004bf2:	797b      	ldrb	r3, [r7, #5]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d002      	beq.n	8004bfe <nRF24_Module_Setup+0x9e6>
 8004bf8:	797b      	ldrb	r3, [r7, #5]
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d12b      	bne.n	8004c56 <nRF24_Module_Setup+0xa3e>
		{
			nRF24_WriteMBReg(Sel_B_Module4, nRF24_REG_RX_ADDR_P0, rx_addr_p0, 5);       //Set the Pipe0 address
 8004bfe:	f107 0214 	add.w	r2, r7, #20
 8004c02:	2305      	movs	r3, #5
 8004c04:	210a      	movs	r1, #10
 8004c06:	2004      	movs	r0, #4
 8004c08:	f7ff f858 	bl	8003cbc <nRF24_WriteMBReg>
			nRF24_WriteMBReg(Sel_B_Module4, nRF24_REG_RX_ADDR_P1, rx_addr_p1, 5);       //Set the Pipe1 address
 8004c0c:	f107 020c 	add.w	r2, r7, #12
 8004c10:	2305      	movs	r3, #5
 8004c12:	210b      	movs	r1, #11
 8004c14:	2004      	movs	r0, #4
 8004c16:	f7ff f851 	bl	8003cbc <nRF24_WriteMBReg>
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_RX_ADDR_P2, rx_addr_p2);            //Set the Pipe2 address
 8004c1a:	7ffb      	ldrb	r3, [r7, #31]
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	210c      	movs	r1, #12
 8004c20:	2004      	movs	r0, #4
 8004c22:	f7fe ffd5 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_RX_ADDR_P3, rx_addr_p3);            //Set the Pipe3 address
 8004c26:	7fbb      	ldrb	r3, [r7, #30]
 8004c28:	461a      	mov	r2, r3
 8004c2a:	210d      	movs	r1, #13
 8004c2c:	2004      	movs	r0, #4
 8004c2e:	f7fe ffcf 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_RX_ADDR_P4, rx_addr_p4);            //Set the Pipe4 address
 8004c32:	7f7b      	ldrb	r3, [r7, #29]
 8004c34:	461a      	mov	r2, r3
 8004c36:	210e      	movs	r1, #14
 8004c38:	2004      	movs	r0, #4
 8004c3a:	f7fe ffc9 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_RX_ADDR_P5, rx_addr_p5);            //Set the Pipe5 address
 8004c3e:	7f3b      	ldrb	r3, [r7, #28]
 8004c40:	461a      	mov	r2, r3
 8004c42:	210f      	movs	r1, #15
 8004c44:	2004      	movs	r0, #4
 8004c46:	f7fe ffc3 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteMBReg(Sel_B_Module4, nRF24_REG_TX_ADDR, Tx_Addr, 5);             //Set the TX address
 8004c4a:	2305      	movs	r3, #5
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	2110      	movs	r1, #16
 8004c50:	2004      	movs	r0, #4
 8004c52:	f7ff f833 	bl	8003cbc <nRF24_WriteMBReg>
		}


		nRF24_WriteReg(Sel_B_Module4, nRF24_REG_RX_PW_P0, Payloadsize);                 //Set the Pipe0 Payload size
 8004c56:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	2111      	movs	r1, #17
 8004c5e:	2004      	movs	r0, #4
 8004c60:	f7fe ffb6 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_B_Module4, nRF24_REG_RX_PW_P1, Payloadsize);                 //Set the Pipe1 Payload size
 8004c64:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004c68:	461a      	mov	r2, r3
 8004c6a:	2112      	movs	r1, #18
 8004c6c:	2004      	movs	r0, #4
 8004c6e:	f7fe ffaf 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_B_Module4, nRF24_REG_RX_PW_P2, Payloadsize);                 //Set the Pipe2 Payload size
 8004c72:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004c76:	461a      	mov	r2, r3
 8004c78:	2113      	movs	r1, #19
 8004c7a:	2004      	movs	r0, #4
 8004c7c:	f7fe ffa8 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_B_Module4, nRF24_REG_RX_PW_P3, Payloadsize);                 //Set the Pipe3 Payload size
 8004c80:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004c84:	461a      	mov	r2, r3
 8004c86:	2114      	movs	r1, #20
 8004c88:	2004      	movs	r0, #4
 8004c8a:	f7fe ffa1 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_B_Module4, nRF24_REG_RX_PW_P4, Payloadsize);                 //Set the Pipe4 Payload size
 8004c8e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004c92:	461a      	mov	r2, r3
 8004c94:	2115      	movs	r1, #21
 8004c96:	2004      	movs	r0, #4
 8004c98:	f7fe ff9a 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_B_Module4, nRF24_REG_RX_PW_P5, Payloadsize);                 //Set the Pipe5 Payload size
 8004c9c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	2116      	movs	r1, #22
 8004ca4:	2004      	movs	r0, #4
 8004ca6:	f7fe ff93 	bl	8003bd0 <nRF24_WriteReg>
		break;
 8004caa:	e13f      	b.n	8004f2c <nRF24_Module_Setup+0xd14>
	case Sel_EL_Module:

		switch(mode)
 8004cac:	797b      	ldrb	r3, [r7, #5]
 8004cae:	2b05      	cmp	r3, #5
 8004cb0:	d86e      	bhi.n	8004d90 <nRF24_Module_Setup+0xb78>
 8004cb2:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <nRF24_Module_Setup+0xaa0>)
 8004cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb8:	08004cd1 	.word	0x08004cd1
 8004cbc:	08004cf1 	.word	0x08004cf1
 8004cc0:	08004d11 	.word	0x08004d11
 8004cc4:	08004d31 	.word	0x08004d31
 8004cc8:	08004d51 	.word	0x08004d51
 8004ccc:	08004d71 	.word	0x08004d71
		{
		case Receiver_Mode_AA:
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_CONFIG, 0x09);                      //PRIM_RX=1, PWR_UP=0, EN_CRC=1
 8004cd0:	2209      	movs	r2, #9
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	2005      	movs	r0, #5
 8004cd6:	f7fe ff7b 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_EN_AA, 0x3F);                       //Enable AA for all pipes
 8004cda:	223f      	movs	r2, #63	; 0x3f
 8004cdc:	2101      	movs	r1, #1
 8004cde:	2005      	movs	r0, #5
 8004ce0:	f7fe ff76 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_EN_RXADDR, 0x3F);                   //Enable RX addresses for all pipes
 8004ce4:	223f      	movs	r2, #63	; 0x3f
 8004ce6:	2102      	movs	r1, #2
 8004ce8:	2005      	movs	r0, #5
 8004cea:	f7fe ff71 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004cee:	e04f      	b.n	8004d90 <nRF24_Module_Setup+0xb78>
		case Receiver_Mode_noAA_CRC:
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_CONFIG, 0x09);                      //PRIM_RX=1, PWR_UP=0, EN_CRC=1
 8004cf0:	2209      	movs	r2, #9
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	2005      	movs	r0, #5
 8004cf6:	f7fe ff6b 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	2005      	movs	r0, #5
 8004d00:	f7fe ff66 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_EN_RXADDR, 0x3F);                   //Enable RX addresses for all pipes
 8004d04:	223f      	movs	r2, #63	; 0x3f
 8004d06:	2102      	movs	r1, #2
 8004d08:	2005      	movs	r0, #5
 8004d0a:	f7fe ff61 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004d0e:	e03f      	b.n	8004d90 <nRF24_Module_Setup+0xb78>
		case Receiver_Mode_noAA_noCRC:
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_CONFIG, 0x01);                      //PRIM_RX=1, PWR_UP=0, EN_CRC=0
 8004d10:	2201      	movs	r2, #1
 8004d12:	2100      	movs	r1, #0
 8004d14:	2005      	movs	r0, #5
 8004d16:	f7fe ff5b 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	2005      	movs	r0, #5
 8004d20:	f7fe ff56 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_EN_RXADDR, 0x3F);                   //Enable RX addresses for all pipes
 8004d24:	223f      	movs	r2, #63	; 0x3f
 8004d26:	2102      	movs	r1, #2
 8004d28:	2005      	movs	r0, #5
 8004d2a:	f7fe ff51 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004d2e:	e02f      	b.n	8004d90 <nRF24_Module_Setup+0xb78>
		case Transmitter_Mode_AA:
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_CONFIG, 0x08);                      //PRIM_RX=0, PWR_UP=0, EN_CRC=1
 8004d30:	2208      	movs	r2, #8
 8004d32:	2100      	movs	r1, #0
 8004d34:	2005      	movs	r0, #5
 8004d36:	f7fe ff4b 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_EN_AA, 0x3F);                       //Enable AA for all pipes
 8004d3a:	223f      	movs	r2, #63	; 0x3f
 8004d3c:	2101      	movs	r1, #1
 8004d3e:	2005      	movs	r0, #5
 8004d40:	f7fe ff46 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_EN_RXADDR, 0x01);                   //Enable RX addresses for pipe0
 8004d44:	2201      	movs	r2, #1
 8004d46:	2102      	movs	r1, #2
 8004d48:	2005      	movs	r0, #5
 8004d4a:	f7fe ff41 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004d4e:	e01f      	b.n	8004d90 <nRF24_Module_Setup+0xb78>
		case Transmitter_Mode_noAA_CRC:
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_CONFIG, 0x08);                      //PRIM_RX=0, PWR_UP=0, EN_CRC=1
 8004d50:	2208      	movs	r2, #8
 8004d52:	2100      	movs	r1, #0
 8004d54:	2005      	movs	r0, #5
 8004d56:	f7fe ff3b 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	2005      	movs	r0, #5
 8004d60:	f7fe ff36 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_EN_RXADDR, 0x01);                   //Enable RX addresses for pipe0
 8004d64:	2201      	movs	r2, #1
 8004d66:	2102      	movs	r1, #2
 8004d68:	2005      	movs	r0, #5
 8004d6a:	f7fe ff31 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004d6e:	e00f      	b.n	8004d90 <nRF24_Module_Setup+0xb78>
		case Transmitter_Mode_noAA_noCRC:
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_CONFIG, 0x00);                      //PRIM_RX=0, PWR_UP=0, EN_CRC=0
 8004d70:	2200      	movs	r2, #0
 8004d72:	2100      	movs	r1, #0
 8004d74:	2005      	movs	r0, #5
 8004d76:	f7fe ff2b 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_EN_AA, 0x00);                       //Disable AA for all pipes
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	2005      	movs	r0, #5
 8004d80:	f7fe ff26 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_EN_RXADDR, 0x01);                   //Enable RX addresses for pipe0
 8004d84:	2201      	movs	r2, #1
 8004d86:	2102      	movs	r1, #2
 8004d88:	2005      	movs	r0, #5
 8004d8a:	f7fe ff21 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004d8e:	bf00      	nop
		}
		nRF24_WriteReg(Sel_EL_Module, nRF24_REG_SETUP_AW, 0x03);                        //5 Bytes Length Address
 8004d90:	2203      	movs	r2, #3
 8004d92:	2103      	movs	r1, #3
 8004d94:	2005      	movs	r0, #5
 8004d96:	f7fe ff1b 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_EL_Module, nRF24_REG_SETUP_RETR, 0x8A);                      //ARD=2000us, ARC=10
 8004d9a:	228a      	movs	r2, #138	; 0x8a
 8004d9c:	2104      	movs	r1, #4
 8004d9e:	2005      	movs	r0, #5
 8004da0:	f7fe ff16 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_EL_Module, nRF24_REG_RF_CH, RF_Ch);                          //Set the Frequency Channel to 2
 8004da4:	793b      	ldrb	r3, [r7, #4]
 8004da6:	461a      	mov	r2, r3
 8004da8:	2105      	movs	r1, #5
 8004daa:	2005      	movs	r0, #5
 8004dac:	f7fe ff10 	bl	8003bd0 <nRF24_WriteReg>
		switch(RF_Setup)
 8004db0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004db4:	2b07      	cmp	r3, #7
 8004db6:	d843      	bhi.n	8004e40 <nRF24_Module_Setup+0xc28>
 8004db8:	a201      	add	r2, pc, #4	; (adr r2, 8004dc0 <nRF24_Module_Setup+0xba8>)
 8004dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dbe:	bf00      	nop
 8004dc0:	08004de1 	.word	0x08004de1
 8004dc4:	08004ded 	.word	0x08004ded
 8004dc8:	08004df9 	.word	0x08004df9
 8004dcc:	08004e05 	.word	0x08004e05
 8004dd0:	08004e11 	.word	0x08004e11
 8004dd4:	08004e1d 	.word	0x08004e1d
 8004dd8:	08004e29 	.word	0x08004e29
 8004ddc:	08004e35 	.word	0x08004e35
		{
		case MBPS1_Minus18dBm:
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_RF_SETUP, 0x01);                    //-18dBm, 1MBPS, LNA_HCURR=1
 8004de0:	2201      	movs	r2, #1
 8004de2:	2106      	movs	r1, #6
 8004de4:	2005      	movs	r0, #5
 8004de6:	f7fe fef3 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004dea:	e029      	b.n	8004e40 <nRF24_Module_Setup+0xc28>
		case MBPS1_Minus12dBm:
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_RF_SETUP, 0x03);                    //-12dBm, 1MBPS, LNA_HCURR=1
 8004dec:	2203      	movs	r2, #3
 8004dee:	2106      	movs	r1, #6
 8004df0:	2005      	movs	r0, #5
 8004df2:	f7fe feed 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004df6:	e023      	b.n	8004e40 <nRF24_Module_Setup+0xc28>
		case MBPS1_Minus6dBm:
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_RF_SETUP, 0x05);                    //-6dBm, 1MBPS, LNA_HCURR=1
 8004df8:	2205      	movs	r2, #5
 8004dfa:	2106      	movs	r1, #6
 8004dfc:	2005      	movs	r0, #5
 8004dfe:	f7fe fee7 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004e02:	e01d      	b.n	8004e40 <nRF24_Module_Setup+0xc28>
		case MBPS1_0dBm:
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_RF_SETUP, 0x07);                    //0dBm, 1MBPS, LNA_HCURR=1
 8004e04:	2207      	movs	r2, #7
 8004e06:	2106      	movs	r1, #6
 8004e08:	2005      	movs	r0, #5
 8004e0a:	f7fe fee1 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004e0e:	e017      	b.n	8004e40 <nRF24_Module_Setup+0xc28>
		case MBPS2_Minus18dBm:
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_RF_SETUP, 0x09);                    //-18dBm, 2MBPS, LNA_HCURR=1
 8004e10:	2209      	movs	r2, #9
 8004e12:	2106      	movs	r1, #6
 8004e14:	2005      	movs	r0, #5
 8004e16:	f7fe fedb 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004e1a:	e011      	b.n	8004e40 <nRF24_Module_Setup+0xc28>
		case MBPS2_Minus12dBm:
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_RF_SETUP, 0x0B);                    //-12dBm, 2MBPS, LNA_HCURR=1
 8004e1c:	220b      	movs	r2, #11
 8004e1e:	2106      	movs	r1, #6
 8004e20:	2005      	movs	r0, #5
 8004e22:	f7fe fed5 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004e26:	e00b      	b.n	8004e40 <nRF24_Module_Setup+0xc28>
		case MBPS2_Minus6dBm:
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_RF_SETUP, 0x0D);                    //-6dBm, 2MBPS, LNA_HCURR=1
 8004e28:	220d      	movs	r2, #13
 8004e2a:	2106      	movs	r1, #6
 8004e2c:	2005      	movs	r0, #5
 8004e2e:	f7fe fecf 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004e32:	e005      	b.n	8004e40 <nRF24_Module_Setup+0xc28>
		case MBPS2_0dBm:
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_RF_SETUP, 0x0F);                    //0dBm, 2MBPS, LNA_HCURR=1
 8004e34:	220f      	movs	r2, #15
 8004e36:	2106      	movs	r1, #6
 8004e38:	2005      	movs	r0, #5
 8004e3a:	f7fe fec9 	bl	8003bd0 <nRF24_WriteReg>
			break;
 8004e3e:	bf00      	nop
		}

		if((mode==Transmitter_Mode_AA)||(mode==Transmitter_Mode_noAA_CRC)||(mode==Transmitter_Mode_noAA_noCRC))
 8004e40:	797b      	ldrb	r3, [r7, #5]
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d005      	beq.n	8004e52 <nRF24_Module_Setup+0xc3a>
 8004e46:	797b      	ldrb	r3, [r7, #5]
 8004e48:	2b04      	cmp	r3, #4
 8004e4a:	d002      	beq.n	8004e52 <nRF24_Module_Setup+0xc3a>
 8004e4c:	797b      	ldrb	r3, [r7, #5]
 8004e4e:	2b05      	cmp	r3, #5
 8004e50:	d10c      	bne.n	8004e6c <nRF24_Module_Setup+0xc54>
		{
			nRF24_WriteMBReg(Sel_EL_Module, nRF24_REG_RX_ADDR_P0, Tx_Addr, 5);          //Set the Pipe0 address to {0x53, 0x52, 0x36, 0x34, 0x00}
 8004e52:	2305      	movs	r3, #5
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	210a      	movs	r1, #10
 8004e58:	2005      	movs	r0, #5
 8004e5a:	f7fe ff2f 	bl	8003cbc <nRF24_WriteMBReg>
			nRF24_WriteMBReg(Sel_EL_Module, nRF24_REG_TX_ADDR, Tx_Addr, 5);             //Set the TX address to {0x53, 0x52, 0x36, 0x34, 0x00}
 8004e5e:	2305      	movs	r3, #5
 8004e60:	683a      	ldr	r2, [r7, #0]
 8004e62:	2110      	movs	r1, #16
 8004e64:	2005      	movs	r0, #5
 8004e66:	f7fe ff29 	bl	8003cbc <nRF24_WriteMBReg>
 8004e6a:	e034      	b.n	8004ed6 <nRF24_Module_Setup+0xcbe>
		}
		else if((mode==Receiver_Mode_AA)||(mode==Receiver_Mode_noAA_CRC)||(mode==Receiver_Mode_noAA_noCRC))
 8004e6c:	797b      	ldrb	r3, [r7, #5]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d005      	beq.n	8004e7e <nRF24_Module_Setup+0xc66>
 8004e72:	797b      	ldrb	r3, [r7, #5]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d002      	beq.n	8004e7e <nRF24_Module_Setup+0xc66>
 8004e78:	797b      	ldrb	r3, [r7, #5]
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d12b      	bne.n	8004ed6 <nRF24_Module_Setup+0xcbe>
		{
			nRF24_WriteMBReg(Sel_EL_Module, nRF24_REG_RX_ADDR_P0, rx_addr_p0, 5);       //Set the Pipe0 address
 8004e7e:	f107 0214 	add.w	r2, r7, #20
 8004e82:	2305      	movs	r3, #5
 8004e84:	210a      	movs	r1, #10
 8004e86:	2005      	movs	r0, #5
 8004e88:	f7fe ff18 	bl	8003cbc <nRF24_WriteMBReg>
			nRF24_WriteMBReg(Sel_EL_Module, nRF24_REG_RX_ADDR_P1, rx_addr_p1, 5);       //Set the Pipe1 address
 8004e8c:	f107 020c 	add.w	r2, r7, #12
 8004e90:	2305      	movs	r3, #5
 8004e92:	210b      	movs	r1, #11
 8004e94:	2005      	movs	r0, #5
 8004e96:	f7fe ff11 	bl	8003cbc <nRF24_WriteMBReg>
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_RX_ADDR_P2, rx_addr_p2);            //Set the Pipe2 address
 8004e9a:	7ffb      	ldrb	r3, [r7, #31]
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	210c      	movs	r1, #12
 8004ea0:	2005      	movs	r0, #5
 8004ea2:	f7fe fe95 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_RX_ADDR_P3, rx_addr_p3);            //Set the Pipe3 address
 8004ea6:	7fbb      	ldrb	r3, [r7, #30]
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	210d      	movs	r1, #13
 8004eac:	2005      	movs	r0, #5
 8004eae:	f7fe fe8f 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_RX_ADDR_P4, rx_addr_p4);            //Set the Pipe4 address
 8004eb2:	7f7b      	ldrb	r3, [r7, #29]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	210e      	movs	r1, #14
 8004eb8:	2005      	movs	r0, #5
 8004eba:	f7fe fe89 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_RX_ADDR_P5, rx_addr_p5);            //Set the Pipe5 address
 8004ebe:	7f3b      	ldrb	r3, [r7, #28]
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	210f      	movs	r1, #15
 8004ec4:	2005      	movs	r0, #5
 8004ec6:	f7fe fe83 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_WriteMBReg(Sel_EL_Module, nRF24_REG_TX_ADDR, Tx_Addr, 5);             //Set the TX address
 8004eca:	2305      	movs	r3, #5
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	2110      	movs	r1, #16
 8004ed0:	2005      	movs	r0, #5
 8004ed2:	f7fe fef3 	bl	8003cbc <nRF24_WriteMBReg>
		}


		nRF24_WriteReg(Sel_EL_Module, nRF24_REG_RX_PW_P0, Payloadsize);                 //Set the Pipe0 Payload size
 8004ed6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004eda:	461a      	mov	r2, r3
 8004edc:	2111      	movs	r1, #17
 8004ede:	2005      	movs	r0, #5
 8004ee0:	f7fe fe76 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_EL_Module, nRF24_REG_RX_PW_P1, Payloadsize);                 //Set the Pipe1 Payload size
 8004ee4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004ee8:	461a      	mov	r2, r3
 8004eea:	2112      	movs	r1, #18
 8004eec:	2005      	movs	r0, #5
 8004eee:	f7fe fe6f 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_EL_Module, nRF24_REG_RX_PW_P2, Payloadsize);                 //Set the Pipe2 Payload size
 8004ef2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	2113      	movs	r1, #19
 8004efa:	2005      	movs	r0, #5
 8004efc:	f7fe fe68 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_EL_Module, nRF24_REG_RX_PW_P3, Payloadsize);                 //Set the Pipe3 Payload size
 8004f00:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004f04:	461a      	mov	r2, r3
 8004f06:	2114      	movs	r1, #20
 8004f08:	2005      	movs	r0, #5
 8004f0a:	f7fe fe61 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_EL_Module, nRF24_REG_RX_PW_P4, Payloadsize);                 //Set the Pipe4 Payload size
 8004f0e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004f12:	461a      	mov	r2, r3
 8004f14:	2115      	movs	r1, #21
 8004f16:	2005      	movs	r0, #5
 8004f18:	f7fe fe5a 	bl	8003bd0 <nRF24_WriteReg>
		nRF24_WriteReg(Sel_EL_Module, nRF24_REG_RX_PW_P5, Payloadsize);                 //Set the Pipe5 Payload size
 8004f1c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004f20:	461a      	mov	r2, r3
 8004f22:	2116      	movs	r1, #22
 8004f24:	2005      	movs	r0, #5
 8004f26:	f7fe fe53 	bl	8003bd0 <nRF24_WriteReg>
		break;
 8004f2a:	bf00      	nop
	}
}
 8004f2c:	bf00      	nop
 8004f2e:	3720      	adds	r7, #32
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <nRF24_Transmit>:



uint8_t nRF24_Transmit(uint16_t Sel_CSN_Pin, uint8_t *data, uint8_t Payload_Size)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	6039      	str	r1, [r7, #0]
 8004f3e:	80fb      	strh	r3, [r7, #6]
 8004f40:	4613      	mov	r3, r2
 8004f42:	717b      	strb	r3, [r7, #5]
	uint8_t cmdtosend = 0;
 8004f44:	2300      	movs	r3, #0
 8004f46:	737b      	strb	r3, [r7, #13]
	uint8_t Temp_Register;
    uint8_t Tr_Success = 0;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	73bb      	strb	r3, [r7, #14]

	switch(Sel_CSN_Pin)
 8004f4c:	88fb      	ldrh	r3, [r7, #6]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	2b04      	cmp	r3, #4
 8004f52:	f200 81d8 	bhi.w	8005306 <nRF24_Transmit+0x3d2>
 8004f56:	a201      	add	r2, pc, #4	; (adr r2, 8004f5c <nRF24_Transmit+0x28>)
 8004f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5c:	08004f71 	.word	0x08004f71
 8004f60:	08005023 	.word	0x08005023
 8004f64:	080050db 	.word	0x080050db
 8004f68:	0800518d 	.word	0x0800518d
 8004f6c:	08005255 	.word	0x08005255
	{
	case Sel_B_Module1:

		nRF24_CSN_Select(Sel_B_Module1);                                                   //Pull CSN pin low to select the module1 on SPI BUS
 8004f70:	2001      	movs	r0, #1
 8004f72:	f7fe fd31 	bl	80039d8 <nRF24_CSN_Select>

		cmdtosend = nRF24_CMD_W_TX_PAYLOAD;                                                //Payload transmit command
 8004f76:	23a0      	movs	r3, #160	; 0xa0
 8004f78:	737b      	strb	r3, [r7, #13]
		HAL_SPI_Transmit(&Button_hspi1, &cmdtosend, 1, 100);
 8004f7a:	f107 010d 	add.w	r1, r7, #13
 8004f7e:	2364      	movs	r3, #100	; 0x64
 8004f80:	2201      	movs	r2, #1
 8004f82:	48af      	ldr	r0, [pc, #700]	; (8005240 <nRF24_Transmit+0x30c>)
 8004f84:	f7fd fc47 	bl	8002816 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&Button_hspi1, data, Payload_Size, 100);
 8004f88:	797b      	ldrb	r3, [r7, #5]
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	2364      	movs	r3, #100	; 0x64
 8004f8e:	6839      	ldr	r1, [r7, #0]
 8004f90:	48ab      	ldr	r0, [pc, #684]	; (8005240 <nRF24_Transmit+0x30c>)
 8004f92:	f7fd fc40 	bl	8002816 <HAL_SPI_Transmit>

		nRF24_CE_Enable(Sel_B_Module1);                                                    //Enable the module1
 8004f96:	2001      	movs	r0, #1
 8004f98:	f7fe fd9a 	bl	8003ad0 <nRF24_CE_Enable>
		HAL_Delay(1);
 8004f9c:	2001      	movs	r0, #1
 8004f9e:	f7fc fc49 	bl	8001834 <HAL_Delay>
		nRF24_CE_Disable(Sel_B_Module1);
 8004fa2:	2001      	movs	r0, #1
 8004fa4:	f7fe fdd4 	bl	8003b50 <nRF24_CE_Disable>
		Temp_Register = nRF24_ReadReg(Sel_B_Module1, nRF24_REG_STATUS);             //Reading the STATUS register
 8004fa8:	2107      	movs	r1, #7
 8004faa:	2001      	movs	r0, #1
 8004fac:	f7fe ff24 	bl	8003df8 <nRF24_ReadReg>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	73fb      	strb	r3, [r7, #15]
		Temp_Register = nRF24_ReadReg(Sel_B_Module1, nRF24_REG_STATUS);             //Reading the STATUS register
 8004fb4:	2107      	movs	r1, #7
 8004fb6:	2001      	movs	r0, #1
 8004fb8:	f7fe ff1e 	bl	8003df8 <nRF24_ReadReg>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	73fb      	strb	r3, [r7, #15]
		if((Temp_Register & (1<<5)) != 0)                                  //check TX_EMPTY flag to be 1 along with Reserved pin to be 0
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
 8004fc2:	f003 0320 	and.w	r3, r3, #32
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d011      	beq.n	8004fee <nRF24_Transmit+0xba>
		{
			HAL_UART_Transmit(&huart2, (uint8_t *)"\nData Transmitted Successfully\n",31,100);
 8004fca:	2364      	movs	r3, #100	; 0x64
 8004fcc:	221f      	movs	r2, #31
 8004fce:	499d      	ldr	r1, [pc, #628]	; (8005244 <nRF24_Transmit+0x310>)
 8004fd0:	489d      	ldr	r0, [pc, #628]	; (8005248 <nRF24_Transmit+0x314>)
 8004fd2:	f7fe f98c 	bl	80032ee <HAL_UART_Transmit>
			//Remove the interrupt pin
			Temp_Register = Temp_Register | (1<<5);     //Write 1 to TX_DS to reset it
 8004fd6:	7bfb      	ldrb	r3, [r7, #15]
 8004fd8:	f043 0320 	orr.w	r3, r3, #32
 8004fdc:	73fb      	strb	r3, [r7, #15]
			nRF24_WriteReg(Sel_B_Module1, nRF24_REG_STATUS, Temp_Register);
 8004fde:	7bfb      	ldrb	r3, [r7, #15]
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	2107      	movs	r1, #7
 8004fe4:	2001      	movs	r0, #1
 8004fe6:	f7fe fdf3 	bl	8003bd0 <nRF24_WriteReg>

			Tr_Success = 1;
 8004fea:	2301      	movs	r3, #1
 8004fec:	73bb      	strb	r3, [r7, #14]
		}
		if((Temp_Register & (1<<4)) != 0)                                  //check TX_EMPTY flag to be 1 along with Reserved pin to be 0
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
 8004ff0:	f003 0310 	and.w	r3, r3, #16
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00f      	beq.n	8005018 <nRF24_Transmit+0xe4>
		{
			HAL_UART_Transmit(&huart2, (uint8_t *)"Maximum Retry Reached\n",22,100);
 8004ff8:	2364      	movs	r3, #100	; 0x64
 8004ffa:	2216      	movs	r2, #22
 8004ffc:	4993      	ldr	r1, [pc, #588]	; (800524c <nRF24_Transmit+0x318>)
 8004ffe:	4892      	ldr	r0, [pc, #584]	; (8005248 <nRF24_Transmit+0x314>)
 8005000:	f7fe f975 	bl	80032ee <HAL_UART_Transmit>
			//Remove the interrupt pin
			Temp_Register = Temp_Register | (1<<4);   //Write 1 to MAX_RT to reset it
 8005004:	7bfb      	ldrb	r3, [r7, #15]
 8005006:	f043 0310 	orr.w	r3, r3, #16
 800500a:	73fb      	strb	r3, [r7, #15]
			nRF24_WriteReg(Sel_B_Module1, nRF24_REG_STATUS, Temp_Register);
 800500c:	7bfb      	ldrb	r3, [r7, #15]
 800500e:	461a      	mov	r2, r3
 8005010:	2107      	movs	r1, #7
 8005012:	2001      	movs	r0, #1
 8005014:	f7fe fddc 	bl	8003bd0 <nRF24_WriteReg>
		}

		nRF24_CSN_UnSelect(Sel_B_Module1);
 8005018:	2001      	movs	r0, #1
 800501a:	f7fe fd1b 	bl	8003a54 <nRF24_CSN_UnSelect>
		return Tr_Success;
 800501e:	7bbb      	ldrb	r3, [r7, #14]
 8005020:	e172      	b.n	8005308 <nRF24_Transmit+0x3d4>

	case Sel_B_Module2:

		nRF24_CSN_Select(Sel_B_Module2);                                                   //Pull CSN pin low to select the module1 on SPI BUS
 8005022:	2002      	movs	r0, #2
 8005024:	f7fe fcd8 	bl	80039d8 <nRF24_CSN_Select>

		cmdtosend = nRF24_CMD_W_TX_PAYLOAD;                                                //Payload transmit command
 8005028:	23a0      	movs	r3, #160	; 0xa0
 800502a:	737b      	strb	r3, [r7, #13]
		HAL_SPI_Transmit(&Button_hspi1, &cmdtosend, 1, 100);
 800502c:	f107 010d 	add.w	r1, r7, #13
 8005030:	2364      	movs	r3, #100	; 0x64
 8005032:	2201      	movs	r2, #1
 8005034:	4882      	ldr	r0, [pc, #520]	; (8005240 <nRF24_Transmit+0x30c>)
 8005036:	f7fd fbee 	bl	8002816 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&Button_hspi1, data, Payload_Size, 100);
 800503a:	797b      	ldrb	r3, [r7, #5]
 800503c:	b29a      	uxth	r2, r3
 800503e:	2364      	movs	r3, #100	; 0x64
 8005040:	6839      	ldr	r1, [r7, #0]
 8005042:	487f      	ldr	r0, [pc, #508]	; (8005240 <nRF24_Transmit+0x30c>)
 8005044:	f7fd fbe7 	bl	8002816 <HAL_SPI_Transmit>

		nRF24_CE_Enable(Sel_B_Module2);                                                    //Enable the module1
 8005048:	2002      	movs	r0, #2
 800504a:	f7fe fd41 	bl	8003ad0 <nRF24_CE_Enable>
		HAL_Delay(1);
 800504e:	2001      	movs	r0, #1
 8005050:	f7fc fbf0 	bl	8001834 <HAL_Delay>
		nRF24_CE_Disable(Sel_B_Module2);
 8005054:	2002      	movs	r0, #2
 8005056:	f7fe fd7b 	bl	8003b50 <nRF24_CE_Disable>
		HAL_Delay(1);
 800505a:	2001      	movs	r0, #1
 800505c:	f7fc fbea 	bl	8001834 <HAL_Delay>
		Temp_Register = nRF24_ReadReg(Sel_B_Module2, nRF24_REG_STATUS);             //Reading the STATUS register
 8005060:	2107      	movs	r1, #7
 8005062:	2002      	movs	r0, #2
 8005064:	f7fe fec8 	bl	8003df8 <nRF24_ReadReg>
 8005068:	4603      	mov	r3, r0
 800506a:	73fb      	strb	r3, [r7, #15]
		Temp_Register = nRF24_ReadReg(Sel_B_Module2, nRF24_REG_STATUS);             //Reading the STATUS register
 800506c:	2107      	movs	r1, #7
 800506e:	2002      	movs	r0, #2
 8005070:	f7fe fec2 	bl	8003df8 <nRF24_ReadReg>
 8005074:	4603      	mov	r3, r0
 8005076:	73fb      	strb	r3, [r7, #15]
		if((Temp_Register & (1<<5)) != 0)                                  //check TX_EMPTY flag to be 1 along with Reserved pin to be 0
 8005078:	7bfb      	ldrb	r3, [r7, #15]
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b00      	cmp	r3, #0
 8005080:	d011      	beq.n	80050a6 <nRF24_Transmit+0x172>
		{
			HAL_UART_Transmit(&huart2, (uint8_t *)"Data Transmitted Successfully\n",30,100);
 8005082:	2364      	movs	r3, #100	; 0x64
 8005084:	221e      	movs	r2, #30
 8005086:	4972      	ldr	r1, [pc, #456]	; (8005250 <nRF24_Transmit+0x31c>)
 8005088:	486f      	ldr	r0, [pc, #444]	; (8005248 <nRF24_Transmit+0x314>)
 800508a:	f7fe f930 	bl	80032ee <HAL_UART_Transmit>
			//Remove the interrupt pin
			Temp_Register = Temp_Register | (1<<5);     //Write 1 to TX_DS to reset it
 800508e:	7bfb      	ldrb	r3, [r7, #15]
 8005090:	f043 0320 	orr.w	r3, r3, #32
 8005094:	73fb      	strb	r3, [r7, #15]
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_STATUS, Temp_Register);
 8005096:	7bfb      	ldrb	r3, [r7, #15]
 8005098:	461a      	mov	r2, r3
 800509a:	2107      	movs	r1, #7
 800509c:	2002      	movs	r0, #2
 800509e:	f7fe fd97 	bl	8003bd0 <nRF24_WriteReg>

			Tr_Success = 1;
 80050a2:	2301      	movs	r3, #1
 80050a4:	73bb      	strb	r3, [r7, #14]
			}
		if((Temp_Register & (1<<4)) != 0)                                  //check TX_EMPTY flag to be 1 along with Reserved pin to be 0
 80050a6:	7bfb      	ldrb	r3, [r7, #15]
 80050a8:	f003 0310 	and.w	r3, r3, #16
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00f      	beq.n	80050d0 <nRF24_Transmit+0x19c>
		{
		    HAL_UART_Transmit(&huart2, (uint8_t *)"Maximum Retry Reached\n",22,100);
 80050b0:	2364      	movs	r3, #100	; 0x64
 80050b2:	2216      	movs	r2, #22
 80050b4:	4965      	ldr	r1, [pc, #404]	; (800524c <nRF24_Transmit+0x318>)
 80050b6:	4864      	ldr	r0, [pc, #400]	; (8005248 <nRF24_Transmit+0x314>)
 80050b8:	f7fe f919 	bl	80032ee <HAL_UART_Transmit>

			//Remove the interrupt pin
			Temp_Register = Temp_Register | (1<<4);   //Write 1 to MAX_RT to reset it
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
 80050be:	f043 0310 	orr.w	r3, r3, #16
 80050c2:	73fb      	strb	r3, [r7, #15]
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_STATUS, Temp_Register);
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	461a      	mov	r2, r3
 80050c8:	2107      	movs	r1, #7
 80050ca:	2002      	movs	r0, #2
 80050cc:	f7fe fd80 	bl	8003bd0 <nRF24_WriteReg>
		}

		nRF24_CSN_UnSelect(Sel_B_Module2);
 80050d0:	2002      	movs	r0, #2
 80050d2:	f7fe fcbf 	bl	8003a54 <nRF24_CSN_UnSelect>
		return Tr_Success;
 80050d6:	7bbb      	ldrb	r3, [r7, #14]
 80050d8:	e116      	b.n	8005308 <nRF24_Transmit+0x3d4>

	case Sel_B_Module3:

		nRF24_CSN_Select(Sel_B_Module3);                                                   //Pull CSN pin low to select the module1 on SPI BUS
 80050da:	2003      	movs	r0, #3
 80050dc:	f7fe fc7c 	bl	80039d8 <nRF24_CSN_Select>

		cmdtosend = nRF24_CMD_W_TX_PAYLOAD;                                                //Payload transmit command
 80050e0:	23a0      	movs	r3, #160	; 0xa0
 80050e2:	737b      	strb	r3, [r7, #13]
		HAL_SPI_Transmit(&Button_hspi1, &cmdtosend, 1, 100);
 80050e4:	f107 010d 	add.w	r1, r7, #13
 80050e8:	2364      	movs	r3, #100	; 0x64
 80050ea:	2201      	movs	r2, #1
 80050ec:	4854      	ldr	r0, [pc, #336]	; (8005240 <nRF24_Transmit+0x30c>)
 80050ee:	f7fd fb92 	bl	8002816 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&Button_hspi1, data, Payload_Size, 100);
 80050f2:	797b      	ldrb	r3, [r7, #5]
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	2364      	movs	r3, #100	; 0x64
 80050f8:	6839      	ldr	r1, [r7, #0]
 80050fa:	4851      	ldr	r0, [pc, #324]	; (8005240 <nRF24_Transmit+0x30c>)
 80050fc:	f7fd fb8b 	bl	8002816 <HAL_SPI_Transmit>

		nRF24_CE_Enable(Sel_B_Module3);                                                    //Enable the module1
 8005100:	2003      	movs	r0, #3
 8005102:	f7fe fce5 	bl	8003ad0 <nRF24_CE_Enable>
		HAL_Delay(1);
 8005106:	2001      	movs	r0, #1
 8005108:	f7fc fb94 	bl	8001834 <HAL_Delay>
		nRF24_CE_Disable(Sel_B_Module3);
 800510c:	2003      	movs	r0, #3
 800510e:	f7fe fd1f 	bl	8003b50 <nRF24_CE_Disable>

		Temp_Register = nRF24_ReadReg(Sel_B_Module3, nRF24_REG_STATUS);             //Reading the STATUS register
 8005112:	2107      	movs	r1, #7
 8005114:	2003      	movs	r0, #3
 8005116:	f7fe fe6f 	bl	8003df8 <nRF24_ReadReg>
 800511a:	4603      	mov	r3, r0
 800511c:	73fb      	strb	r3, [r7, #15]
		Temp_Register = nRF24_ReadReg(Sel_B_Module3, nRF24_REG_STATUS);             //Reading the STATUS register
 800511e:	2107      	movs	r1, #7
 8005120:	2003      	movs	r0, #3
 8005122:	f7fe fe69 	bl	8003df8 <nRF24_ReadReg>
 8005126:	4603      	mov	r3, r0
 8005128:	73fb      	strb	r3, [r7, #15]
		if((Temp_Register & (1<<5)) != 0)                                  //check TX_EMPTY flag to be 1 along with Reserved pin to be 0
 800512a:	7bfb      	ldrb	r3, [r7, #15]
 800512c:	f003 0320 	and.w	r3, r3, #32
 8005130:	2b00      	cmp	r3, #0
 8005132:	d011      	beq.n	8005158 <nRF24_Transmit+0x224>
		{
			HAL_UART_Transmit(&huart2, (uint8_t *)"Data Transmitted Successfully\n",30,100);
 8005134:	2364      	movs	r3, #100	; 0x64
 8005136:	221e      	movs	r2, #30
 8005138:	4945      	ldr	r1, [pc, #276]	; (8005250 <nRF24_Transmit+0x31c>)
 800513a:	4843      	ldr	r0, [pc, #268]	; (8005248 <nRF24_Transmit+0x314>)
 800513c:	f7fe f8d7 	bl	80032ee <HAL_UART_Transmit>
			//Remove the interrupt pin
			Temp_Register = Temp_Register | (1<<5);     //Write 1 to TX_DS to reset it
 8005140:	7bfb      	ldrb	r3, [r7, #15]
 8005142:	f043 0320 	orr.w	r3, r3, #32
 8005146:	73fb      	strb	r3, [r7, #15]
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_STATUS, Temp_Register);
 8005148:	7bfb      	ldrb	r3, [r7, #15]
 800514a:	461a      	mov	r2, r3
 800514c:	2107      	movs	r1, #7
 800514e:	2003      	movs	r0, #3
 8005150:	f7fe fd3e 	bl	8003bd0 <nRF24_WriteReg>
			Tr_Success = 1;
 8005154:	2301      	movs	r3, #1
 8005156:	73bb      	strb	r3, [r7, #14]
			}
		if((Temp_Register & (1<<4)) != 0)                                  //check TX_EMPTY flag to be 1 along with Reserved pin to be 0
 8005158:	7bfb      	ldrb	r3, [r7, #15]
 800515a:	f003 0310 	and.w	r3, r3, #16
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00f      	beq.n	8005182 <nRF24_Transmit+0x24e>
		{
			HAL_UART_Transmit(&huart2, (uint8_t *)"Maximum Retry Reached\n",22,100);
 8005162:	2364      	movs	r3, #100	; 0x64
 8005164:	2216      	movs	r2, #22
 8005166:	4939      	ldr	r1, [pc, #228]	; (800524c <nRF24_Transmit+0x318>)
 8005168:	4837      	ldr	r0, [pc, #220]	; (8005248 <nRF24_Transmit+0x314>)
 800516a:	f7fe f8c0 	bl	80032ee <HAL_UART_Transmit>
			//Remove the interrupt pin
			Temp_Register = Temp_Register | (1<<4);   //Write 1 to MAX_RT to reset it
 800516e:	7bfb      	ldrb	r3, [r7, #15]
 8005170:	f043 0310 	orr.w	r3, r3, #16
 8005174:	73fb      	strb	r3, [r7, #15]
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_STATUS, Temp_Register);
 8005176:	7bfb      	ldrb	r3, [r7, #15]
 8005178:	461a      	mov	r2, r3
 800517a:	2107      	movs	r1, #7
 800517c:	2003      	movs	r0, #3
 800517e:	f7fe fd27 	bl	8003bd0 <nRF24_WriteReg>
		}

		nRF24_CSN_UnSelect(Sel_B_Module3);
 8005182:	2003      	movs	r0, #3
 8005184:	f7fe fc66 	bl	8003a54 <nRF24_CSN_UnSelect>
		return Tr_Success;
 8005188:	7bbb      	ldrb	r3, [r7, #14]
 800518a:	e0bd      	b.n	8005308 <nRF24_Transmit+0x3d4>

	case Sel_B_Module4:

		nRF24_CSN_Select(Sel_B_Module4);                                                   //Pull CSN pin low to select the module1 on SPI BUS
 800518c:	2004      	movs	r0, #4
 800518e:	f7fe fc23 	bl	80039d8 <nRF24_CSN_Select>

		cmdtosend = nRF24_CMD_W_TX_PAYLOAD;                                                //Payload transmit command
 8005192:	23a0      	movs	r3, #160	; 0xa0
 8005194:	737b      	strb	r3, [r7, #13]
		HAL_SPI_Transmit(&Button_hspi1, &cmdtosend, 1, 100);
 8005196:	f107 010d 	add.w	r1, r7, #13
 800519a:	2364      	movs	r3, #100	; 0x64
 800519c:	2201      	movs	r2, #1
 800519e:	4828      	ldr	r0, [pc, #160]	; (8005240 <nRF24_Transmit+0x30c>)
 80051a0:	f7fd fb39 	bl	8002816 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&Button_hspi1, data, Payload_Size, 100);
 80051a4:	797b      	ldrb	r3, [r7, #5]
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	2364      	movs	r3, #100	; 0x64
 80051aa:	6839      	ldr	r1, [r7, #0]
 80051ac:	4824      	ldr	r0, [pc, #144]	; (8005240 <nRF24_Transmit+0x30c>)
 80051ae:	f7fd fb32 	bl	8002816 <HAL_SPI_Transmit>

		nRF24_CE_Enable(Sel_B_Module4);                                                    //Enable the module1
 80051b2:	2004      	movs	r0, #4
 80051b4:	f7fe fc8c 	bl	8003ad0 <nRF24_CE_Enable>
		HAL_Delay(1);
 80051b8:	2001      	movs	r0, #1
 80051ba:	f7fc fb3b 	bl	8001834 <HAL_Delay>
		nRF24_CE_Disable(Sel_B_Module4);
 80051be:	2004      	movs	r0, #4
 80051c0:	f7fe fcc6 	bl	8003b50 <nRF24_CE_Disable>

		Temp_Register = nRF24_ReadReg(Sel_B_Module4, nRF24_REG_STATUS);             //Reading the STATUS register
 80051c4:	2107      	movs	r1, #7
 80051c6:	2004      	movs	r0, #4
 80051c8:	f7fe fe16 	bl	8003df8 <nRF24_ReadReg>
 80051cc:	4603      	mov	r3, r0
 80051ce:	73fb      	strb	r3, [r7, #15]
		Temp_Register = nRF24_ReadReg(Sel_B_Module4, nRF24_REG_STATUS);             //Reading the STATUS register
 80051d0:	2107      	movs	r1, #7
 80051d2:	2004      	movs	r0, #4
 80051d4:	f7fe fe10 	bl	8003df8 <nRF24_ReadReg>
 80051d8:	4603      	mov	r3, r0
 80051da:	73fb      	strb	r3, [r7, #15]
		if((Temp_Register & (1<<5)) != 0)                                  //check TX_EMPTY flag to be 1 along with Reserved pin to be 0
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
 80051de:	f003 0320 	and.w	r3, r3, #32
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d011      	beq.n	800520a <nRF24_Transmit+0x2d6>
		{
			HAL_UART_Transmit(&huart2, (uint8_t *)"Data Transmitted Successfully\n",30,100);
 80051e6:	2364      	movs	r3, #100	; 0x64
 80051e8:	221e      	movs	r2, #30
 80051ea:	4919      	ldr	r1, [pc, #100]	; (8005250 <nRF24_Transmit+0x31c>)
 80051ec:	4816      	ldr	r0, [pc, #88]	; (8005248 <nRF24_Transmit+0x314>)
 80051ee:	f7fe f87e 	bl	80032ee <HAL_UART_Transmit>
			//Remove the interrupt pin
			Temp_Register = Temp_Register | (1<<5);     //Write 1 to TX_DS to reset it
 80051f2:	7bfb      	ldrb	r3, [r7, #15]
 80051f4:	f043 0320 	orr.w	r3, r3, #32
 80051f8:	73fb      	strb	r3, [r7, #15]
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_STATUS, Temp_Register);
 80051fa:	7bfb      	ldrb	r3, [r7, #15]
 80051fc:	461a      	mov	r2, r3
 80051fe:	2107      	movs	r1, #7
 8005200:	2004      	movs	r0, #4
 8005202:	f7fe fce5 	bl	8003bd0 <nRF24_WriteReg>
			Tr_Success = 1;
 8005206:	2301      	movs	r3, #1
 8005208:	73bb      	strb	r3, [r7, #14]

		}
		if((Temp_Register & (1<<4)) != 0)                                  //check TX_EMPTY flag to be 1 along with Reserved pin to be 0
 800520a:	7bfb      	ldrb	r3, [r7, #15]
 800520c:	f003 0310 	and.w	r3, r3, #16
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00f      	beq.n	8005234 <nRF24_Transmit+0x300>
		{
			HAL_UART_Transmit(&huart2, (uint8_t *)"Maximum Retry Reached\n",22,100);
 8005214:	2364      	movs	r3, #100	; 0x64
 8005216:	2216      	movs	r2, #22
 8005218:	490c      	ldr	r1, [pc, #48]	; (800524c <nRF24_Transmit+0x318>)
 800521a:	480b      	ldr	r0, [pc, #44]	; (8005248 <nRF24_Transmit+0x314>)
 800521c:	f7fe f867 	bl	80032ee <HAL_UART_Transmit>
			//Remove the interrupt pin
			Temp_Register = Temp_Register | (1<<4);   //Write 1 to MAX_RT to reset it
 8005220:	7bfb      	ldrb	r3, [r7, #15]
 8005222:	f043 0310 	orr.w	r3, r3, #16
 8005226:	73fb      	strb	r3, [r7, #15]
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_STATUS, Temp_Register);
 8005228:	7bfb      	ldrb	r3, [r7, #15]
 800522a:	461a      	mov	r2, r3
 800522c:	2107      	movs	r1, #7
 800522e:	2004      	movs	r0, #4
 8005230:	f7fe fcce 	bl	8003bd0 <nRF24_WriteReg>
		}

		nRF24_CSN_UnSelect(Sel_B_Module4);
 8005234:	2004      	movs	r0, #4
 8005236:	f7fe fc0d 	bl	8003a54 <nRF24_CSN_UnSelect>
		return Tr_Success;
 800523a:	7bbb      	ldrb	r3, [r7, #14]
 800523c:	e064      	b.n	8005308 <nRF24_Transmit+0x3d4>
 800523e:	bf00      	nop
 8005240:	200000e0 	.word	0x200000e0
 8005244:	08007234 	.word	0x08007234
 8005248:	200001e8 	.word	0x200001e8
 800524c:	08007254 	.word	0x08007254
 8005250:	0800726c 	.word	0x0800726c

	case Sel_EL_Module:

		nRF24_CSN_Select(Sel_EL_Module);                                                   //Pull CSN pin low to select the module1 on SPI BUS
 8005254:	2005      	movs	r0, #5
 8005256:	f7fe fbbf 	bl	80039d8 <nRF24_CSN_Select>

		cmdtosend = nRF24_CMD_W_TX_PAYLOAD;                                                //Payload transmit command
 800525a:	23a0      	movs	r3, #160	; 0xa0
 800525c:	737b      	strb	r3, [r7, #13]
		HAL_SPI_Transmit(&EL_hspi2, &cmdtosend, 1, 100);
 800525e:	f107 010d 	add.w	r1, r7, #13
 8005262:	2364      	movs	r3, #100	; 0x64
 8005264:	2201      	movs	r2, #1
 8005266:	482a      	ldr	r0, [pc, #168]	; (8005310 <nRF24_Transmit+0x3dc>)
 8005268:	f7fd fad5 	bl	8002816 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&EL_hspi2, data, Payload_Size, 100);
 800526c:	797b      	ldrb	r3, [r7, #5]
 800526e:	b29a      	uxth	r2, r3
 8005270:	2364      	movs	r3, #100	; 0x64
 8005272:	6839      	ldr	r1, [r7, #0]
 8005274:	4826      	ldr	r0, [pc, #152]	; (8005310 <nRF24_Transmit+0x3dc>)
 8005276:	f7fd face 	bl	8002816 <HAL_SPI_Transmit>

		nRF24_CE_Enable(Sel_EL_Module);                                                    //Enable the module1
 800527a:	2005      	movs	r0, #5
 800527c:	f7fe fc28 	bl	8003ad0 <nRF24_CE_Enable>
		HAL_Delay(1);
 8005280:	2001      	movs	r0, #1
 8005282:	f7fc fad7 	bl	8001834 <HAL_Delay>
		nRF24_CE_Disable(Sel_EL_Module);
 8005286:	2005      	movs	r0, #5
 8005288:	f7fe fc62 	bl	8003b50 <nRF24_CE_Disable>

		Temp_Register = nRF24_ReadReg(Sel_EL_Module, nRF24_REG_STATUS);             //Reading the STATUS register
 800528c:	2107      	movs	r1, #7
 800528e:	2005      	movs	r0, #5
 8005290:	f7fe fdb2 	bl	8003df8 <nRF24_ReadReg>
 8005294:	4603      	mov	r3, r0
 8005296:	73fb      	strb	r3, [r7, #15]
		Temp_Register = nRF24_ReadReg(Sel_EL_Module, nRF24_REG_STATUS);             //Reading the STATUS register
 8005298:	2107      	movs	r1, #7
 800529a:	2005      	movs	r0, #5
 800529c:	f7fe fdac 	bl	8003df8 <nRF24_ReadReg>
 80052a0:	4603      	mov	r3, r0
 80052a2:	73fb      	strb	r3, [r7, #15]
		if((Temp_Register & (1<<5)) != 0)                                  //check TX_EMPTY flag to be 1 along with Reserved pin to be 0
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
 80052a6:	f003 0320 	and.w	r3, r3, #32
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d011      	beq.n	80052d2 <nRF24_Transmit+0x39e>
		{
			HAL_UART_Transmit(&huart2, (uint8_t *)"Data Transmitted Successfully\n",30,100);
 80052ae:	2364      	movs	r3, #100	; 0x64
 80052b0:	221e      	movs	r2, #30
 80052b2:	4918      	ldr	r1, [pc, #96]	; (8005314 <nRF24_Transmit+0x3e0>)
 80052b4:	4818      	ldr	r0, [pc, #96]	; (8005318 <nRF24_Transmit+0x3e4>)
 80052b6:	f7fe f81a 	bl	80032ee <HAL_UART_Transmit>
			//Remove the interrupt pin
			Temp_Register = Temp_Register | (1<<5);     //Write 1 to TX_DS to reset it
 80052ba:	7bfb      	ldrb	r3, [r7, #15]
 80052bc:	f043 0320 	orr.w	r3, r3, #32
 80052c0:	73fb      	strb	r3, [r7, #15]
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_STATUS, Temp_Register);
 80052c2:	7bfb      	ldrb	r3, [r7, #15]
 80052c4:	461a      	mov	r2, r3
 80052c6:	2107      	movs	r1, #7
 80052c8:	2005      	movs	r0, #5
 80052ca:	f7fe fc81 	bl	8003bd0 <nRF24_WriteReg>
			Tr_Success = 1;
 80052ce:	2301      	movs	r3, #1
 80052d0:	73bb      	strb	r3, [r7, #14]
			}
		if((Temp_Register & (1<<4)) != 0)                                  //check TX_EMPTY flag to be 1 along with Reserved pin to be 0
 80052d2:	7bfb      	ldrb	r3, [r7, #15]
 80052d4:	f003 0310 	and.w	r3, r3, #16
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00f      	beq.n	80052fc <nRF24_Transmit+0x3c8>
		{
			HAL_UART_Transmit(&huart2, (uint8_t *)"Maximum Retry Reached\n",22,100);
 80052dc:	2364      	movs	r3, #100	; 0x64
 80052de:	2216      	movs	r2, #22
 80052e0:	490e      	ldr	r1, [pc, #56]	; (800531c <nRF24_Transmit+0x3e8>)
 80052e2:	480d      	ldr	r0, [pc, #52]	; (8005318 <nRF24_Transmit+0x3e4>)
 80052e4:	f7fe f803 	bl	80032ee <HAL_UART_Transmit>
			//Remove the interrupt pin
			Temp_Register = Temp_Register | (1<<4);   //Write 1 to MAX_RT to reset it
 80052e8:	7bfb      	ldrb	r3, [r7, #15]
 80052ea:	f043 0310 	orr.w	r3, r3, #16
 80052ee:	73fb      	strb	r3, [r7, #15]
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_STATUS, Temp_Register);
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
 80052f2:	461a      	mov	r2, r3
 80052f4:	2107      	movs	r1, #7
 80052f6:	2005      	movs	r0, #5
 80052f8:	f7fe fc6a 	bl	8003bd0 <nRF24_WriteReg>
		}

		nRF24_CSN_UnSelect(Sel_EL_Module);
 80052fc:	2005      	movs	r0, #5
 80052fe:	f7fe fba9 	bl	8003a54 <nRF24_CSN_UnSelect>
		return Tr_Success;
 8005302:	7bbb      	ldrb	r3, [r7, #14]
 8005304:	e000      	b.n	8005308 <nRF24_Transmit+0x3d4>

	default:
		return 0;
 8005306:	2300      	movs	r3, #0
	}

}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	20000138 	.word	0x20000138
 8005314:	0800726c 	.word	0x0800726c
 8005318:	200001e8 	.word	0x200001e8
 800531c:	08007254 	.word	0x08007254

08005320 <isDataAvailable>:

uint8_t isDataAvailable(uint16_t Sel_CSN_Pin)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	4603      	mov	r3, r0
 8005328:	80fb      	strh	r3, [r7, #6]
	uint8_t STATUS_Register = 0;
 800532a:	2300      	movs	r3, #0
 800532c:	73fb      	strb	r3, [r7, #15]
	uint8_t Receiving_Pipe = 255;
 800532e:	23ff      	movs	r3, #255	; 0xff
 8005330:	73bb      	strb	r3, [r7, #14]
	uint8_t debug[3];

	switch(Sel_CSN_Pin)
 8005332:	88fb      	ldrh	r3, [r7, #6]
 8005334:	3b01      	subs	r3, #1
 8005336:	2b04      	cmp	r3, #4
 8005338:	f200 80de 	bhi.w	80054f8 <isDataAvailable+0x1d8>
 800533c:	a201      	add	r2, pc, #4	; (adr r2, 8005344 <isDataAvailable+0x24>)
 800533e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005342:	bf00      	nop
 8005344:	08005359 	.word	0x08005359
 8005348:	080053ab 	.word	0x080053ab
 800534c:	080053fd 	.word	0x080053fd
 8005350:	0800544f 	.word	0x0800544f
 8005354:	080054a7 	.word	0x080054a7
	{
	case Sel_B_Module1:

		nRF24_CSN_Select(Sel_B_Module1);                                       //Pull CSN pin low to select the module1 on SPI BUS
 8005358:	2001      	movs	r0, #1
 800535a:	f7fe fb3d 	bl	80039d8 <nRF24_CSN_Select>

		STATUS_Register = nRF24_ReadReg(Sel_B_Module1, nRF24_REG_STATUS);               //Reading the status register
 800535e:	2107      	movs	r1, #7
 8005360:	2001      	movs	r0, #1
 8005362:	f7fe fd49 	bl	8003df8 <nRF24_ReadReg>
 8005366:	4603      	mov	r3, r0
 8005368:	73fb      	strb	r3, [r7, #15]
		Receiving_Pipe = STATUS_Register & 0x0E;                                //Reading the bits 1,2 and 3 of the status for Pipe number
 800536a:	7bfb      	ldrb	r3, [r7, #15]
 800536c:	f003 030e 	and.w	r3, r3, #14
 8005370:	73bb      	strb	r3, [r7, #14]
		Receiving_Pipe = Receiving_Pipe >> 1;                                  //Shift the bits to right to derive the pipe number
 8005372:	7bbb      	ldrb	r3, [r7, #14]
 8005374:	085b      	lsrs	r3, r3, #1
 8005376:	73bb      	strb	r3, [r7, #14]
        if((STATUS_Register & (1<<6)) != 0)
 8005378:	7bfb      	ldrb	r3, [r7, #15]
 800537a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00e      	beq.n	80053a0 <isDataAvailable+0x80>
		{
        	STATUS_Register = STATUS_Register | (1<<6);
 8005382:	7bfb      	ldrb	r3, [r7, #15]
 8005384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005388:	73fb      	strb	r3, [r7, #15]
        	nRF24_WriteReg(Sel_B_Module1, nRF24_REG_STATUS, STATUS_Register);           //Writing 1 to RX_DR to clear bit
 800538a:	7bfb      	ldrb	r3, [r7, #15]
 800538c:	461a      	mov	r2, r3
 800538e:	2107      	movs	r1, #7
 8005390:	2001      	movs	r0, #1
 8005392:	f7fe fc1d 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_CSN_UnSelect(Sel_B_Module1);                                 //Release the CSN pin to unselect the module1 on SPI BUS
 8005396:	2001      	movs	r0, #1
 8005398:	f7fe fb5c 	bl	8003a54 <nRF24_CSN_UnSelect>
			return Receiving_Pipe;
 800539c:	7bbb      	ldrb	r3, [r7, #14]
 800539e:	e0ac      	b.n	80054fa <isDataAvailable+0x1da>
		}

        nRF24_CSN_UnSelect(Sel_B_Module1);                                     //Release the CSN pin to unselect the module1 on SPI BUS
 80053a0:	2001      	movs	r0, #1
 80053a2:	f7fe fb57 	bl	8003a54 <nRF24_CSN_UnSelect>
        return 255;
 80053a6:	23ff      	movs	r3, #255	; 0xff
 80053a8:	e0a7      	b.n	80054fa <isDataAvailable+0x1da>

	case Sel_B_Module2:

		nRF24_CSN_Select(Sel_B_Module2);                                       //Pull CSN pin low to select the module1 on SPI BUS
 80053aa:	2002      	movs	r0, #2
 80053ac:	f7fe fb14 	bl	80039d8 <nRF24_CSN_Select>

		STATUS_Register = nRF24_ReadReg(Sel_B_Module2, nRF24_REG_STATUS);               //Reading the status register
 80053b0:	2107      	movs	r1, #7
 80053b2:	2002      	movs	r0, #2
 80053b4:	f7fe fd20 	bl	8003df8 <nRF24_ReadReg>
 80053b8:	4603      	mov	r3, r0
 80053ba:	73fb      	strb	r3, [r7, #15]
		Receiving_Pipe = STATUS_Register & 0x0E;                                //Reading the bits 1,2 and 3 of the status for Pipe number
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
 80053be:	f003 030e 	and.w	r3, r3, #14
 80053c2:	73bb      	strb	r3, [r7, #14]
		Receiving_Pipe = Receiving_Pipe >> 1;                                  //Shift the bits to right to derive the pipe number
 80053c4:	7bbb      	ldrb	r3, [r7, #14]
 80053c6:	085b      	lsrs	r3, r3, #1
 80053c8:	73bb      	strb	r3, [r7, #14]
        if((STATUS_Register & (1<<6)) != 0)
 80053ca:	7bfb      	ldrb	r3, [r7, #15]
 80053cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00e      	beq.n	80053f2 <isDataAvailable+0xd2>
		{
        	STATUS_Register = STATUS_Register | (1<<6);
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
 80053d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053da:	73fb      	strb	r3, [r7, #15]
        	nRF24_WriteReg(Sel_B_Module2, nRF24_REG_STATUS, STATUS_Register);           //Writing 1 to RX_DR to clear bit
 80053dc:	7bfb      	ldrb	r3, [r7, #15]
 80053de:	461a      	mov	r2, r3
 80053e0:	2107      	movs	r1, #7
 80053e2:	2002      	movs	r0, #2
 80053e4:	f7fe fbf4 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_CSN_UnSelect(Sel_B_Module2);                                 //Release the CSN pin to unselect the module1 on SPI BUS
 80053e8:	2002      	movs	r0, #2
 80053ea:	f7fe fb33 	bl	8003a54 <nRF24_CSN_UnSelect>
			return Receiving_Pipe;
 80053ee:	7bbb      	ldrb	r3, [r7, #14]
 80053f0:	e083      	b.n	80054fa <isDataAvailable+0x1da>
		}

        nRF24_CSN_UnSelect(Sel_B_Module2);                                     //Release the CSN pin to unselect the module1 on SPI BUS
 80053f2:	2002      	movs	r0, #2
 80053f4:	f7fe fb2e 	bl	8003a54 <nRF24_CSN_UnSelect>
        return 255;
 80053f8:	23ff      	movs	r3, #255	; 0xff
 80053fa:	e07e      	b.n	80054fa <isDataAvailable+0x1da>

	case Sel_B_Module3:

		nRF24_CSN_Select(Sel_B_Module3);                                       //Pull CSN pin low to select the module1 on SPI BUS
 80053fc:	2003      	movs	r0, #3
 80053fe:	f7fe faeb 	bl	80039d8 <nRF24_CSN_Select>

		STATUS_Register = nRF24_ReadReg(Sel_B_Module3, nRF24_REG_STATUS);               //Reading the status register
 8005402:	2107      	movs	r1, #7
 8005404:	2003      	movs	r0, #3
 8005406:	f7fe fcf7 	bl	8003df8 <nRF24_ReadReg>
 800540a:	4603      	mov	r3, r0
 800540c:	73fb      	strb	r3, [r7, #15]
		Receiving_Pipe = STATUS_Register & 0x0E;                                //Reading the bits 1,2 and 3 of the status for Pipe number
 800540e:	7bfb      	ldrb	r3, [r7, #15]
 8005410:	f003 030e 	and.w	r3, r3, #14
 8005414:	73bb      	strb	r3, [r7, #14]
		Receiving_Pipe = Receiving_Pipe >> 1;                                  //Shift the bits to right to derive the pipe number
 8005416:	7bbb      	ldrb	r3, [r7, #14]
 8005418:	085b      	lsrs	r3, r3, #1
 800541a:	73bb      	strb	r3, [r7, #14]
        if((STATUS_Register & (1<<6)) != 0)
 800541c:	7bfb      	ldrb	r3, [r7, #15]
 800541e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00e      	beq.n	8005444 <isDataAvailable+0x124>
		{
        	STATUS_Register = STATUS_Register | (1<<6);
 8005426:	7bfb      	ldrb	r3, [r7, #15]
 8005428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800542c:	73fb      	strb	r3, [r7, #15]
        	nRF24_WriteReg(Sel_B_Module3, nRF24_REG_STATUS, STATUS_Register);           //Writing 1 to RX_DR to clear bit
 800542e:	7bfb      	ldrb	r3, [r7, #15]
 8005430:	461a      	mov	r2, r3
 8005432:	2107      	movs	r1, #7
 8005434:	2003      	movs	r0, #3
 8005436:	f7fe fbcb 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_CSN_UnSelect(Sel_B_Module3);                                 //Release the CSN pin to unselect the module1 on SPI BUS
 800543a:	2003      	movs	r0, #3
 800543c:	f7fe fb0a 	bl	8003a54 <nRF24_CSN_UnSelect>
			return Receiving_Pipe;
 8005440:	7bbb      	ldrb	r3, [r7, #14]
 8005442:	e05a      	b.n	80054fa <isDataAvailable+0x1da>
		}

        nRF24_CSN_UnSelect(Sel_B_Module3);                                     //Release the CSN pin to unselect the module1 on SPI BUS
 8005444:	2003      	movs	r0, #3
 8005446:	f7fe fb05 	bl	8003a54 <nRF24_CSN_UnSelect>
        return 255;
 800544a:	23ff      	movs	r3, #255	; 0xff
 800544c:	e055      	b.n	80054fa <isDataAvailable+0x1da>

	case Sel_B_Module4:

		nRF24_CSN_Select(Sel_B_Module4);                                       //Pull CSN pin low to select the module1 on SPI BUS
 800544e:	2004      	movs	r0, #4
 8005450:	f7fe fac2 	bl	80039d8 <nRF24_CSN_Select>

		nRF24_ReadMBReg(Sel_B_Module4, nRF24_REG_STATUS, debug, 3);
 8005454:	f107 0208 	add.w	r2, r7, #8
 8005458:	2303      	movs	r3, #3
 800545a:	2107      	movs	r1, #7
 800545c:	2004      	movs	r0, #4
 800545e:	f7fe fd5f 	bl	8003f20 <nRF24_ReadMBReg>
		//STATUS_Register = nRF24_ReadReg(Sel_B_Module4, nRF24_REG_STATUS);               //Reading the status register
		STATUS_Register = debug[0];
 8005462:	7a3b      	ldrb	r3, [r7, #8]
 8005464:	73fb      	strb	r3, [r7, #15]
		Receiving_Pipe = STATUS_Register & 0x0E;                                //Reading the bits 1,2 and 3 of the status for Pipe number
 8005466:	7bfb      	ldrb	r3, [r7, #15]
 8005468:	f003 030e 	and.w	r3, r3, #14
 800546c:	73bb      	strb	r3, [r7, #14]
		Receiving_Pipe = Receiving_Pipe >> 1;                                  //Shift the bits to right to derive the pipe number
 800546e:	7bbb      	ldrb	r3, [r7, #14]
 8005470:	085b      	lsrs	r3, r3, #1
 8005472:	73bb      	strb	r3, [r7, #14]
        if((STATUS_Register & (1<<6)) != 0)
 8005474:	7bfb      	ldrb	r3, [r7, #15]
 8005476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00e      	beq.n	800549c <isDataAvailable+0x17c>
		{
        	STATUS_Register = STATUS_Register | (1<<6);
 800547e:	7bfb      	ldrb	r3, [r7, #15]
 8005480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005484:	73fb      	strb	r3, [r7, #15]
        	nRF24_WriteReg(Sel_B_Module4, nRF24_REG_STATUS, STATUS_Register);           //Writing 1 to RX_DR to clear bit
 8005486:	7bfb      	ldrb	r3, [r7, #15]
 8005488:	461a      	mov	r2, r3
 800548a:	2107      	movs	r1, #7
 800548c:	2004      	movs	r0, #4
 800548e:	f7fe fb9f 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_CSN_UnSelect(Sel_B_Module4);                                 //Release the CSN pin to unselect the module1 on SPI BUS
 8005492:	2004      	movs	r0, #4
 8005494:	f7fe fade 	bl	8003a54 <nRF24_CSN_UnSelect>
			return Receiving_Pipe;
 8005498:	7bbb      	ldrb	r3, [r7, #14]
 800549a:	e02e      	b.n	80054fa <isDataAvailable+0x1da>
		}

        nRF24_CSN_UnSelect(Sel_B_Module4);                                     //Release the CSN pin to unselect the module1 on SPI BUS
 800549c:	2004      	movs	r0, #4
 800549e:	f7fe fad9 	bl	8003a54 <nRF24_CSN_UnSelect>
        return 255;
 80054a2:	23ff      	movs	r3, #255	; 0xff
 80054a4:	e029      	b.n	80054fa <isDataAvailable+0x1da>

	case Sel_EL_Module:

		nRF24_CSN_Select(Sel_EL_Module);                                       //Pull CSN pin low to select the module1 on SPI BUS
 80054a6:	2005      	movs	r0, #5
 80054a8:	f7fe fa96 	bl	80039d8 <nRF24_CSN_Select>

		STATUS_Register = nRF24_ReadReg(Sel_EL_Module, nRF24_REG_STATUS);               //Reading the status register
 80054ac:	2107      	movs	r1, #7
 80054ae:	2005      	movs	r0, #5
 80054b0:	f7fe fca2 	bl	8003df8 <nRF24_ReadReg>
 80054b4:	4603      	mov	r3, r0
 80054b6:	73fb      	strb	r3, [r7, #15]
		Receiving_Pipe = STATUS_Register & 0x0E;                                //Reading the bits 1,2 and 3 of the status for Pipe number
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
 80054ba:	f003 030e 	and.w	r3, r3, #14
 80054be:	73bb      	strb	r3, [r7, #14]
		Receiving_Pipe = Receiving_Pipe >> 1;                                  //Shift the bits to right to derive the pipe number
 80054c0:	7bbb      	ldrb	r3, [r7, #14]
 80054c2:	085b      	lsrs	r3, r3, #1
 80054c4:	73bb      	strb	r3, [r7, #14]
        if((STATUS_Register & (1<<6)) != 0)
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
 80054c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00e      	beq.n	80054ee <isDataAvailable+0x1ce>
		{
        	STATUS_Register = STATUS_Register | (1<<6);
 80054d0:	7bfb      	ldrb	r3, [r7, #15]
 80054d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054d6:	73fb      	strb	r3, [r7, #15]
        	nRF24_WriteReg(Sel_EL_Module, nRF24_REG_STATUS, STATUS_Register);           //Writing 1 to RX_DR to clear bit
 80054d8:	7bfb      	ldrb	r3, [r7, #15]
 80054da:	461a      	mov	r2, r3
 80054dc:	2107      	movs	r1, #7
 80054de:	2005      	movs	r0, #5
 80054e0:	f7fe fb76 	bl	8003bd0 <nRF24_WriteReg>
			nRF24_CSN_UnSelect(Sel_EL_Module);                                 //Release the CSN pin to unselect the module1 on SPI BUS
 80054e4:	2005      	movs	r0, #5
 80054e6:	f7fe fab5 	bl	8003a54 <nRF24_CSN_UnSelect>
			return Receiving_Pipe;
 80054ea:	7bbb      	ldrb	r3, [r7, #14]
 80054ec:	e005      	b.n	80054fa <isDataAvailable+0x1da>
		}

        nRF24_CSN_UnSelect(Sel_EL_Module);                                     //Release the CSN pin to unselect the module1 on SPI BUS
 80054ee:	2005      	movs	r0, #5
 80054f0:	f7fe fab0 	bl	8003a54 <nRF24_CSN_UnSelect>
        return 255;
 80054f4:	23ff      	movs	r3, #255	; 0xff
 80054f6:	e000      	b.n	80054fa <isDataAvailable+0x1da>

	default:
		return 255;
 80054f8:	23ff      	movs	r3, #255	; 0xff

	}
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop

08005504 <nRF24_Receive>:


void nRF24_Receive(uint16_t Sel_CSN_Pin, uint8_t *data, uint8_t Payload_Size)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	4603      	mov	r3, r0
 800550c:	6039      	str	r1, [r7, #0]
 800550e:	80fb      	strh	r3, [r7, #6]
 8005510:	4613      	mov	r3, r2
 8005512:	717b      	strb	r3, [r7, #5]
	uint8_t cmdtosend = 0;
 8005514:	2300      	movs	r3, #0
 8005516:	73fb      	strb	r3, [r7, #15]

	switch(Sel_CSN_Pin)
 8005518:	88fb      	ldrh	r3, [r7, #6]
 800551a:	3b01      	subs	r3, #1
 800551c:	2b04      	cmp	r3, #4
 800551e:	f200 80b2 	bhi.w	8005686 <nRF24_Receive+0x182>
 8005522:	a201      	add	r2, pc, #4	; (adr r2, 8005528 <nRF24_Receive+0x24>)
 8005524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005528:	0800553d 	.word	0x0800553d
 800552c:	0800557f 	.word	0x0800557f
 8005530:	080055c1 	.word	0x080055c1
 8005534:	08005603 	.word	0x08005603
 8005538:	08005645 	.word	0x08005645
	{

	case Sel_B_Module1:

		nRF24_CSN_Select(Sel_B_Module1);                                       //Pull CSN pin low to select the module1 on SPI BUS
 800553c:	2001      	movs	r0, #1
 800553e:	f7fe fa4b 	bl	80039d8 <nRF24_CSN_Select>

		cmdtosend = nRF24_CMD_R_RX_PAYLOAD;                                    //Payload transmit command
 8005542:	2361      	movs	r3, #97	; 0x61
 8005544:	73fb      	strb	r3, [r7, #15]
		HAL_SPI_Transmit(&Button_hspi1, &cmdtosend, 1, 100);
 8005546:	f107 010f 	add.w	r1, r7, #15
 800554a:	2364      	movs	r3, #100	; 0x64
 800554c:	2201      	movs	r2, #1
 800554e:	4850      	ldr	r0, [pc, #320]	; (8005690 <nRF24_Receive+0x18c>)
 8005550:	f7fd f961 	bl	8002816 <HAL_SPI_Transmit>

		HAL_SPI_Receive(&Button_hspi1, data, Payload_Size, 100);                         //Receive the payload
 8005554:	797b      	ldrb	r3, [r7, #5]
 8005556:	b29a      	uxth	r2, r3
 8005558:	2364      	movs	r3, #100	; 0x64
 800555a:	6839      	ldr	r1, [r7, #0]
 800555c:	484c      	ldr	r0, [pc, #304]	; (8005690 <nRF24_Receive+0x18c>)
 800555e:	f7fd fa96 	bl	8002a8e <HAL_SPI_Receive>

		HAL_Delay(1);
 8005562:	2001      	movs	r0, #1
 8005564:	f7fc f966 	bl	8001834 <HAL_Delay>

		cmdtosend = nRF24_CMD_FLUSH_RX;                                        //Flush the RX Buffer
 8005568:	23e2      	movs	r3, #226	; 0xe2
 800556a:	73fb      	strb	r3, [r7, #15]
		nRF24_SendCMD(Sel_B_Module1, cmdtosend);
 800556c:	7bfb      	ldrb	r3, [r7, #15]
 800556e:	4619      	mov	r1, r3
 8005570:	2001      	movs	r0, #1
 8005572:	f7fe fd67 	bl	8004044 <nRF24_SendCMD>

		nRF24_CSN_UnSelect(Sel_B_Module1);                                     //Release the CSN pin to unselect the module1 on SPI BUS
 8005576:	2001      	movs	r0, #1
 8005578:	f7fe fa6c 	bl	8003a54 <nRF24_CSN_UnSelect>

		break;
 800557c:	e083      	b.n	8005686 <nRF24_Receive+0x182>

	case Sel_B_Module2:

		nRF24_CSN_Select(Sel_B_Module2);                                       //Pull CSN pin low to select the module2 on SPI BUS
 800557e:	2002      	movs	r0, #2
 8005580:	f7fe fa2a 	bl	80039d8 <nRF24_CSN_Select>

		cmdtosend = nRF24_CMD_R_RX_PAYLOAD;                                    //Payload transmit command
 8005584:	2361      	movs	r3, #97	; 0x61
 8005586:	73fb      	strb	r3, [r7, #15]
		HAL_SPI_Transmit(&Button_hspi1, &cmdtosend, 1, 100);
 8005588:	f107 010f 	add.w	r1, r7, #15
 800558c:	2364      	movs	r3, #100	; 0x64
 800558e:	2201      	movs	r2, #1
 8005590:	483f      	ldr	r0, [pc, #252]	; (8005690 <nRF24_Receive+0x18c>)
 8005592:	f7fd f940 	bl	8002816 <HAL_SPI_Transmit>

		HAL_SPI_Receive(&Button_hspi1, data, Payload_Size, 100);                         //Receive the payload
 8005596:	797b      	ldrb	r3, [r7, #5]
 8005598:	b29a      	uxth	r2, r3
 800559a:	2364      	movs	r3, #100	; 0x64
 800559c:	6839      	ldr	r1, [r7, #0]
 800559e:	483c      	ldr	r0, [pc, #240]	; (8005690 <nRF24_Receive+0x18c>)
 80055a0:	f7fd fa75 	bl	8002a8e <HAL_SPI_Receive>

		HAL_Delay(1);
 80055a4:	2001      	movs	r0, #1
 80055a6:	f7fc f945 	bl	8001834 <HAL_Delay>

		cmdtosend = nRF24_CMD_FLUSH_RX;                                        //Flush the RX Buffer
 80055aa:	23e2      	movs	r3, #226	; 0xe2
 80055ac:	73fb      	strb	r3, [r7, #15]
		nRF24_SendCMD(Sel_B_Module2, cmdtosend);
 80055ae:	7bfb      	ldrb	r3, [r7, #15]
 80055b0:	4619      	mov	r1, r3
 80055b2:	2002      	movs	r0, #2
 80055b4:	f7fe fd46 	bl	8004044 <nRF24_SendCMD>

		nRF24_CSN_UnSelect(Sel_B_Module2);                                     //Release the CSN pin to unselect the module2 on SPI BUS
 80055b8:	2002      	movs	r0, #2
 80055ba:	f7fe fa4b 	bl	8003a54 <nRF24_CSN_UnSelect>

		break;
 80055be:	e062      	b.n	8005686 <nRF24_Receive+0x182>

	case Sel_B_Module3:

		nRF24_CSN_Select(Sel_B_Module3);                                       //Pull CSN pin low to select the module3 on SPI BUS
 80055c0:	2003      	movs	r0, #3
 80055c2:	f7fe fa09 	bl	80039d8 <nRF24_CSN_Select>

		cmdtosend = nRF24_CMD_R_RX_PAYLOAD;                                    //Payload transmit command
 80055c6:	2361      	movs	r3, #97	; 0x61
 80055c8:	73fb      	strb	r3, [r7, #15]
		HAL_SPI_Transmit(&Button_hspi1, &cmdtosend, 1, 100);
 80055ca:	f107 010f 	add.w	r1, r7, #15
 80055ce:	2364      	movs	r3, #100	; 0x64
 80055d0:	2201      	movs	r2, #1
 80055d2:	482f      	ldr	r0, [pc, #188]	; (8005690 <nRF24_Receive+0x18c>)
 80055d4:	f7fd f91f 	bl	8002816 <HAL_SPI_Transmit>

		HAL_SPI_Receive(&Button_hspi1, data, Payload_Size, 100);                         //Receive the payload
 80055d8:	797b      	ldrb	r3, [r7, #5]
 80055da:	b29a      	uxth	r2, r3
 80055dc:	2364      	movs	r3, #100	; 0x64
 80055de:	6839      	ldr	r1, [r7, #0]
 80055e0:	482b      	ldr	r0, [pc, #172]	; (8005690 <nRF24_Receive+0x18c>)
 80055e2:	f7fd fa54 	bl	8002a8e <HAL_SPI_Receive>

		HAL_Delay(1);
 80055e6:	2001      	movs	r0, #1
 80055e8:	f7fc f924 	bl	8001834 <HAL_Delay>

		cmdtosend = nRF24_CMD_FLUSH_RX;                                        //Flush the RX Buffer
 80055ec:	23e2      	movs	r3, #226	; 0xe2
 80055ee:	73fb      	strb	r3, [r7, #15]
		nRF24_SendCMD(Sel_B_Module3, cmdtosend);
 80055f0:	7bfb      	ldrb	r3, [r7, #15]
 80055f2:	4619      	mov	r1, r3
 80055f4:	2003      	movs	r0, #3
 80055f6:	f7fe fd25 	bl	8004044 <nRF24_SendCMD>

		nRF24_CSN_UnSelect(Sel_B_Module3);                                     //Release the CSN pin to unselect the module3 on SPI BUS
 80055fa:	2003      	movs	r0, #3
 80055fc:	f7fe fa2a 	bl	8003a54 <nRF24_CSN_UnSelect>

		break;
 8005600:	e041      	b.n	8005686 <nRF24_Receive+0x182>

	case Sel_B_Module4:

		nRF24_CSN_Select(Sel_B_Module4);                                       //Pull CSN pin low to select the module4 on SPI BUS
 8005602:	2004      	movs	r0, #4
 8005604:	f7fe f9e8 	bl	80039d8 <nRF24_CSN_Select>

		cmdtosend = nRF24_CMD_R_RX_PAYLOAD;                                    //Payload transmit command
 8005608:	2361      	movs	r3, #97	; 0x61
 800560a:	73fb      	strb	r3, [r7, #15]
		HAL_SPI_Transmit(&Button_hspi1, &cmdtosend, 1, 100);
 800560c:	f107 010f 	add.w	r1, r7, #15
 8005610:	2364      	movs	r3, #100	; 0x64
 8005612:	2201      	movs	r2, #1
 8005614:	481e      	ldr	r0, [pc, #120]	; (8005690 <nRF24_Receive+0x18c>)
 8005616:	f7fd f8fe 	bl	8002816 <HAL_SPI_Transmit>

		HAL_SPI_Receive(&Button_hspi1, data, Payload_Size, 100);                         //Receive the payload
 800561a:	797b      	ldrb	r3, [r7, #5]
 800561c:	b29a      	uxth	r2, r3
 800561e:	2364      	movs	r3, #100	; 0x64
 8005620:	6839      	ldr	r1, [r7, #0]
 8005622:	481b      	ldr	r0, [pc, #108]	; (8005690 <nRF24_Receive+0x18c>)
 8005624:	f7fd fa33 	bl	8002a8e <HAL_SPI_Receive>

		HAL_Delay(1);
 8005628:	2001      	movs	r0, #1
 800562a:	f7fc f903 	bl	8001834 <HAL_Delay>

		cmdtosend = nRF24_CMD_FLUSH_RX;                                        //Flush the RX Buffer
 800562e:	23e2      	movs	r3, #226	; 0xe2
 8005630:	73fb      	strb	r3, [r7, #15]
		nRF24_SendCMD(Sel_B_Module4, cmdtosend);
 8005632:	7bfb      	ldrb	r3, [r7, #15]
 8005634:	4619      	mov	r1, r3
 8005636:	2004      	movs	r0, #4
 8005638:	f7fe fd04 	bl	8004044 <nRF24_SendCMD>

		nRF24_CSN_UnSelect(Sel_B_Module4);                                     //Release the CSN pin to unselect the module4 on SPI BUS
 800563c:	2004      	movs	r0, #4
 800563e:	f7fe fa09 	bl	8003a54 <nRF24_CSN_UnSelect>

		break;
 8005642:	e020      	b.n	8005686 <nRF24_Receive+0x182>

	case Sel_EL_Module:

		nRF24_CSN_Select(Sel_EL_Module);                                       //Pull CSN pin low to select the EdgeLED Module on SPI BUS
 8005644:	2005      	movs	r0, #5
 8005646:	f7fe f9c7 	bl	80039d8 <nRF24_CSN_Select>

		cmdtosend = nRF24_CMD_R_RX_PAYLOAD;                                    //Payload transmit command
 800564a:	2361      	movs	r3, #97	; 0x61
 800564c:	73fb      	strb	r3, [r7, #15]
		HAL_SPI_Transmit(&EL_hspi2, &cmdtosend, 1, 100);
 800564e:	f107 010f 	add.w	r1, r7, #15
 8005652:	2364      	movs	r3, #100	; 0x64
 8005654:	2201      	movs	r2, #1
 8005656:	480f      	ldr	r0, [pc, #60]	; (8005694 <nRF24_Receive+0x190>)
 8005658:	f7fd f8dd 	bl	8002816 <HAL_SPI_Transmit>

		HAL_SPI_Receive(&EL_hspi2, data, Payload_Size, 100);                             //Receive the payload
 800565c:	797b      	ldrb	r3, [r7, #5]
 800565e:	b29a      	uxth	r2, r3
 8005660:	2364      	movs	r3, #100	; 0x64
 8005662:	6839      	ldr	r1, [r7, #0]
 8005664:	480b      	ldr	r0, [pc, #44]	; (8005694 <nRF24_Receive+0x190>)
 8005666:	f7fd fa12 	bl	8002a8e <HAL_SPI_Receive>

		HAL_Delay(1);
 800566a:	2001      	movs	r0, #1
 800566c:	f7fc f8e2 	bl	8001834 <HAL_Delay>

		cmdtosend = nRF24_CMD_FLUSH_RX;                                        //Flush the RX Buffer
 8005670:	23e2      	movs	r3, #226	; 0xe2
 8005672:	73fb      	strb	r3, [r7, #15]
		nRF24_SendCMD(Sel_EL_Module, cmdtosend);
 8005674:	7bfb      	ldrb	r3, [r7, #15]
 8005676:	4619      	mov	r1, r3
 8005678:	2005      	movs	r0, #5
 800567a:	f7fe fce3 	bl	8004044 <nRF24_SendCMD>

		nRF24_CSN_UnSelect(Sel_EL_Module);                                     //Release the CSN pin to unselect the EdgeLED Module on SPI BUS
 800567e:	2005      	movs	r0, #5
 8005680:	f7fe f9e8 	bl	8003a54 <nRF24_CSN_UnSelect>

		break;
 8005684:	bf00      	nop
	}
}
 8005686:	bf00      	nop
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	200000e0 	.word	0x200000e0
 8005694:	20000138 	.word	0x20000138

08005698 <nRF24_ReadAllRegs>:

// Read all the Register data
void nRF24_ReadAllRegs (uint16_t Sel_CSN_Pin, uint8_t *data)
{
 8005698:	b590      	push	{r4, r7, lr}
 800569a:	b08d      	sub	sp, #52	; 0x34
 800569c:	af00      	add	r7, sp, #0
 800569e:	4603      	mov	r3, r0
 80056a0:	6039      	str	r1, [r7, #0]
 80056a2:	80fb      	strh	r3, [r7, #6]
	switch(Sel_CSN_Pin)
 80056a4:	88fb      	ldrh	r3, [r7, #6]
 80056a6:	3b01      	subs	r3, #1
 80056a8:	2b04      	cmp	r3, #4
 80056aa:	f200 8206 	bhi.w	8005aba <nRF24_ReadAllRegs+0x422>
 80056ae:	a201      	add	r2, pc, #4	; (adr r2, 80056b4 <nRF24_ReadAllRegs+0x1c>)
 80056b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b4:	080056c9 	.word	0x080056c9
 80056b8:	08005793 	.word	0x08005793
 80056bc:	0800585d 	.word	0x0800585d
 80056c0:	08005927 	.word	0x08005927
 80056c4:	080059f1 	.word	0x080059f1
	{

	case Sel_B_Module1:

		for (int i=0; i<10; i++)
 80056c8:	2300      	movs	r3, #0
 80056ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056cc:	e00c      	b.n	80056e8 <nRF24_ReadAllRegs+0x50>
		{
			data[i] = nRF24_ReadReg(Sel_B_Module1, i);
 80056ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d0:	b2d9      	uxtb	r1, r3
 80056d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	18d4      	adds	r4, r2, r3
 80056d8:	2001      	movs	r0, #1
 80056da:	f7fe fb8d 	bl	8003df8 <nRF24_ReadReg>
 80056de:	4603      	mov	r3, r0
 80056e0:	7023      	strb	r3, [r4, #0]
		for (int i=0; i<10; i++)
 80056e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e4:	3301      	adds	r3, #1
 80056e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ea:	2b09      	cmp	r3, #9
 80056ec:	ddef      	ble.n	80056ce <nRF24_ReadAllRegs+0x36>
		}

		nRF24_ReadMBReg(Sel_B_Module1, nRF24_REG_RX_ADDR_P0, &data[10], 5);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	f103 020a 	add.w	r2, r3, #10
 80056f4:	2305      	movs	r3, #5
 80056f6:	210a      	movs	r1, #10
 80056f8:	2001      	movs	r0, #1
 80056fa:	f7fe fc11 	bl	8003f20 <nRF24_ReadMBReg>

		nRF24_ReadMBReg(Sel_B_Module1, nRF24_REG_RX_ADDR_P1, &data[15], 5);
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	f103 020f 	add.w	r2, r3, #15
 8005704:	2305      	movs	r3, #5
 8005706:	210b      	movs	r1, #11
 8005708:	2001      	movs	r0, #1
 800570a:	f7fe fc09 	bl	8003f20 <nRF24_ReadMBReg>

		data[20] = nRF24_ReadReg(Sel_B_Module1, nRF24_REG_RX_ADDR_P2);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	f103 0414 	add.w	r4, r3, #20
 8005714:	210c      	movs	r1, #12
 8005716:	2001      	movs	r0, #1
 8005718:	f7fe fb6e 	bl	8003df8 <nRF24_ReadReg>
 800571c:	4603      	mov	r3, r0
 800571e:	7023      	strb	r3, [r4, #0]
		data[21] = nRF24_ReadReg(Sel_B_Module1, nRF24_REG_RX_ADDR_P3);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	f103 0415 	add.w	r4, r3, #21
 8005726:	210d      	movs	r1, #13
 8005728:	2001      	movs	r0, #1
 800572a:	f7fe fb65 	bl	8003df8 <nRF24_ReadReg>
 800572e:	4603      	mov	r3, r0
 8005730:	7023      	strb	r3, [r4, #0]
		data[22] = nRF24_ReadReg(Sel_B_Module1, nRF24_REG_RX_ADDR_P4);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	f103 0416 	add.w	r4, r3, #22
 8005738:	210e      	movs	r1, #14
 800573a:	2001      	movs	r0, #1
 800573c:	f7fe fb5c 	bl	8003df8 <nRF24_ReadReg>
 8005740:	4603      	mov	r3, r0
 8005742:	7023      	strb	r3, [r4, #0]
		data[23] = nRF24_ReadReg(Sel_B_Module1, nRF24_REG_RX_ADDR_P5);
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	f103 0417 	add.w	r4, r3, #23
 800574a:	210f      	movs	r1, #15
 800574c:	2001      	movs	r0, #1
 800574e:	f7fe fb53 	bl	8003df8 <nRF24_ReadReg>
 8005752:	4603      	mov	r3, r0
 8005754:	7023      	strb	r3, [r4, #0]

		nRF24_ReadMBReg(Sel_B_Module1, nRF24_REG_TX_ADDR, &data[24], 5);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	f103 0218 	add.w	r2, r3, #24
 800575c:	2305      	movs	r3, #5
 800575e:	2110      	movs	r1, #16
 8005760:	2001      	movs	r0, #1
 8005762:	f7fe fbdd 	bl	8003f20 <nRF24_ReadMBReg>

		for (int i=29; i<38; i++)
 8005766:	231d      	movs	r3, #29
 8005768:	62bb      	str	r3, [r7, #40]	; 0x28
 800576a:	e00e      	b.n	800578a <nRF24_ReadAllRegs+0xf2>
		{
			data[i] = nRF24_ReadReg(Sel_B_Module1, (i-12));
 800576c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576e:	b2db      	uxtb	r3, r3
 8005770:	3b0c      	subs	r3, #12
 8005772:	b2d9      	uxtb	r1, r3
 8005774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005776:	683a      	ldr	r2, [r7, #0]
 8005778:	18d4      	adds	r4, r2, r3
 800577a:	2001      	movs	r0, #1
 800577c:	f7fe fb3c 	bl	8003df8 <nRF24_ReadReg>
 8005780:	4603      	mov	r3, r0
 8005782:	7023      	strb	r3, [r4, #0]
		for (int i=29; i<38; i++)
 8005784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005786:	3301      	adds	r3, #1
 8005788:	62bb      	str	r3, [r7, #40]	; 0x28
 800578a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578c:	2b25      	cmp	r3, #37	; 0x25
 800578e:	dded      	ble.n	800576c <nRF24_ReadAllRegs+0xd4>
		}
		break;
 8005790:	e193      	b.n	8005aba <nRF24_ReadAllRegs+0x422>

	case Sel_B_Module2:

		for (int i=0; i<10; i++)
 8005792:	2300      	movs	r3, #0
 8005794:	627b      	str	r3, [r7, #36]	; 0x24
 8005796:	e00c      	b.n	80057b2 <nRF24_ReadAllRegs+0x11a>
		{
			data[i] = nRF24_ReadReg(Sel_B_Module2, i);
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	b2d9      	uxtb	r1, r3
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	18d4      	adds	r4, r2, r3
 80057a2:	2002      	movs	r0, #2
 80057a4:	f7fe fb28 	bl	8003df8 <nRF24_ReadReg>
 80057a8:	4603      	mov	r3, r0
 80057aa:	7023      	strb	r3, [r4, #0]
		for (int i=0; i<10; i++)
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	3301      	adds	r3, #1
 80057b0:	627b      	str	r3, [r7, #36]	; 0x24
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	2b09      	cmp	r3, #9
 80057b6:	ddef      	ble.n	8005798 <nRF24_ReadAllRegs+0x100>
		}

		nRF24_ReadMBReg(Sel_B_Module2, nRF24_REG_RX_ADDR_P0, &data[10], 5);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	f103 020a 	add.w	r2, r3, #10
 80057be:	2305      	movs	r3, #5
 80057c0:	210a      	movs	r1, #10
 80057c2:	2002      	movs	r0, #2
 80057c4:	f7fe fbac 	bl	8003f20 <nRF24_ReadMBReg>

		nRF24_ReadMBReg(Sel_B_Module2, nRF24_REG_RX_ADDR_P1, &data[15], 5);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	f103 020f 	add.w	r2, r3, #15
 80057ce:	2305      	movs	r3, #5
 80057d0:	210b      	movs	r1, #11
 80057d2:	2002      	movs	r0, #2
 80057d4:	f7fe fba4 	bl	8003f20 <nRF24_ReadMBReg>

		data[20] = nRF24_ReadReg(Sel_B_Module2, nRF24_REG_RX_ADDR_P2);
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	f103 0414 	add.w	r4, r3, #20
 80057de:	210c      	movs	r1, #12
 80057e0:	2002      	movs	r0, #2
 80057e2:	f7fe fb09 	bl	8003df8 <nRF24_ReadReg>
 80057e6:	4603      	mov	r3, r0
 80057e8:	7023      	strb	r3, [r4, #0]
		data[21] = nRF24_ReadReg(Sel_B_Module2, nRF24_REG_RX_ADDR_P3);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	f103 0415 	add.w	r4, r3, #21
 80057f0:	210d      	movs	r1, #13
 80057f2:	2002      	movs	r0, #2
 80057f4:	f7fe fb00 	bl	8003df8 <nRF24_ReadReg>
 80057f8:	4603      	mov	r3, r0
 80057fa:	7023      	strb	r3, [r4, #0]
		data[22] = nRF24_ReadReg(Sel_B_Module2, nRF24_REG_RX_ADDR_P4);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	f103 0416 	add.w	r4, r3, #22
 8005802:	210e      	movs	r1, #14
 8005804:	2002      	movs	r0, #2
 8005806:	f7fe faf7 	bl	8003df8 <nRF24_ReadReg>
 800580a:	4603      	mov	r3, r0
 800580c:	7023      	strb	r3, [r4, #0]
		data[23] = nRF24_ReadReg(Sel_B_Module2, nRF24_REG_RX_ADDR_P5);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	f103 0417 	add.w	r4, r3, #23
 8005814:	210f      	movs	r1, #15
 8005816:	2002      	movs	r0, #2
 8005818:	f7fe faee 	bl	8003df8 <nRF24_ReadReg>
 800581c:	4603      	mov	r3, r0
 800581e:	7023      	strb	r3, [r4, #0]

		nRF24_ReadMBReg(Sel_B_Module2, nRF24_REG_TX_ADDR, &data[24], 5);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	f103 0218 	add.w	r2, r3, #24
 8005826:	2305      	movs	r3, #5
 8005828:	2110      	movs	r1, #16
 800582a:	2002      	movs	r0, #2
 800582c:	f7fe fb78 	bl	8003f20 <nRF24_ReadMBReg>

		for (int i=29; i<38; i++)
 8005830:	231d      	movs	r3, #29
 8005832:	623b      	str	r3, [r7, #32]
 8005834:	e00e      	b.n	8005854 <nRF24_ReadAllRegs+0x1bc>
		{
			data[i] = nRF24_ReadReg(Sel_B_Module2, (i-12));
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	b2db      	uxtb	r3, r3
 800583a:	3b0c      	subs	r3, #12
 800583c:	b2d9      	uxtb	r1, r3
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	18d4      	adds	r4, r2, r3
 8005844:	2002      	movs	r0, #2
 8005846:	f7fe fad7 	bl	8003df8 <nRF24_ReadReg>
 800584a:	4603      	mov	r3, r0
 800584c:	7023      	strb	r3, [r4, #0]
		for (int i=29; i<38; i++)
 800584e:	6a3b      	ldr	r3, [r7, #32]
 8005850:	3301      	adds	r3, #1
 8005852:	623b      	str	r3, [r7, #32]
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	2b25      	cmp	r3, #37	; 0x25
 8005858:	dded      	ble.n	8005836 <nRF24_ReadAllRegs+0x19e>
		}
		break;
 800585a:	e12e      	b.n	8005aba <nRF24_ReadAllRegs+0x422>

	case Sel_B_Module3:

		for (int i=0; i<10; i++)
 800585c:	2300      	movs	r3, #0
 800585e:	61fb      	str	r3, [r7, #28]
 8005860:	e00c      	b.n	800587c <nRF24_ReadAllRegs+0x1e4>
		{
			data[i] = nRF24_ReadReg(Sel_B_Module3, i);
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	b2d9      	uxtb	r1, r3
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	18d4      	adds	r4, r2, r3
 800586c:	2003      	movs	r0, #3
 800586e:	f7fe fac3 	bl	8003df8 <nRF24_ReadReg>
 8005872:	4603      	mov	r3, r0
 8005874:	7023      	strb	r3, [r4, #0]
		for (int i=0; i<10; i++)
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	3301      	adds	r3, #1
 800587a:	61fb      	str	r3, [r7, #28]
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	2b09      	cmp	r3, #9
 8005880:	ddef      	ble.n	8005862 <nRF24_ReadAllRegs+0x1ca>
		}

		nRF24_ReadMBReg(Sel_B_Module3, nRF24_REG_RX_ADDR_P0, &data[10], 5);
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	f103 020a 	add.w	r2, r3, #10
 8005888:	2305      	movs	r3, #5
 800588a:	210a      	movs	r1, #10
 800588c:	2003      	movs	r0, #3
 800588e:	f7fe fb47 	bl	8003f20 <nRF24_ReadMBReg>

		nRF24_ReadMBReg(Sel_B_Module3, nRF24_REG_RX_ADDR_P1, &data[15], 5);
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	f103 020f 	add.w	r2, r3, #15
 8005898:	2305      	movs	r3, #5
 800589a:	210b      	movs	r1, #11
 800589c:	2003      	movs	r0, #3
 800589e:	f7fe fb3f 	bl	8003f20 <nRF24_ReadMBReg>

		data[20] = nRF24_ReadReg(Sel_B_Module3, nRF24_REG_RX_ADDR_P2);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	f103 0414 	add.w	r4, r3, #20
 80058a8:	210c      	movs	r1, #12
 80058aa:	2003      	movs	r0, #3
 80058ac:	f7fe faa4 	bl	8003df8 <nRF24_ReadReg>
 80058b0:	4603      	mov	r3, r0
 80058b2:	7023      	strb	r3, [r4, #0]
		data[21] = nRF24_ReadReg(Sel_B_Module3, nRF24_REG_RX_ADDR_P3);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	f103 0415 	add.w	r4, r3, #21
 80058ba:	210d      	movs	r1, #13
 80058bc:	2003      	movs	r0, #3
 80058be:	f7fe fa9b 	bl	8003df8 <nRF24_ReadReg>
 80058c2:	4603      	mov	r3, r0
 80058c4:	7023      	strb	r3, [r4, #0]
		data[22] = nRF24_ReadReg(Sel_B_Module3, nRF24_REG_RX_ADDR_P4);
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	f103 0416 	add.w	r4, r3, #22
 80058cc:	210e      	movs	r1, #14
 80058ce:	2003      	movs	r0, #3
 80058d0:	f7fe fa92 	bl	8003df8 <nRF24_ReadReg>
 80058d4:	4603      	mov	r3, r0
 80058d6:	7023      	strb	r3, [r4, #0]
		data[23] = nRF24_ReadReg(Sel_B_Module3, nRF24_REG_RX_ADDR_P5);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	f103 0417 	add.w	r4, r3, #23
 80058de:	210f      	movs	r1, #15
 80058e0:	2003      	movs	r0, #3
 80058e2:	f7fe fa89 	bl	8003df8 <nRF24_ReadReg>
 80058e6:	4603      	mov	r3, r0
 80058e8:	7023      	strb	r3, [r4, #0]

		nRF24_ReadMBReg(Sel_B_Module3, nRF24_REG_TX_ADDR, &data[24], 5);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	f103 0218 	add.w	r2, r3, #24
 80058f0:	2305      	movs	r3, #5
 80058f2:	2110      	movs	r1, #16
 80058f4:	2003      	movs	r0, #3
 80058f6:	f7fe fb13 	bl	8003f20 <nRF24_ReadMBReg>

		for (int i=29; i<38; i++)
 80058fa:	231d      	movs	r3, #29
 80058fc:	61bb      	str	r3, [r7, #24]
 80058fe:	e00e      	b.n	800591e <nRF24_ReadAllRegs+0x286>
		{
			data[i] = nRF24_ReadReg(Sel_B_Module3, (i-12));
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	b2db      	uxtb	r3, r3
 8005904:	3b0c      	subs	r3, #12
 8005906:	b2d9      	uxtb	r1, r3
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	18d4      	adds	r4, r2, r3
 800590e:	2003      	movs	r0, #3
 8005910:	f7fe fa72 	bl	8003df8 <nRF24_ReadReg>
 8005914:	4603      	mov	r3, r0
 8005916:	7023      	strb	r3, [r4, #0]
		for (int i=29; i<38; i++)
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	3301      	adds	r3, #1
 800591c:	61bb      	str	r3, [r7, #24]
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	2b25      	cmp	r3, #37	; 0x25
 8005922:	dded      	ble.n	8005900 <nRF24_ReadAllRegs+0x268>
		}
		break;
 8005924:	e0c9      	b.n	8005aba <nRF24_ReadAllRegs+0x422>

	case Sel_B_Module4:

		for (int i=0; i<10; i++)
 8005926:	2300      	movs	r3, #0
 8005928:	617b      	str	r3, [r7, #20]
 800592a:	e00c      	b.n	8005946 <nRF24_ReadAllRegs+0x2ae>
		{
			data[i] = nRF24_ReadReg(Sel_B_Module4, i);
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	b2d9      	uxtb	r1, r3
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	683a      	ldr	r2, [r7, #0]
 8005934:	18d4      	adds	r4, r2, r3
 8005936:	2004      	movs	r0, #4
 8005938:	f7fe fa5e 	bl	8003df8 <nRF24_ReadReg>
 800593c:	4603      	mov	r3, r0
 800593e:	7023      	strb	r3, [r4, #0]
		for (int i=0; i<10; i++)
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	3301      	adds	r3, #1
 8005944:	617b      	str	r3, [r7, #20]
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2b09      	cmp	r3, #9
 800594a:	ddef      	ble.n	800592c <nRF24_ReadAllRegs+0x294>
		}

		nRF24_ReadMBReg(Sel_B_Module4, nRF24_REG_RX_ADDR_P0, &data[10], 5);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	f103 020a 	add.w	r2, r3, #10
 8005952:	2305      	movs	r3, #5
 8005954:	210a      	movs	r1, #10
 8005956:	2004      	movs	r0, #4
 8005958:	f7fe fae2 	bl	8003f20 <nRF24_ReadMBReg>

		nRF24_ReadMBReg(Sel_B_Module4, nRF24_REG_RX_ADDR_P1, &data[15], 5);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	f103 020f 	add.w	r2, r3, #15
 8005962:	2305      	movs	r3, #5
 8005964:	210b      	movs	r1, #11
 8005966:	2004      	movs	r0, #4
 8005968:	f7fe fada 	bl	8003f20 <nRF24_ReadMBReg>

		data[20] = nRF24_ReadReg(Sel_B_Module4, nRF24_REG_RX_ADDR_P2);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	f103 0414 	add.w	r4, r3, #20
 8005972:	210c      	movs	r1, #12
 8005974:	2004      	movs	r0, #4
 8005976:	f7fe fa3f 	bl	8003df8 <nRF24_ReadReg>
 800597a:	4603      	mov	r3, r0
 800597c:	7023      	strb	r3, [r4, #0]
		data[21] = nRF24_ReadReg(Sel_B_Module4, nRF24_REG_RX_ADDR_P3);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	f103 0415 	add.w	r4, r3, #21
 8005984:	210d      	movs	r1, #13
 8005986:	2004      	movs	r0, #4
 8005988:	f7fe fa36 	bl	8003df8 <nRF24_ReadReg>
 800598c:	4603      	mov	r3, r0
 800598e:	7023      	strb	r3, [r4, #0]
		data[22] = nRF24_ReadReg(Sel_B_Module4, nRF24_REG_RX_ADDR_P4);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	f103 0416 	add.w	r4, r3, #22
 8005996:	210e      	movs	r1, #14
 8005998:	2004      	movs	r0, #4
 800599a:	f7fe fa2d 	bl	8003df8 <nRF24_ReadReg>
 800599e:	4603      	mov	r3, r0
 80059a0:	7023      	strb	r3, [r4, #0]
		data[23] = nRF24_ReadReg(Sel_B_Module4, nRF24_REG_RX_ADDR_P5);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	f103 0417 	add.w	r4, r3, #23
 80059a8:	210f      	movs	r1, #15
 80059aa:	2004      	movs	r0, #4
 80059ac:	f7fe fa24 	bl	8003df8 <nRF24_ReadReg>
 80059b0:	4603      	mov	r3, r0
 80059b2:	7023      	strb	r3, [r4, #0]

		nRF24_ReadMBReg(Sel_B_Module4, nRF24_REG_TX_ADDR, &data[24], 5);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	f103 0218 	add.w	r2, r3, #24
 80059ba:	2305      	movs	r3, #5
 80059bc:	2110      	movs	r1, #16
 80059be:	2004      	movs	r0, #4
 80059c0:	f7fe faae 	bl	8003f20 <nRF24_ReadMBReg>

		for (int i=29; i<38; i++)
 80059c4:	231d      	movs	r3, #29
 80059c6:	613b      	str	r3, [r7, #16]
 80059c8:	e00e      	b.n	80059e8 <nRF24_ReadAllRegs+0x350>
		{
			data[i] = nRF24_ReadReg(Sel_B_Module4, (i-12));
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	3b0c      	subs	r3, #12
 80059d0:	b2d9      	uxtb	r1, r3
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	18d4      	adds	r4, r2, r3
 80059d8:	2004      	movs	r0, #4
 80059da:	f7fe fa0d 	bl	8003df8 <nRF24_ReadReg>
 80059de:	4603      	mov	r3, r0
 80059e0:	7023      	strb	r3, [r4, #0]
		for (int i=29; i<38; i++)
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	3301      	adds	r3, #1
 80059e6:	613b      	str	r3, [r7, #16]
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	2b25      	cmp	r3, #37	; 0x25
 80059ec:	dded      	ble.n	80059ca <nRF24_ReadAllRegs+0x332>
		}
		break;
 80059ee:	e064      	b.n	8005aba <nRF24_ReadAllRegs+0x422>

	case Sel_EL_Module:

		for (int i=0; i<10; i++)
 80059f0:	2300      	movs	r3, #0
 80059f2:	60fb      	str	r3, [r7, #12]
 80059f4:	e00c      	b.n	8005a10 <nRF24_ReadAllRegs+0x378>
		{
			*(data+i) = nRF24_ReadReg(Sel_EL_Module, i);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	b2d9      	uxtb	r1, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	18d4      	adds	r4, r2, r3
 8005a00:	2005      	movs	r0, #5
 8005a02:	f7fe f9f9 	bl	8003df8 <nRF24_ReadReg>
 8005a06:	4603      	mov	r3, r0
 8005a08:	7023      	strb	r3, [r4, #0]
		for (int i=0; i<10; i++)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	60fb      	str	r3, [r7, #12]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2b09      	cmp	r3, #9
 8005a14:	ddef      	ble.n	80059f6 <nRF24_ReadAllRegs+0x35e>
		}

		nRF24_ReadMBReg(Sel_EL_Module, nRF24_REG_RX_ADDR_P0, (data+10), 5);
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	f103 020a 	add.w	r2, r3, #10
 8005a1c:	2305      	movs	r3, #5
 8005a1e:	210a      	movs	r1, #10
 8005a20:	2005      	movs	r0, #5
 8005a22:	f7fe fa7d 	bl	8003f20 <nRF24_ReadMBReg>

		nRF24_ReadMBReg(Sel_EL_Module, nRF24_REG_RX_ADDR_P1, (data+15), 5);
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	f103 020f 	add.w	r2, r3, #15
 8005a2c:	2305      	movs	r3, #5
 8005a2e:	210b      	movs	r1, #11
 8005a30:	2005      	movs	r0, #5
 8005a32:	f7fe fa75 	bl	8003f20 <nRF24_ReadMBReg>

		*(data+20) = nRF24_ReadReg(Sel_EL_Module, nRF24_REG_RX_ADDR_P2);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	f103 0414 	add.w	r4, r3, #20
 8005a3c:	210c      	movs	r1, #12
 8005a3e:	2005      	movs	r0, #5
 8005a40:	f7fe f9da 	bl	8003df8 <nRF24_ReadReg>
 8005a44:	4603      	mov	r3, r0
 8005a46:	7023      	strb	r3, [r4, #0]
		*(data+21) = nRF24_ReadReg(Sel_EL_Module, nRF24_REG_RX_ADDR_P3);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	f103 0415 	add.w	r4, r3, #21
 8005a4e:	210d      	movs	r1, #13
 8005a50:	2005      	movs	r0, #5
 8005a52:	f7fe f9d1 	bl	8003df8 <nRF24_ReadReg>
 8005a56:	4603      	mov	r3, r0
 8005a58:	7023      	strb	r3, [r4, #0]
		*(data+22) = nRF24_ReadReg(Sel_EL_Module, nRF24_REG_RX_ADDR_P4);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	f103 0416 	add.w	r4, r3, #22
 8005a60:	210e      	movs	r1, #14
 8005a62:	2005      	movs	r0, #5
 8005a64:	f7fe f9c8 	bl	8003df8 <nRF24_ReadReg>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	7023      	strb	r3, [r4, #0]
		*(data+23) = nRF24_ReadReg(Sel_EL_Module, nRF24_REG_RX_ADDR_P5);
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	f103 0417 	add.w	r4, r3, #23
 8005a72:	210f      	movs	r1, #15
 8005a74:	2005      	movs	r0, #5
 8005a76:	f7fe f9bf 	bl	8003df8 <nRF24_ReadReg>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	7023      	strb	r3, [r4, #0]

		nRF24_ReadMBReg(Sel_EL_Module, nRF24_REG_TX_ADDR, (data+24), 5);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	f103 0218 	add.w	r2, r3, #24
 8005a84:	2305      	movs	r3, #5
 8005a86:	2110      	movs	r1, #16
 8005a88:	2005      	movs	r0, #5
 8005a8a:	f7fe fa49 	bl	8003f20 <nRF24_ReadMBReg>

		for (int i=29; i<38; i++)
 8005a8e:	231d      	movs	r3, #29
 8005a90:	60bb      	str	r3, [r7, #8]
 8005a92:	e00e      	b.n	8005ab2 <nRF24_ReadAllRegs+0x41a>
		{
			*(data+i) = nRF24_ReadReg(Sel_EL_Module, (i-12));
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	3b0c      	subs	r3, #12
 8005a9a:	b2d9      	uxtb	r1, r3
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	18d4      	adds	r4, r2, r3
 8005aa2:	2005      	movs	r0, #5
 8005aa4:	f7fe f9a8 	bl	8003df8 <nRF24_ReadReg>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	7023      	strb	r3, [r4, #0]
		for (int i=29; i<38; i++)
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	60bb      	str	r3, [r7, #8]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2b25      	cmp	r3, #37	; 0x25
 8005ab6:	dded      	ble.n	8005a94 <nRF24_ReadAllRegs+0x3fc>
		}
		break;
 8005ab8:	bf00      	nop
	}

}
 8005aba:	bf00      	nop
 8005abc:	3734      	adds	r7, #52	; 0x34
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd90      	pop	{r4, r7, pc}
 8005ac2:	bf00      	nop

08005ac4 <nRF24_Power>:

void nRF24_Power(uint16_t Sel_CSN_Pin, uint8_t On_Off_Cmd)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	4603      	mov	r3, r0
 8005acc:	460a      	mov	r2, r1
 8005ace:	80fb      	strh	r3, [r7, #6]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	717b      	strb	r3, [r7, #5]
	uint8_t Temp_Reg;

	switch(Sel_CSN_Pin)
 8005ad4:	88fb      	ldrh	r3, [r7, #6]
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	f200 80b8 	bhi.w	8005c4e <nRF24_Power+0x18a>
 8005ade:	a201      	add	r2, pc, #4	; (adr r2, 8005ae4 <nRF24_Power+0x20>)
 8005ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae4:	08005af9 	.word	0x08005af9
 8005ae8:	08005b3f 	.word	0x08005b3f
 8005aec:	08005b83 	.word	0x08005b83
 8005af0:	08005bc7 	.word	0x08005bc7
 8005af4:	08005c0b 	.word	0x08005c0b
	{
	case Sel_B_Module1:
		Temp_Reg = nRF24_ReadReg(Sel_B_Module1, nRF24_REG_CONFIG);
 8005af8:	2100      	movs	r1, #0
 8005afa:	2001      	movs	r0, #1
 8005afc:	f7fe f97c 	bl	8003df8 <nRF24_ReadReg>
 8005b00:	4603      	mov	r3, r0
 8005b02:	73fb      	strb	r3, [r7, #15]

		if(On_Off_Cmd == Power_Up)
 8005b04:	797b      	ldrb	r3, [r7, #5]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d10a      	bne.n	8005b20 <nRF24_Power+0x5c>
		{
			Temp_Reg = Temp_Reg | (1<<1);
 8005b0a:	7bfb      	ldrb	r3, [r7, #15]
 8005b0c:	f043 0302 	orr.w	r3, r3, #2
 8005b10:	73fb      	strb	r3, [r7, #15]
			nRF24_WriteReg(Sel_B_Module1, nRF24_REG_CONFIG, Temp_Reg);
 8005b12:	7bfb      	ldrb	r3, [r7, #15]
 8005b14:	461a      	mov	r2, r3
 8005b16:	2100      	movs	r1, #0
 8005b18:	2001      	movs	r0, #1
 8005b1a:	f7fe f859 	bl	8003bd0 <nRF24_WriteReg>
		else if(On_Off_Cmd == Power_Down)
		{
			Temp_Reg = Temp_Reg & 0x7D;
			nRF24_WriteReg(Sel_B_Module1, nRF24_REG_CONFIG, Temp_Reg);
		}
		break;
 8005b1e:	e098      	b.n	8005c52 <nRF24_Power+0x18e>
		else if(On_Off_Cmd == Power_Down)
 8005b20:	797b      	ldrb	r3, [r7, #5]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f040 8095 	bne.w	8005c52 <nRF24_Power+0x18e>
			Temp_Reg = Temp_Reg & 0x7D;
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
 8005b2a:	f003 037d 	and.w	r3, r3, #125	; 0x7d
 8005b2e:	73fb      	strb	r3, [r7, #15]
			nRF24_WriteReg(Sel_B_Module1, nRF24_REG_CONFIG, Temp_Reg);
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
 8005b32:	461a      	mov	r2, r3
 8005b34:	2100      	movs	r1, #0
 8005b36:	2001      	movs	r0, #1
 8005b38:	f7fe f84a 	bl	8003bd0 <nRF24_WriteReg>
		break;
 8005b3c:	e089      	b.n	8005c52 <nRF24_Power+0x18e>
	case Sel_B_Module2:
		Temp_Reg = nRF24_ReadReg(Sel_B_Module2, nRF24_REG_CONFIG);
 8005b3e:	2100      	movs	r1, #0
 8005b40:	2002      	movs	r0, #2
 8005b42:	f7fe f959 	bl	8003df8 <nRF24_ReadReg>
 8005b46:	4603      	mov	r3, r0
 8005b48:	73fb      	strb	r3, [r7, #15]

		if(On_Off_Cmd == Power_Up)
 8005b4a:	797b      	ldrb	r3, [r7, #5]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d10a      	bne.n	8005b66 <nRF24_Power+0xa2>
		{
			Temp_Reg = Temp_Reg | (1<<1);
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
 8005b52:	f043 0302 	orr.w	r3, r3, #2
 8005b56:	73fb      	strb	r3, [r7, #15]
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_CONFIG, Temp_Reg);
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	2002      	movs	r0, #2
 8005b60:	f7fe f836 	bl	8003bd0 <nRF24_WriteReg>
		else if(On_Off_Cmd == Power_Down)
		{
			Temp_Reg = Temp_Reg & 0x7D;
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_CONFIG, Temp_Reg);
		}
		break;
 8005b64:	e077      	b.n	8005c56 <nRF24_Power+0x192>
		else if(On_Off_Cmd == Power_Down)
 8005b66:	797b      	ldrb	r3, [r7, #5]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d174      	bne.n	8005c56 <nRF24_Power+0x192>
			Temp_Reg = Temp_Reg & 0x7D;
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
 8005b6e:	f003 037d 	and.w	r3, r3, #125	; 0x7d
 8005b72:	73fb      	strb	r3, [r7, #15]
			nRF24_WriteReg(Sel_B_Module2, nRF24_REG_CONFIG, Temp_Reg);
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
 8005b76:	461a      	mov	r2, r3
 8005b78:	2100      	movs	r1, #0
 8005b7a:	2002      	movs	r0, #2
 8005b7c:	f7fe f828 	bl	8003bd0 <nRF24_WriteReg>
		break;
 8005b80:	e069      	b.n	8005c56 <nRF24_Power+0x192>
	case Sel_B_Module3:
		Temp_Reg = nRF24_ReadReg(Sel_B_Module3, nRF24_REG_CONFIG);
 8005b82:	2100      	movs	r1, #0
 8005b84:	2003      	movs	r0, #3
 8005b86:	f7fe f937 	bl	8003df8 <nRF24_ReadReg>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	73fb      	strb	r3, [r7, #15]

		if(On_Off_Cmd == Power_Up)
 8005b8e:	797b      	ldrb	r3, [r7, #5]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d10a      	bne.n	8005baa <nRF24_Power+0xe6>
		{
			Temp_Reg = Temp_Reg | (1<<1);
 8005b94:	7bfb      	ldrb	r3, [r7, #15]
 8005b96:	f043 0302 	orr.w	r3, r3, #2
 8005b9a:	73fb      	strb	r3, [r7, #15]
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_CONFIG, Temp_Reg);
 8005b9c:	7bfb      	ldrb	r3, [r7, #15]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	2003      	movs	r0, #3
 8005ba4:	f7fe f814 	bl	8003bd0 <nRF24_WriteReg>
		else if(On_Off_Cmd == Power_Down)
		{
			Temp_Reg = Temp_Reg & 0x7D;
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_CONFIG, Temp_Reg);
		}
		break;
 8005ba8:	e057      	b.n	8005c5a <nRF24_Power+0x196>
		else if(On_Off_Cmd == Power_Down)
 8005baa:	797b      	ldrb	r3, [r7, #5]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d154      	bne.n	8005c5a <nRF24_Power+0x196>
			Temp_Reg = Temp_Reg & 0x7D;
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
 8005bb2:	f003 037d 	and.w	r3, r3, #125	; 0x7d
 8005bb6:	73fb      	strb	r3, [r7, #15]
			nRF24_WriteReg(Sel_B_Module3, nRF24_REG_CONFIG, Temp_Reg);
 8005bb8:	7bfb      	ldrb	r3, [r7, #15]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	2003      	movs	r0, #3
 8005bc0:	f7fe f806 	bl	8003bd0 <nRF24_WriteReg>
		break;
 8005bc4:	e049      	b.n	8005c5a <nRF24_Power+0x196>
	case Sel_B_Module4:
		Temp_Reg = nRF24_ReadReg(Sel_B_Module4, nRF24_REG_CONFIG);
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	2004      	movs	r0, #4
 8005bca:	f7fe f915 	bl	8003df8 <nRF24_ReadReg>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	73fb      	strb	r3, [r7, #15]

		if(On_Off_Cmd == Power_Up)
 8005bd2:	797b      	ldrb	r3, [r7, #5]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d10a      	bne.n	8005bee <nRF24_Power+0x12a>
		{
			Temp_Reg = Temp_Reg | (1<<1);
 8005bd8:	7bfb      	ldrb	r3, [r7, #15]
 8005bda:	f043 0302 	orr.w	r3, r3, #2
 8005bde:	73fb      	strb	r3, [r7, #15]
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_CONFIG, Temp_Reg);
 8005be0:	7bfb      	ldrb	r3, [r7, #15]
 8005be2:	461a      	mov	r2, r3
 8005be4:	2100      	movs	r1, #0
 8005be6:	2004      	movs	r0, #4
 8005be8:	f7fd fff2 	bl	8003bd0 <nRF24_WriteReg>
		else if(On_Off_Cmd == Power_Down)
		{
			Temp_Reg = Temp_Reg & 0x7D;
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_CONFIG, Temp_Reg);
		}
		break;
 8005bec:	e037      	b.n	8005c5e <nRF24_Power+0x19a>
		else if(On_Off_Cmd == Power_Down)
 8005bee:	797b      	ldrb	r3, [r7, #5]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d134      	bne.n	8005c5e <nRF24_Power+0x19a>
			Temp_Reg = Temp_Reg & 0x7D;
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
 8005bf6:	f003 037d 	and.w	r3, r3, #125	; 0x7d
 8005bfa:	73fb      	strb	r3, [r7, #15]
			nRF24_WriteReg(Sel_B_Module4, nRF24_REG_CONFIG, Temp_Reg);
 8005bfc:	7bfb      	ldrb	r3, [r7, #15]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	2100      	movs	r1, #0
 8005c02:	2004      	movs	r0, #4
 8005c04:	f7fd ffe4 	bl	8003bd0 <nRF24_WriteReg>
		break;
 8005c08:	e029      	b.n	8005c5e <nRF24_Power+0x19a>
	case Sel_EL_Module:
		Temp_Reg = nRF24_ReadReg(Sel_EL_Module, nRF24_REG_CONFIG);
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	2005      	movs	r0, #5
 8005c0e:	f7fe f8f3 	bl	8003df8 <nRF24_ReadReg>
 8005c12:	4603      	mov	r3, r0
 8005c14:	73fb      	strb	r3, [r7, #15]

		if(On_Off_Cmd == Power_Up)
 8005c16:	797b      	ldrb	r3, [r7, #5]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d10a      	bne.n	8005c32 <nRF24_Power+0x16e>
		{
			Temp_Reg = Temp_Reg | (1<<1);
 8005c1c:	7bfb      	ldrb	r3, [r7, #15]
 8005c1e:	f043 0302 	orr.w	r3, r3, #2
 8005c22:	73fb      	strb	r3, [r7, #15]
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_CONFIG, Temp_Reg);
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
 8005c26:	461a      	mov	r2, r3
 8005c28:	2100      	movs	r1, #0
 8005c2a:	2005      	movs	r0, #5
 8005c2c:	f7fd ffd0 	bl	8003bd0 <nRF24_WriteReg>
		else if(On_Off_Cmd == Power_Down)
		{
			Temp_Reg = Temp_Reg & 0x7D;
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_CONFIG, Temp_Reg);
		}
		break;
 8005c30:	e017      	b.n	8005c62 <nRF24_Power+0x19e>
		else if(On_Off_Cmd == Power_Down)
 8005c32:	797b      	ldrb	r3, [r7, #5]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d114      	bne.n	8005c62 <nRF24_Power+0x19e>
			Temp_Reg = Temp_Reg & 0x7D;
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
 8005c3a:	f003 037d 	and.w	r3, r3, #125	; 0x7d
 8005c3e:	73fb      	strb	r3, [r7, #15]
			nRF24_WriteReg(Sel_EL_Module, nRF24_REG_CONFIG, Temp_Reg);
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
 8005c42:	461a      	mov	r2, r3
 8005c44:	2100      	movs	r1, #0
 8005c46:	2005      	movs	r0, #5
 8005c48:	f7fd ffc2 	bl	8003bd0 <nRF24_WriteReg>
		break;
 8005c4c:	e009      	b.n	8005c62 <nRF24_Power+0x19e>
	default:
		break;
 8005c4e:	bf00      	nop
 8005c50:	e008      	b.n	8005c64 <nRF24_Power+0x1a0>
		break;
 8005c52:	bf00      	nop
 8005c54:	e006      	b.n	8005c64 <nRF24_Power+0x1a0>
		break;
 8005c56:	bf00      	nop
 8005c58:	e004      	b.n	8005c64 <nRF24_Power+0x1a0>
		break;
 8005c5a:	bf00      	nop
 8005c5c:	e002      	b.n	8005c64 <nRF24_Power+0x1a0>
		break;
 8005c5e:	bf00      	nop
 8005c60:	e000      	b.n	8005c64 <nRF24_Power+0x1a0>
		break;
 8005c62:	bf00      	nop
	}
}
 8005c64:	bf00      	nop
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <nRF24_Transmit_Report>:

void nRF24_Transmit_Report(uint16_t Sel_CSN_Pin)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	4603      	mov	r3, r0
 8005c74:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp_reg,Temp_reg2;
	switch(Sel_CSN_Pin)
 8005c76:	88fb      	ldrh	r3, [r7, #6]
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	2b04      	cmp	r3, #4
 8005c7c:	f200 828c 	bhi.w	8006198 <nRF24_Transmit_Report+0x52c>
 8005c80:	a201      	add	r2, pc, #4	; (adr r2, 8005c88 <nRF24_Transmit_Report+0x1c>)
 8005c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c86:	bf00      	nop
 8005c88:	08005c9d 	.word	0x08005c9d
 8005c8c:	08005d93 	.word	0x08005d93
 8005c90:	08005e89 	.word	0x08005e89
 8005c94:	08005fad 	.word	0x08005fad
 8005c98:	080060a3 	.word	0x080060a3
	{
	case Sel_B_Module1:
		Temp_reg = nRF24_ReadReg(Sel_B_Module1, nRF24_REG_FIFO_STATUS);
 8005c9c:	2117      	movs	r1, #23
 8005c9e:	2001      	movs	r0, #1
 8005ca0:	f7fe f8aa 	bl	8003df8 <nRF24_ReadReg>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*)"Transmit Report\n",16, 100);
 8005ca8:	2364      	movs	r3, #100	; 0x64
 8005caa:	2210      	movs	r2, #16
 8005cac:	49b4      	ldr	r1, [pc, #720]	; (8005f80 <nRF24_Transmit_Report+0x314>)
 8005cae:	48b5      	ldr	r0, [pc, #724]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005cb0:	f7fd fb1d 	bl	80032ee <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"**********************\n",23, 100);
 8005cb4:	2364      	movs	r3, #100	; 0x64
 8005cb6:	2217      	movs	r2, #23
 8005cb8:	49b3      	ldr	r1, [pc, #716]	; (8005f88 <nRF24_Transmit_Report+0x31c>)
 8005cba:	48b2      	ldr	r0, [pc, #712]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005cbc:	f7fd fb17 	bl	80032ee <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"FIFO STATUS Register: ",22, 100);
 8005cc0:	2364      	movs	r3, #100	; 0x64
 8005cc2:	2216      	movs	r2, #22
 8005cc4:	49b1      	ldr	r1, [pc, #708]	; (8005f8c <nRF24_Transmit_Report+0x320>)
 8005cc6:	48af      	ldr	r0, [pc, #700]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005cc8:	f7fd fb11 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Temp_reg);
 8005ccc:	7bfb      	ldrb	r3, [r7, #15]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 fd90 	bl	80067f4 <nRF24_sendRegisterValue>

		if((Temp_reg & (1<<4)) != 0)
 8005cd4:	7bfb      	ldrb	r3, [r7, #15]
 8005cd6:	f003 0310 	and.w	r3, r3, #16
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d006      	beq.n	8005cec <nRF24_Transmit_Report+0x80>
		{
			HAL_UART_Transmit(&huart2, (uint8_t*)"TX FIFO empty\n",14, 100);
 8005cde:	2364      	movs	r3, #100	; 0x64
 8005ce0:	220e      	movs	r2, #14
 8005ce2:	49ab      	ldr	r1, [pc, #684]	; (8005f90 <nRF24_Transmit_Report+0x324>)
 8005ce4:	48a7      	ldr	r0, [pc, #668]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005ce6:	f7fd fb02 	bl	80032ee <HAL_UART_Transmit>
 8005cea:	e005      	b.n	8005cf8 <nRF24_Transmit_Report+0x8c>
		} else
		{
			HAL_UART_Transmit(&huart2, (uint8_t*)"Data in TX FIFO\n",16, 100);
 8005cec:	2364      	movs	r3, #100	; 0x64
 8005cee:	2210      	movs	r2, #16
 8005cf0:	49a8      	ldr	r1, [pc, #672]	; (8005f94 <nRF24_Transmit_Report+0x328>)
 8005cf2:	48a4      	ldr	r0, [pc, #656]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005cf4:	f7fd fafb 	bl	80032ee <HAL_UART_Transmit>
		}
		Temp_reg = nRF24_ReadReg(Sel_B_Module1, nRF24_REG_OBSERVE_TX);
 8005cf8:	2108      	movs	r1, #8
 8005cfa:	2001      	movs	r0, #1
 8005cfc:	f7fe f87c 	bl	8003df8 <nRF24_ReadReg>
 8005d00:	4603      	mov	r3, r0
 8005d02:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*)"OBSERVE TX Register: ",21, 100);
 8005d04:	2364      	movs	r3, #100	; 0x64
 8005d06:	2215      	movs	r2, #21
 8005d08:	49a3      	ldr	r1, [pc, #652]	; (8005f98 <nRF24_Transmit_Report+0x32c>)
 8005d0a:	489e      	ldr	r0, [pc, #632]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005d0c:	f7fd faef 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Temp_reg);
 8005d10:	7bfb      	ldrb	r3, [r7, #15]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 fd6e 	bl	80067f4 <nRF24_sendRegisterValue>
		Temp_reg2 = Temp_reg>>4;
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
 8005d1a:	091b      	lsrs	r3, r3, #4
 8005d1c:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&huart2, (uint8_t*)"PLOS Count: ",12, 100);
 8005d1e:	2364      	movs	r3, #100	; 0x64
 8005d20:	220c      	movs	r2, #12
 8005d22:	499e      	ldr	r1, [pc, #632]	; (8005f9c <nRF24_Transmit_Report+0x330>)
 8005d24:	4897      	ldr	r0, [pc, #604]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005d26:	f7fd fae2 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Temp_reg2);
 8005d2a:	7bbb      	ldrb	r3, [r7, #14]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f000 fd61 	bl	80067f4 <nRF24_sendRegisterValue>
		Temp_reg = Temp_reg & 0x0F;
 8005d32:	7bfb      	ldrb	r3, [r7, #15]
 8005d34:	f003 030f 	and.w	r3, r3, #15
 8005d38:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*)"ARC Count: ",11, 100);
 8005d3a:	2364      	movs	r3, #100	; 0x64
 8005d3c:	220b      	movs	r2, #11
 8005d3e:	4998      	ldr	r1, [pc, #608]	; (8005fa0 <nRF24_Transmit_Report+0x334>)
 8005d40:	4890      	ldr	r0, [pc, #576]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005d42:	f7fd fad4 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Temp_reg);
 8005d46:	7bfb      	ldrb	r3, [r7, #15]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 fd53 	bl	80067f4 <nRF24_sendRegisterValue>
		Temp_reg = nRF24_ReadReg(Sel_B_Module1, nRF24_REG_STATUS);
 8005d4e:	2107      	movs	r1, #7
 8005d50:	2001      	movs	r0, #1
 8005d52:	f7fe f851 	bl	8003df8 <nRF24_ReadReg>
 8005d56:	4603      	mov	r3, r0
 8005d58:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*)"STATUS Register: ",17, 100);
 8005d5a:	2364      	movs	r3, #100	; 0x64
 8005d5c:	2211      	movs	r2, #17
 8005d5e:	4991      	ldr	r1, [pc, #580]	; (8005fa4 <nRF24_Transmit_Report+0x338>)
 8005d60:	4888      	ldr	r0, [pc, #544]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005d62:	f7fd fac4 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Temp_reg);
 8005d66:	7bfb      	ldrb	r3, [r7, #15]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f000 fd43 	bl	80067f4 <nRF24_sendRegisterValue>
		if((Temp_reg & (1<<0)) != 0)
 8005d6e:	7bfb      	ldrb	r3, [r7, #15]
 8005d70:	f003 0301 	and.w	r3, r3, #1
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d005      	beq.n	8005d84 <nRF24_Transmit_Report+0x118>
		{
			HAL_UART_Transmit(&huart2, (uint8_t*)"TX FIFO Full\n",13, 100);
 8005d78:	2364      	movs	r3, #100	; 0x64
 8005d7a:	220d      	movs	r2, #13
 8005d7c:	498a      	ldr	r1, [pc, #552]	; (8005fa8 <nRF24_Transmit_Report+0x33c>)
 8005d7e:	4881      	ldr	r0, [pc, #516]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005d80:	f7fd fab5 	bl	80032ee <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, (uint8_t*)"**********************\n",23, 100);
 8005d84:	2364      	movs	r3, #100	; 0x64
 8005d86:	2217      	movs	r2, #23
 8005d88:	497f      	ldr	r1, [pc, #508]	; (8005f88 <nRF24_Transmit_Report+0x31c>)
 8005d8a:	487e      	ldr	r0, [pc, #504]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005d8c:	f7fd faaf 	bl	80032ee <HAL_UART_Transmit>
		break;
 8005d90:	e202      	b.n	8006198 <nRF24_Transmit_Report+0x52c>
	case Sel_B_Module2:
		Temp_reg = nRF24_ReadReg(Sel_B_Module2, nRF24_REG_FIFO_STATUS);
 8005d92:	2117      	movs	r1, #23
 8005d94:	2002      	movs	r0, #2
 8005d96:	f7fe f82f 	bl	8003df8 <nRF24_ReadReg>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*)"Transmit Report\n",16, 100);
 8005d9e:	2364      	movs	r3, #100	; 0x64
 8005da0:	2210      	movs	r2, #16
 8005da2:	4977      	ldr	r1, [pc, #476]	; (8005f80 <nRF24_Transmit_Report+0x314>)
 8005da4:	4877      	ldr	r0, [pc, #476]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005da6:	f7fd faa2 	bl	80032ee <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"**********************\n",23, 100);
 8005daa:	2364      	movs	r3, #100	; 0x64
 8005dac:	2217      	movs	r2, #23
 8005dae:	4976      	ldr	r1, [pc, #472]	; (8005f88 <nRF24_Transmit_Report+0x31c>)
 8005db0:	4874      	ldr	r0, [pc, #464]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005db2:	f7fd fa9c 	bl	80032ee <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"FIFO STATUS Register: ",22, 100);
 8005db6:	2364      	movs	r3, #100	; 0x64
 8005db8:	2216      	movs	r2, #22
 8005dba:	4974      	ldr	r1, [pc, #464]	; (8005f8c <nRF24_Transmit_Report+0x320>)
 8005dbc:	4871      	ldr	r0, [pc, #452]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005dbe:	f7fd fa96 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Temp_reg);
 8005dc2:	7bfb      	ldrb	r3, [r7, #15]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 fd15 	bl	80067f4 <nRF24_sendRegisterValue>

		if((Temp_reg & (1<<4)) != 0)
 8005dca:	7bfb      	ldrb	r3, [r7, #15]
 8005dcc:	f003 0310 	and.w	r3, r3, #16
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d006      	beq.n	8005de2 <nRF24_Transmit_Report+0x176>
		{
			HAL_UART_Transmit(&huart2, (uint8_t*)"TX FIFO empty\n",14, 100);
 8005dd4:	2364      	movs	r3, #100	; 0x64
 8005dd6:	220e      	movs	r2, #14
 8005dd8:	496d      	ldr	r1, [pc, #436]	; (8005f90 <nRF24_Transmit_Report+0x324>)
 8005dda:	486a      	ldr	r0, [pc, #424]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005ddc:	f7fd fa87 	bl	80032ee <HAL_UART_Transmit>
 8005de0:	e005      	b.n	8005dee <nRF24_Transmit_Report+0x182>
		} else
		{
			HAL_UART_Transmit(&huart2, (uint8_t*)"Data in TX FIFO\n",16, 100);
 8005de2:	2364      	movs	r3, #100	; 0x64
 8005de4:	2210      	movs	r2, #16
 8005de6:	496b      	ldr	r1, [pc, #428]	; (8005f94 <nRF24_Transmit_Report+0x328>)
 8005de8:	4866      	ldr	r0, [pc, #408]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005dea:	f7fd fa80 	bl	80032ee <HAL_UART_Transmit>
		}
		Temp_reg = nRF24_ReadReg(Sel_B_Module2, nRF24_REG_OBSERVE_TX);
 8005dee:	2108      	movs	r1, #8
 8005df0:	2002      	movs	r0, #2
 8005df2:	f7fe f801 	bl	8003df8 <nRF24_ReadReg>
 8005df6:	4603      	mov	r3, r0
 8005df8:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*)"OBSERVE TX Register: ",21, 100);
 8005dfa:	2364      	movs	r3, #100	; 0x64
 8005dfc:	2215      	movs	r2, #21
 8005dfe:	4966      	ldr	r1, [pc, #408]	; (8005f98 <nRF24_Transmit_Report+0x32c>)
 8005e00:	4860      	ldr	r0, [pc, #384]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005e02:	f7fd fa74 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Temp_reg);
 8005e06:	7bfb      	ldrb	r3, [r7, #15]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f000 fcf3 	bl	80067f4 <nRF24_sendRegisterValue>
		Temp_reg2 = Temp_reg>>4;
 8005e0e:	7bfb      	ldrb	r3, [r7, #15]
 8005e10:	091b      	lsrs	r3, r3, #4
 8005e12:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&huart2, (uint8_t*)"PLOS Count: ",12, 100);
 8005e14:	2364      	movs	r3, #100	; 0x64
 8005e16:	220c      	movs	r2, #12
 8005e18:	4960      	ldr	r1, [pc, #384]	; (8005f9c <nRF24_Transmit_Report+0x330>)
 8005e1a:	485a      	ldr	r0, [pc, #360]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005e1c:	f7fd fa67 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Temp_reg2);
 8005e20:	7bbb      	ldrb	r3, [r7, #14]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 fce6 	bl	80067f4 <nRF24_sendRegisterValue>
		Temp_reg = Temp_reg & 0x0F;
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
 8005e2a:	f003 030f 	and.w	r3, r3, #15
 8005e2e:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*)"ARC Count: ",11, 100);
 8005e30:	2364      	movs	r3, #100	; 0x64
 8005e32:	220b      	movs	r2, #11
 8005e34:	495a      	ldr	r1, [pc, #360]	; (8005fa0 <nRF24_Transmit_Report+0x334>)
 8005e36:	4853      	ldr	r0, [pc, #332]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005e38:	f7fd fa59 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Temp_reg);
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f000 fcd8 	bl	80067f4 <nRF24_sendRegisterValue>
		Temp_reg = nRF24_ReadReg(Sel_B_Module2, nRF24_REG_STATUS);
 8005e44:	2107      	movs	r1, #7
 8005e46:	2002      	movs	r0, #2
 8005e48:	f7fd ffd6 	bl	8003df8 <nRF24_ReadReg>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*)"STATUS Register: ",17, 100);
 8005e50:	2364      	movs	r3, #100	; 0x64
 8005e52:	2211      	movs	r2, #17
 8005e54:	4953      	ldr	r1, [pc, #332]	; (8005fa4 <nRF24_Transmit_Report+0x338>)
 8005e56:	484b      	ldr	r0, [pc, #300]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005e58:	f7fd fa49 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Temp_reg);
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f000 fcc8 	bl	80067f4 <nRF24_sendRegisterValue>
		if((Temp_reg & (1<<0)) != 0)
 8005e64:	7bfb      	ldrb	r3, [r7, #15]
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d005      	beq.n	8005e7a <nRF24_Transmit_Report+0x20e>
		{
			HAL_UART_Transmit(&huart2, (uint8_t*)"TX FIFO Full\n",13, 100);
 8005e6e:	2364      	movs	r3, #100	; 0x64
 8005e70:	220d      	movs	r2, #13
 8005e72:	494d      	ldr	r1, [pc, #308]	; (8005fa8 <nRF24_Transmit_Report+0x33c>)
 8005e74:	4843      	ldr	r0, [pc, #268]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005e76:	f7fd fa3a 	bl	80032ee <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, (uint8_t*)"**********************\n",23, 100);
 8005e7a:	2364      	movs	r3, #100	; 0x64
 8005e7c:	2217      	movs	r2, #23
 8005e7e:	4942      	ldr	r1, [pc, #264]	; (8005f88 <nRF24_Transmit_Report+0x31c>)
 8005e80:	4840      	ldr	r0, [pc, #256]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005e82:	f7fd fa34 	bl	80032ee <HAL_UART_Transmit>
		break;
 8005e86:	e187      	b.n	8006198 <nRF24_Transmit_Report+0x52c>
	case Sel_B_Module3:
		Temp_reg = nRF24_ReadReg(Sel_B_Module3, nRF24_REG_FIFO_STATUS);
 8005e88:	2117      	movs	r1, #23
 8005e8a:	2003      	movs	r0, #3
 8005e8c:	f7fd ffb4 	bl	8003df8 <nRF24_ReadReg>
 8005e90:	4603      	mov	r3, r0
 8005e92:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*)"Transmit Report\n",16, 100);
 8005e94:	2364      	movs	r3, #100	; 0x64
 8005e96:	2210      	movs	r2, #16
 8005e98:	4939      	ldr	r1, [pc, #228]	; (8005f80 <nRF24_Transmit_Report+0x314>)
 8005e9a:	483a      	ldr	r0, [pc, #232]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005e9c:	f7fd fa27 	bl	80032ee <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"**********************\n",23, 100);
 8005ea0:	2364      	movs	r3, #100	; 0x64
 8005ea2:	2217      	movs	r2, #23
 8005ea4:	4938      	ldr	r1, [pc, #224]	; (8005f88 <nRF24_Transmit_Report+0x31c>)
 8005ea6:	4837      	ldr	r0, [pc, #220]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005ea8:	f7fd fa21 	bl	80032ee <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"FIFO STATUS Register: ",22, 100);
 8005eac:	2364      	movs	r3, #100	; 0x64
 8005eae:	2216      	movs	r2, #22
 8005eb0:	4936      	ldr	r1, [pc, #216]	; (8005f8c <nRF24_Transmit_Report+0x320>)
 8005eb2:	4834      	ldr	r0, [pc, #208]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005eb4:	f7fd fa1b 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Temp_reg);
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 fc9a 	bl	80067f4 <nRF24_sendRegisterValue>

		if((Temp_reg & (1<<4)) != 0)
 8005ec0:	7bfb      	ldrb	r3, [r7, #15]
 8005ec2:	f003 0310 	and.w	r3, r3, #16
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d006      	beq.n	8005ed8 <nRF24_Transmit_Report+0x26c>
		{
			HAL_UART_Transmit(&huart2, (uint8_t*)"TX FIFO empty\n",14, 100);
 8005eca:	2364      	movs	r3, #100	; 0x64
 8005ecc:	220e      	movs	r2, #14
 8005ece:	4930      	ldr	r1, [pc, #192]	; (8005f90 <nRF24_Transmit_Report+0x324>)
 8005ed0:	482c      	ldr	r0, [pc, #176]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005ed2:	f7fd fa0c 	bl	80032ee <HAL_UART_Transmit>
 8005ed6:	e005      	b.n	8005ee4 <nRF24_Transmit_Report+0x278>
		} else
		{
			HAL_UART_Transmit(&huart2, (uint8_t*)"Data in TX FIFO\n",16, 100);
 8005ed8:	2364      	movs	r3, #100	; 0x64
 8005eda:	2210      	movs	r2, #16
 8005edc:	492d      	ldr	r1, [pc, #180]	; (8005f94 <nRF24_Transmit_Report+0x328>)
 8005ede:	4829      	ldr	r0, [pc, #164]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005ee0:	f7fd fa05 	bl	80032ee <HAL_UART_Transmit>
		}
		Temp_reg = nRF24_ReadReg(Sel_B_Module3, nRF24_REG_OBSERVE_TX);
 8005ee4:	2108      	movs	r1, #8
 8005ee6:	2003      	movs	r0, #3
 8005ee8:	f7fd ff86 	bl	8003df8 <nRF24_ReadReg>
 8005eec:	4603      	mov	r3, r0
 8005eee:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*)"OBSERVE TX Register: ",21, 100);
 8005ef0:	2364      	movs	r3, #100	; 0x64
 8005ef2:	2215      	movs	r2, #21
 8005ef4:	4928      	ldr	r1, [pc, #160]	; (8005f98 <nRF24_Transmit_Report+0x32c>)
 8005ef6:	4823      	ldr	r0, [pc, #140]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005ef8:	f7fd f9f9 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Temp_reg);
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 fc78 	bl	80067f4 <nRF24_sendRegisterValue>
		Temp_reg2 = Temp_reg>>4;
 8005f04:	7bfb      	ldrb	r3, [r7, #15]
 8005f06:	091b      	lsrs	r3, r3, #4
 8005f08:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&huart2, (uint8_t*)"PLOS Count: ",12, 100);
 8005f0a:	2364      	movs	r3, #100	; 0x64
 8005f0c:	220c      	movs	r2, #12
 8005f0e:	4923      	ldr	r1, [pc, #140]	; (8005f9c <nRF24_Transmit_Report+0x330>)
 8005f10:	481c      	ldr	r0, [pc, #112]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005f12:	f7fd f9ec 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Temp_reg2);
 8005f16:	7bbb      	ldrb	r3, [r7, #14]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f000 fc6b 	bl	80067f4 <nRF24_sendRegisterValue>
		Temp_reg = Temp_reg & 0x0F;
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
 8005f20:	f003 030f 	and.w	r3, r3, #15
 8005f24:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*)"ARC Count: ",11, 100);
 8005f26:	2364      	movs	r3, #100	; 0x64
 8005f28:	220b      	movs	r2, #11
 8005f2a:	491d      	ldr	r1, [pc, #116]	; (8005fa0 <nRF24_Transmit_Report+0x334>)
 8005f2c:	4815      	ldr	r0, [pc, #84]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005f2e:	f7fd f9de 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Temp_reg);
 8005f32:	7bfb      	ldrb	r3, [r7, #15]
 8005f34:	4618      	mov	r0, r3
 8005f36:	f000 fc5d 	bl	80067f4 <nRF24_sendRegisterValue>
		Temp_reg = nRF24_ReadReg(Sel_B_Module3, nRF24_REG_STATUS);
 8005f3a:	2107      	movs	r1, #7
 8005f3c:	2003      	movs	r0, #3
 8005f3e:	f7fd ff5b 	bl	8003df8 <nRF24_ReadReg>
 8005f42:	4603      	mov	r3, r0
 8005f44:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*)"STATUS Register: ",17, 100);
 8005f46:	2364      	movs	r3, #100	; 0x64
 8005f48:	2211      	movs	r2, #17
 8005f4a:	4916      	ldr	r1, [pc, #88]	; (8005fa4 <nRF24_Transmit_Report+0x338>)
 8005f4c:	480d      	ldr	r0, [pc, #52]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005f4e:	f7fd f9ce 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Temp_reg);
 8005f52:	7bfb      	ldrb	r3, [r7, #15]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f000 fc4d 	bl	80067f4 <nRF24_sendRegisterValue>
		if((Temp_reg & (1<<0)) != 0)
 8005f5a:	7bfb      	ldrb	r3, [r7, #15]
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d005      	beq.n	8005f70 <nRF24_Transmit_Report+0x304>
		{
			HAL_UART_Transmit(&huart2, (uint8_t*)"TX FIFO Full\n",13, 100);
 8005f64:	2364      	movs	r3, #100	; 0x64
 8005f66:	220d      	movs	r2, #13
 8005f68:	490f      	ldr	r1, [pc, #60]	; (8005fa8 <nRF24_Transmit_Report+0x33c>)
 8005f6a:	4806      	ldr	r0, [pc, #24]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005f6c:	f7fd f9bf 	bl	80032ee <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, (uint8_t*)"**********************\n",23, 100);
 8005f70:	2364      	movs	r3, #100	; 0x64
 8005f72:	2217      	movs	r2, #23
 8005f74:	4904      	ldr	r1, [pc, #16]	; (8005f88 <nRF24_Transmit_Report+0x31c>)
 8005f76:	4803      	ldr	r0, [pc, #12]	; (8005f84 <nRF24_Transmit_Report+0x318>)
 8005f78:	f7fd f9b9 	bl	80032ee <HAL_UART_Transmit>
		break;
 8005f7c:	e10c      	b.n	8006198 <nRF24_Transmit_Report+0x52c>
 8005f7e:	bf00      	nop
 8005f80:	0800728c 	.word	0x0800728c
 8005f84:	200001e8 	.word	0x200001e8
 8005f88:	080072a0 	.word	0x080072a0
 8005f8c:	080072b8 	.word	0x080072b8
 8005f90:	080072d0 	.word	0x080072d0
 8005f94:	080072e0 	.word	0x080072e0
 8005f98:	080072f4 	.word	0x080072f4
 8005f9c:	0800730c 	.word	0x0800730c
 8005fa0:	0800731c 	.word	0x0800731c
 8005fa4:	08007328 	.word	0x08007328
 8005fa8:	0800733c 	.word	0x0800733c
	case Sel_B_Module4:
		Temp_reg = nRF24_ReadReg(Sel_B_Module4, nRF24_REG_FIFO_STATUS);
 8005fac:	2117      	movs	r1, #23
 8005fae:	2004      	movs	r0, #4
 8005fb0:	f7fd ff22 	bl	8003df8 <nRF24_ReadReg>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*)"Transmit Report\n",16, 100);
 8005fb8:	2364      	movs	r3, #100	; 0x64
 8005fba:	2210      	movs	r2, #16
 8005fbc:	4978      	ldr	r1, [pc, #480]	; (80061a0 <nRF24_Transmit_Report+0x534>)
 8005fbe:	4879      	ldr	r0, [pc, #484]	; (80061a4 <nRF24_Transmit_Report+0x538>)
 8005fc0:	f7fd f995 	bl	80032ee <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"**********************\n",23, 100);
 8005fc4:	2364      	movs	r3, #100	; 0x64
 8005fc6:	2217      	movs	r2, #23
 8005fc8:	4977      	ldr	r1, [pc, #476]	; (80061a8 <nRF24_Transmit_Report+0x53c>)
 8005fca:	4876      	ldr	r0, [pc, #472]	; (80061a4 <nRF24_Transmit_Report+0x538>)
 8005fcc:	f7fd f98f 	bl	80032ee <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"FIFO STATUS Register: ",22, 100);
 8005fd0:	2364      	movs	r3, #100	; 0x64
 8005fd2:	2216      	movs	r2, #22
 8005fd4:	4975      	ldr	r1, [pc, #468]	; (80061ac <nRF24_Transmit_Report+0x540>)
 8005fd6:	4873      	ldr	r0, [pc, #460]	; (80061a4 <nRF24_Transmit_Report+0x538>)
 8005fd8:	f7fd f989 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Temp_reg);
 8005fdc:	7bfb      	ldrb	r3, [r7, #15]
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f000 fc08 	bl	80067f4 <nRF24_sendRegisterValue>

		if((Temp_reg & (1<<4)) != 0)
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
 8005fe6:	f003 0310 	and.w	r3, r3, #16
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d006      	beq.n	8005ffc <nRF24_Transmit_Report+0x390>
		{
			HAL_UART_Transmit(&huart2, (uint8_t*)"TX FIFO empty\n",14, 100);
 8005fee:	2364      	movs	r3, #100	; 0x64
 8005ff0:	220e      	movs	r2, #14
 8005ff2:	496f      	ldr	r1, [pc, #444]	; (80061b0 <nRF24_Transmit_Report+0x544>)
 8005ff4:	486b      	ldr	r0, [pc, #428]	; (80061a4 <nRF24_Transmit_Report+0x538>)
 8005ff6:	f7fd f97a 	bl	80032ee <HAL_UART_Transmit>
 8005ffa:	e005      	b.n	8006008 <nRF24_Transmit_Report+0x39c>
		} else
		{
			HAL_UART_Transmit(&huart2, (uint8_t*)"Data in TX FIFO\n",16, 100);
 8005ffc:	2364      	movs	r3, #100	; 0x64
 8005ffe:	2210      	movs	r2, #16
 8006000:	496c      	ldr	r1, [pc, #432]	; (80061b4 <nRF24_Transmit_Report+0x548>)
 8006002:	4868      	ldr	r0, [pc, #416]	; (80061a4 <nRF24_Transmit_Report+0x538>)
 8006004:	f7fd f973 	bl	80032ee <HAL_UART_Transmit>
		}
		Temp_reg = nRF24_ReadReg(Sel_B_Module4, nRF24_REG_OBSERVE_TX);
 8006008:	2108      	movs	r1, #8
 800600a:	2004      	movs	r0, #4
 800600c:	f7fd fef4 	bl	8003df8 <nRF24_ReadReg>
 8006010:	4603      	mov	r3, r0
 8006012:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*)"OBSERVE TX Register: ",21, 100);
 8006014:	2364      	movs	r3, #100	; 0x64
 8006016:	2215      	movs	r2, #21
 8006018:	4967      	ldr	r1, [pc, #412]	; (80061b8 <nRF24_Transmit_Report+0x54c>)
 800601a:	4862      	ldr	r0, [pc, #392]	; (80061a4 <nRF24_Transmit_Report+0x538>)
 800601c:	f7fd f967 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Temp_reg);
 8006020:	7bfb      	ldrb	r3, [r7, #15]
 8006022:	4618      	mov	r0, r3
 8006024:	f000 fbe6 	bl	80067f4 <nRF24_sendRegisterValue>
		Temp_reg2 = Temp_reg>>4;
 8006028:	7bfb      	ldrb	r3, [r7, #15]
 800602a:	091b      	lsrs	r3, r3, #4
 800602c:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&huart2, (uint8_t*)"PLOS Count: ",12, 100);
 800602e:	2364      	movs	r3, #100	; 0x64
 8006030:	220c      	movs	r2, #12
 8006032:	4962      	ldr	r1, [pc, #392]	; (80061bc <nRF24_Transmit_Report+0x550>)
 8006034:	485b      	ldr	r0, [pc, #364]	; (80061a4 <nRF24_Transmit_Report+0x538>)
 8006036:	f7fd f95a 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Temp_reg2);
 800603a:	7bbb      	ldrb	r3, [r7, #14]
 800603c:	4618      	mov	r0, r3
 800603e:	f000 fbd9 	bl	80067f4 <nRF24_sendRegisterValue>
		Temp_reg = Temp_reg & 0x0F;
 8006042:	7bfb      	ldrb	r3, [r7, #15]
 8006044:	f003 030f 	and.w	r3, r3, #15
 8006048:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*)"ARC Count: ",11, 100);
 800604a:	2364      	movs	r3, #100	; 0x64
 800604c:	220b      	movs	r2, #11
 800604e:	495c      	ldr	r1, [pc, #368]	; (80061c0 <nRF24_Transmit_Report+0x554>)
 8006050:	4854      	ldr	r0, [pc, #336]	; (80061a4 <nRF24_Transmit_Report+0x538>)
 8006052:	f7fd f94c 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Temp_reg);
 8006056:	7bfb      	ldrb	r3, [r7, #15]
 8006058:	4618      	mov	r0, r3
 800605a:	f000 fbcb 	bl	80067f4 <nRF24_sendRegisterValue>
		Temp_reg = nRF24_ReadReg(Sel_B_Module4, nRF24_REG_STATUS);
 800605e:	2107      	movs	r1, #7
 8006060:	2004      	movs	r0, #4
 8006062:	f7fd fec9 	bl	8003df8 <nRF24_ReadReg>
 8006066:	4603      	mov	r3, r0
 8006068:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*)"STATUS Register: ",17, 100);
 800606a:	2364      	movs	r3, #100	; 0x64
 800606c:	2211      	movs	r2, #17
 800606e:	4955      	ldr	r1, [pc, #340]	; (80061c4 <nRF24_Transmit_Report+0x558>)
 8006070:	484c      	ldr	r0, [pc, #304]	; (80061a4 <nRF24_Transmit_Report+0x538>)
 8006072:	f7fd f93c 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Temp_reg);
 8006076:	7bfb      	ldrb	r3, [r7, #15]
 8006078:	4618      	mov	r0, r3
 800607a:	f000 fbbb 	bl	80067f4 <nRF24_sendRegisterValue>
		if((Temp_reg & (1<<0)) != 0)
 800607e:	7bfb      	ldrb	r3, [r7, #15]
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b00      	cmp	r3, #0
 8006086:	d005      	beq.n	8006094 <nRF24_Transmit_Report+0x428>
		{
			HAL_UART_Transmit(&huart2, (uint8_t*)"TX FIFO Full\n",13, 100);
 8006088:	2364      	movs	r3, #100	; 0x64
 800608a:	220d      	movs	r2, #13
 800608c:	494e      	ldr	r1, [pc, #312]	; (80061c8 <nRF24_Transmit_Report+0x55c>)
 800608e:	4845      	ldr	r0, [pc, #276]	; (80061a4 <nRF24_Transmit_Report+0x538>)
 8006090:	f7fd f92d 	bl	80032ee <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, (uint8_t*)"**********************\n",23, 100);
 8006094:	2364      	movs	r3, #100	; 0x64
 8006096:	2217      	movs	r2, #23
 8006098:	4943      	ldr	r1, [pc, #268]	; (80061a8 <nRF24_Transmit_Report+0x53c>)
 800609a:	4842      	ldr	r0, [pc, #264]	; (80061a4 <nRF24_Transmit_Report+0x538>)
 800609c:	f7fd f927 	bl	80032ee <HAL_UART_Transmit>
		break;
 80060a0:	e07a      	b.n	8006198 <nRF24_Transmit_Report+0x52c>
	case Sel_EL_Module:
		Temp_reg = nRF24_ReadReg(Sel_EL_Module, nRF24_REG_FIFO_STATUS);
 80060a2:	2117      	movs	r1, #23
 80060a4:	2005      	movs	r0, #5
 80060a6:	f7fd fea7 	bl	8003df8 <nRF24_ReadReg>
 80060aa:	4603      	mov	r3, r0
 80060ac:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*)"Transmit Report\n",16, 100);
 80060ae:	2364      	movs	r3, #100	; 0x64
 80060b0:	2210      	movs	r2, #16
 80060b2:	493b      	ldr	r1, [pc, #236]	; (80061a0 <nRF24_Transmit_Report+0x534>)
 80060b4:	483b      	ldr	r0, [pc, #236]	; (80061a4 <nRF24_Transmit_Report+0x538>)
 80060b6:	f7fd f91a 	bl	80032ee <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"**********************\n",23, 100);
 80060ba:	2364      	movs	r3, #100	; 0x64
 80060bc:	2217      	movs	r2, #23
 80060be:	493a      	ldr	r1, [pc, #232]	; (80061a8 <nRF24_Transmit_Report+0x53c>)
 80060c0:	4838      	ldr	r0, [pc, #224]	; (80061a4 <nRF24_Transmit_Report+0x538>)
 80060c2:	f7fd f914 	bl	80032ee <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"FIFO STATUS Register: ",22, 100);
 80060c6:	2364      	movs	r3, #100	; 0x64
 80060c8:	2216      	movs	r2, #22
 80060ca:	4938      	ldr	r1, [pc, #224]	; (80061ac <nRF24_Transmit_Report+0x540>)
 80060cc:	4835      	ldr	r0, [pc, #212]	; (80061a4 <nRF24_Transmit_Report+0x538>)
 80060ce:	f7fd f90e 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Temp_reg);
 80060d2:	7bfb      	ldrb	r3, [r7, #15]
 80060d4:	4618      	mov	r0, r3
 80060d6:	f000 fb8d 	bl	80067f4 <nRF24_sendRegisterValue>

		if((Temp_reg & (1<<4)) != 0)
 80060da:	7bfb      	ldrb	r3, [r7, #15]
 80060dc:	f003 0310 	and.w	r3, r3, #16
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d006      	beq.n	80060f2 <nRF24_Transmit_Report+0x486>
		{
			HAL_UART_Transmit(&huart2, (uint8_t*)"TX FIFO empty\n",14, 100);
 80060e4:	2364      	movs	r3, #100	; 0x64
 80060e6:	220e      	movs	r2, #14
 80060e8:	4931      	ldr	r1, [pc, #196]	; (80061b0 <nRF24_Transmit_Report+0x544>)
 80060ea:	482e      	ldr	r0, [pc, #184]	; (80061a4 <nRF24_Transmit_Report+0x538>)
 80060ec:	f7fd f8ff 	bl	80032ee <HAL_UART_Transmit>
 80060f0:	e005      	b.n	80060fe <nRF24_Transmit_Report+0x492>
		} else
		{
			HAL_UART_Transmit(&huart2, (uint8_t*)"Data in TX FIFO\n",16, 100);
 80060f2:	2364      	movs	r3, #100	; 0x64
 80060f4:	2210      	movs	r2, #16
 80060f6:	492f      	ldr	r1, [pc, #188]	; (80061b4 <nRF24_Transmit_Report+0x548>)
 80060f8:	482a      	ldr	r0, [pc, #168]	; (80061a4 <nRF24_Transmit_Report+0x538>)
 80060fa:	f7fd f8f8 	bl	80032ee <HAL_UART_Transmit>
		}
		Temp_reg = nRF24_ReadReg(Sel_EL_Module, nRF24_REG_OBSERVE_TX);
 80060fe:	2108      	movs	r1, #8
 8006100:	2005      	movs	r0, #5
 8006102:	f7fd fe79 	bl	8003df8 <nRF24_ReadReg>
 8006106:	4603      	mov	r3, r0
 8006108:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*)"OBSERVE TX Register: ",21, 100);
 800610a:	2364      	movs	r3, #100	; 0x64
 800610c:	2215      	movs	r2, #21
 800610e:	492a      	ldr	r1, [pc, #168]	; (80061b8 <nRF24_Transmit_Report+0x54c>)
 8006110:	4824      	ldr	r0, [pc, #144]	; (80061a4 <nRF24_Transmit_Report+0x538>)
 8006112:	f7fd f8ec 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Temp_reg);
 8006116:	7bfb      	ldrb	r3, [r7, #15]
 8006118:	4618      	mov	r0, r3
 800611a:	f000 fb6b 	bl	80067f4 <nRF24_sendRegisterValue>
		Temp_reg2 = Temp_reg>>4;
 800611e:	7bfb      	ldrb	r3, [r7, #15]
 8006120:	091b      	lsrs	r3, r3, #4
 8006122:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&huart2, (uint8_t*)"PLOS Count: ",12, 100);
 8006124:	2364      	movs	r3, #100	; 0x64
 8006126:	220c      	movs	r2, #12
 8006128:	4924      	ldr	r1, [pc, #144]	; (80061bc <nRF24_Transmit_Report+0x550>)
 800612a:	481e      	ldr	r0, [pc, #120]	; (80061a4 <nRF24_Transmit_Report+0x538>)
 800612c:	f7fd f8df 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Temp_reg2);
 8006130:	7bbb      	ldrb	r3, [r7, #14]
 8006132:	4618      	mov	r0, r3
 8006134:	f000 fb5e 	bl	80067f4 <nRF24_sendRegisterValue>
		Temp_reg = Temp_reg & 0x0F;
 8006138:	7bfb      	ldrb	r3, [r7, #15]
 800613a:	f003 030f 	and.w	r3, r3, #15
 800613e:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*)"ARC Count: ",11, 100);
 8006140:	2364      	movs	r3, #100	; 0x64
 8006142:	220b      	movs	r2, #11
 8006144:	491e      	ldr	r1, [pc, #120]	; (80061c0 <nRF24_Transmit_Report+0x554>)
 8006146:	4817      	ldr	r0, [pc, #92]	; (80061a4 <nRF24_Transmit_Report+0x538>)
 8006148:	f7fd f8d1 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Temp_reg);
 800614c:	7bfb      	ldrb	r3, [r7, #15]
 800614e:	4618      	mov	r0, r3
 8006150:	f000 fb50 	bl	80067f4 <nRF24_sendRegisterValue>
		Temp_reg = nRF24_ReadReg(Sel_EL_Module, nRF24_REG_STATUS);
 8006154:	2107      	movs	r1, #7
 8006156:	2005      	movs	r0, #5
 8006158:	f7fd fe4e 	bl	8003df8 <nRF24_ReadReg>
 800615c:	4603      	mov	r3, r0
 800615e:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*)"STATUS Register: ",17, 100);
 8006160:	2364      	movs	r3, #100	; 0x64
 8006162:	2211      	movs	r2, #17
 8006164:	4917      	ldr	r1, [pc, #92]	; (80061c4 <nRF24_Transmit_Report+0x558>)
 8006166:	480f      	ldr	r0, [pc, #60]	; (80061a4 <nRF24_Transmit_Report+0x538>)
 8006168:	f7fd f8c1 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Temp_reg);
 800616c:	7bfb      	ldrb	r3, [r7, #15]
 800616e:	4618      	mov	r0, r3
 8006170:	f000 fb40 	bl	80067f4 <nRF24_sendRegisterValue>
		if((Temp_reg & (1<<0)) != 0)
 8006174:	7bfb      	ldrb	r3, [r7, #15]
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	2b00      	cmp	r3, #0
 800617c:	d005      	beq.n	800618a <nRF24_Transmit_Report+0x51e>
		{
			HAL_UART_Transmit(&huart2, (uint8_t*)"TX FIFO Full\n",13, 100);
 800617e:	2364      	movs	r3, #100	; 0x64
 8006180:	220d      	movs	r2, #13
 8006182:	4911      	ldr	r1, [pc, #68]	; (80061c8 <nRF24_Transmit_Report+0x55c>)
 8006184:	4807      	ldr	r0, [pc, #28]	; (80061a4 <nRF24_Transmit_Report+0x538>)
 8006186:	f7fd f8b2 	bl	80032ee <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, (uint8_t*)"**********************\n",23, 100);
 800618a:	2364      	movs	r3, #100	; 0x64
 800618c:	2217      	movs	r2, #23
 800618e:	4906      	ldr	r1, [pc, #24]	; (80061a8 <nRF24_Transmit_Report+0x53c>)
 8006190:	4804      	ldr	r0, [pc, #16]	; (80061a4 <nRF24_Transmit_Report+0x538>)
 8006192:	f7fd f8ac 	bl	80032ee <HAL_UART_Transmit>
		break;
 8006196:	bf00      	nop
	}

}
 8006198:	bf00      	nop
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	0800728c 	.word	0x0800728c
 80061a4:	200001e8 	.word	0x200001e8
 80061a8:	080072a0 	.word	0x080072a0
 80061ac:	080072b8 	.word	0x080072b8
 80061b0:	080072d0 	.word	0x080072d0
 80061b4:	080072e0 	.word	0x080072e0
 80061b8:	080072f4 	.word	0x080072f4
 80061bc:	0800730c 	.word	0x0800730c
 80061c0:	0800731c 	.word	0x0800731c
 80061c4:	08007328 	.word	0x08007328
 80061c8:	0800733c 	.word	0x0800733c

080061cc <nRF24_Receive_Report>:

void nRF24_Receive_Report(uint16_t Sel_CSN_Pin)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	4603      	mov	r3, r0
 80061d4:	80fb      	strh	r3, [r7, #6]
	uint8_t FIFO_reg,STATUS_reg;

	switch(Sel_CSN_Pin)
 80061d6:	88fb      	ldrh	r3, [r7, #6]
 80061d8:	3b01      	subs	r3, #1
 80061da:	2b04      	cmp	r3, #4
 80061dc:	f200 808b 	bhi.w	80062f6 <nRF24_Receive_Report+0x12a>
 80061e0:	a201      	add	r2, pc, #4	; (adr r2, 80061e8 <nRF24_Receive_Report+0x1c>)
 80061e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e6:	bf00      	nop
 80061e8:	080061fd 	.word	0x080061fd
 80061ec:	0800622f 	.word	0x0800622f
 80061f0:	08006261 	.word	0x08006261
 80061f4:	08006293 	.word	0x08006293
 80061f8:	080062c5 	.word	0x080062c5
	{
	case Sel_B_Module1:
		HAL_UART_Transmit(&huart2, (uint8_t*)"**********************\n",23, 100);
 80061fc:	2364      	movs	r3, #100	; 0x64
 80061fe:	2217      	movs	r2, #23
 8006200:	4969      	ldr	r1, [pc, #420]	; (80063a8 <nRF24_Receive_Report+0x1dc>)
 8006202:	486a      	ldr	r0, [pc, #424]	; (80063ac <nRF24_Receive_Report+0x1e0>)
 8006204:	f7fd f873 	bl	80032ee <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"Module1 receive report\n",23, 100);
 8006208:	2364      	movs	r3, #100	; 0x64
 800620a:	2217      	movs	r2, #23
 800620c:	4968      	ldr	r1, [pc, #416]	; (80063b0 <nRF24_Receive_Report+0x1e4>)
 800620e:	4867      	ldr	r0, [pc, #412]	; (80063ac <nRF24_Receive_Report+0x1e0>)
 8006210:	f7fd f86d 	bl	80032ee <HAL_UART_Transmit>
		FIFO_reg = nRF24_ReadReg(Sel_B_Module1, nRF24_REG_FIFO_STATUS);
 8006214:	2117      	movs	r1, #23
 8006216:	2001      	movs	r0, #1
 8006218:	f7fd fdee 	bl	8003df8 <nRF24_ReadReg>
 800621c:	4603      	mov	r3, r0
 800621e:	73fb      	strb	r3, [r7, #15]
		STATUS_reg = nRF24_ReadReg(Sel_B_Module1, nRF24_REG_STATUS);
 8006220:	2107      	movs	r1, #7
 8006222:	2001      	movs	r0, #1
 8006224:	f7fd fde8 	bl	8003df8 <nRF24_ReadReg>
 8006228:	4603      	mov	r3, r0
 800622a:	73bb      	strb	r3, [r7, #14]
		break;
 800622c:	e064      	b.n	80062f8 <nRF24_Receive_Report+0x12c>
	case Sel_B_Module2:
		HAL_UART_Transmit(&huart2, (uint8_t*)"**********************\n",23, 100);
 800622e:	2364      	movs	r3, #100	; 0x64
 8006230:	2217      	movs	r2, #23
 8006232:	495d      	ldr	r1, [pc, #372]	; (80063a8 <nRF24_Receive_Report+0x1dc>)
 8006234:	485d      	ldr	r0, [pc, #372]	; (80063ac <nRF24_Receive_Report+0x1e0>)
 8006236:	f7fd f85a 	bl	80032ee <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"Module2 receive report\n",23, 100);
 800623a:	2364      	movs	r3, #100	; 0x64
 800623c:	2217      	movs	r2, #23
 800623e:	495d      	ldr	r1, [pc, #372]	; (80063b4 <nRF24_Receive_Report+0x1e8>)
 8006240:	485a      	ldr	r0, [pc, #360]	; (80063ac <nRF24_Receive_Report+0x1e0>)
 8006242:	f7fd f854 	bl	80032ee <HAL_UART_Transmit>
		FIFO_reg = nRF24_ReadReg(Sel_B_Module2, nRF24_REG_FIFO_STATUS);
 8006246:	2117      	movs	r1, #23
 8006248:	2002      	movs	r0, #2
 800624a:	f7fd fdd5 	bl	8003df8 <nRF24_ReadReg>
 800624e:	4603      	mov	r3, r0
 8006250:	73fb      	strb	r3, [r7, #15]
		STATUS_reg = nRF24_ReadReg(Sel_B_Module2, nRF24_REG_STATUS);
 8006252:	2107      	movs	r1, #7
 8006254:	2002      	movs	r0, #2
 8006256:	f7fd fdcf 	bl	8003df8 <nRF24_ReadReg>
 800625a:	4603      	mov	r3, r0
 800625c:	73bb      	strb	r3, [r7, #14]
		break;
 800625e:	e04b      	b.n	80062f8 <nRF24_Receive_Report+0x12c>
	case Sel_B_Module3:
		HAL_UART_Transmit(&huart2, (uint8_t*)"**********************\n",23, 100);
 8006260:	2364      	movs	r3, #100	; 0x64
 8006262:	2217      	movs	r2, #23
 8006264:	4950      	ldr	r1, [pc, #320]	; (80063a8 <nRF24_Receive_Report+0x1dc>)
 8006266:	4851      	ldr	r0, [pc, #324]	; (80063ac <nRF24_Receive_Report+0x1e0>)
 8006268:	f7fd f841 	bl	80032ee <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"Module3 receive report\n",23, 100);
 800626c:	2364      	movs	r3, #100	; 0x64
 800626e:	2217      	movs	r2, #23
 8006270:	4951      	ldr	r1, [pc, #324]	; (80063b8 <nRF24_Receive_Report+0x1ec>)
 8006272:	484e      	ldr	r0, [pc, #312]	; (80063ac <nRF24_Receive_Report+0x1e0>)
 8006274:	f7fd f83b 	bl	80032ee <HAL_UART_Transmit>
		FIFO_reg = nRF24_ReadReg(Sel_B_Module3, nRF24_REG_FIFO_STATUS);
 8006278:	2117      	movs	r1, #23
 800627a:	2003      	movs	r0, #3
 800627c:	f7fd fdbc 	bl	8003df8 <nRF24_ReadReg>
 8006280:	4603      	mov	r3, r0
 8006282:	73fb      	strb	r3, [r7, #15]
		STATUS_reg = nRF24_ReadReg(Sel_B_Module3, nRF24_REG_STATUS);
 8006284:	2107      	movs	r1, #7
 8006286:	2003      	movs	r0, #3
 8006288:	f7fd fdb6 	bl	8003df8 <nRF24_ReadReg>
 800628c:	4603      	mov	r3, r0
 800628e:	73bb      	strb	r3, [r7, #14]
		break;
 8006290:	e032      	b.n	80062f8 <nRF24_Receive_Report+0x12c>
	case Sel_B_Module4:
		HAL_UART_Transmit(&huart2, (uint8_t*)"**********************\n",23, 100);
 8006292:	2364      	movs	r3, #100	; 0x64
 8006294:	2217      	movs	r2, #23
 8006296:	4944      	ldr	r1, [pc, #272]	; (80063a8 <nRF24_Receive_Report+0x1dc>)
 8006298:	4844      	ldr	r0, [pc, #272]	; (80063ac <nRF24_Receive_Report+0x1e0>)
 800629a:	f7fd f828 	bl	80032ee <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"Module4 receive report\n",23, 100);
 800629e:	2364      	movs	r3, #100	; 0x64
 80062a0:	2217      	movs	r2, #23
 80062a2:	4946      	ldr	r1, [pc, #280]	; (80063bc <nRF24_Receive_Report+0x1f0>)
 80062a4:	4841      	ldr	r0, [pc, #260]	; (80063ac <nRF24_Receive_Report+0x1e0>)
 80062a6:	f7fd f822 	bl	80032ee <HAL_UART_Transmit>
		FIFO_reg = nRF24_ReadReg(Sel_B_Module4, nRF24_REG_FIFO_STATUS);
 80062aa:	2117      	movs	r1, #23
 80062ac:	2004      	movs	r0, #4
 80062ae:	f7fd fda3 	bl	8003df8 <nRF24_ReadReg>
 80062b2:	4603      	mov	r3, r0
 80062b4:	73fb      	strb	r3, [r7, #15]
		STATUS_reg = nRF24_ReadReg(Sel_B_Module4, nRF24_REG_STATUS);
 80062b6:	2107      	movs	r1, #7
 80062b8:	2004      	movs	r0, #4
 80062ba:	f7fd fd9d 	bl	8003df8 <nRF24_ReadReg>
 80062be:	4603      	mov	r3, r0
 80062c0:	73bb      	strb	r3, [r7, #14]
		break;
 80062c2:	e019      	b.n	80062f8 <nRF24_Receive_Report+0x12c>
	case Sel_EL_Module:
		HAL_UART_Transmit(&huart2, (uint8_t*)"**********************\n",23, 100);
 80062c4:	2364      	movs	r3, #100	; 0x64
 80062c6:	2217      	movs	r2, #23
 80062c8:	4937      	ldr	r1, [pc, #220]	; (80063a8 <nRF24_Receive_Report+0x1dc>)
 80062ca:	4838      	ldr	r0, [pc, #224]	; (80063ac <nRF24_Receive_Report+0x1e0>)
 80062cc:	f7fd f80f 	bl	80032ee <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"EdgeLED Module receive report\n",30, 100);
 80062d0:	2364      	movs	r3, #100	; 0x64
 80062d2:	221e      	movs	r2, #30
 80062d4:	493a      	ldr	r1, [pc, #232]	; (80063c0 <nRF24_Receive_Report+0x1f4>)
 80062d6:	4835      	ldr	r0, [pc, #212]	; (80063ac <nRF24_Receive_Report+0x1e0>)
 80062d8:	f7fd f809 	bl	80032ee <HAL_UART_Transmit>
		FIFO_reg = nRF24_ReadReg(Sel_EL_Module, nRF24_REG_FIFO_STATUS);
 80062dc:	2117      	movs	r1, #23
 80062de:	2005      	movs	r0, #5
 80062e0:	f7fd fd8a 	bl	8003df8 <nRF24_ReadReg>
 80062e4:	4603      	mov	r3, r0
 80062e6:	73fb      	strb	r3, [r7, #15]
		STATUS_reg = nRF24_ReadReg(Sel_EL_Module, nRF24_REG_STATUS);
 80062e8:	2107      	movs	r1, #7
 80062ea:	2005      	movs	r0, #5
 80062ec:	f7fd fd84 	bl	8003df8 <nRF24_ReadReg>
 80062f0:	4603      	mov	r3, r0
 80062f2:	73bb      	strb	r3, [r7, #14]
		break;
 80062f4:	e000      	b.n	80062f8 <nRF24_Receive_Report+0x12c>
	default:
		break;
 80062f6:	bf00      	nop
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"FIFO STATUS Register: ",22, 100);
 80062f8:	2364      	movs	r3, #100	; 0x64
 80062fa:	2216      	movs	r2, #22
 80062fc:	4931      	ldr	r1, [pc, #196]	; (80063c4 <nRF24_Receive_Report+0x1f8>)
 80062fe:	482b      	ldr	r0, [pc, #172]	; (80063ac <nRF24_Receive_Report+0x1e0>)
 8006300:	f7fc fff5 	bl	80032ee <HAL_UART_Transmit>
	nRF24_sendRegisterValue(FIFO_reg);
 8006304:	7bfb      	ldrb	r3, [r7, #15]
 8006306:	4618      	mov	r0, r3
 8006308:	f000 fa74 	bl	80067f4 <nRF24_sendRegisterValue>
	if((FIFO_reg & (1<<0)) != 0)
 800630c:	7bfb      	ldrb	r3, [r7, #15]
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b00      	cmp	r3, #0
 8006314:	d006      	beq.n	8006324 <nRF24_Receive_Report+0x158>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)"RX FIFO empty\n",14, 100);
 8006316:	2364      	movs	r3, #100	; 0x64
 8006318:	220e      	movs	r2, #14
 800631a:	492b      	ldr	r1, [pc, #172]	; (80063c8 <nRF24_Receive_Report+0x1fc>)
 800631c:	4823      	ldr	r0, [pc, #140]	; (80063ac <nRF24_Receive_Report+0x1e0>)
 800631e:	f7fc ffe6 	bl	80032ee <HAL_UART_Transmit>
 8006322:	e005      	b.n	8006330 <nRF24_Receive_Report+0x164>
	} else
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)"Data in RX FIFO\n",16, 100);
 8006324:	2364      	movs	r3, #100	; 0x64
 8006326:	2210      	movs	r2, #16
 8006328:	4928      	ldr	r1, [pc, #160]	; (80063cc <nRF24_Receive_Report+0x200>)
 800632a:	4820      	ldr	r0, [pc, #128]	; (80063ac <nRF24_Receive_Report+0x1e0>)
 800632c:	f7fc ffdf 	bl	80032ee <HAL_UART_Transmit>
	}
	if((FIFO_reg & (1<<1)) != 0)
 8006330:	7bfb      	ldrb	r3, [r7, #15]
 8006332:	f003 0302 	and.w	r3, r3, #2
 8006336:	2b00      	cmp	r3, #0
 8006338:	d006      	beq.n	8006348 <nRF24_Receive_Report+0x17c>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)"RX FIFO Full\n",13, 100);
 800633a:	2364      	movs	r3, #100	; 0x64
 800633c:	220d      	movs	r2, #13
 800633e:	4924      	ldr	r1, [pc, #144]	; (80063d0 <nRF24_Receive_Report+0x204>)
 8006340:	481a      	ldr	r0, [pc, #104]	; (80063ac <nRF24_Receive_Report+0x1e0>)
 8006342:	f7fc ffd4 	bl	80032ee <HAL_UART_Transmit>
 8006346:	e005      	b.n	8006354 <nRF24_Receive_Report+0x188>
	} else
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)"Available locations in RX FIFO\n",31, 100);
 8006348:	2364      	movs	r3, #100	; 0x64
 800634a:	221f      	movs	r2, #31
 800634c:	4921      	ldr	r1, [pc, #132]	; (80063d4 <nRF24_Receive_Report+0x208>)
 800634e:	4817      	ldr	r0, [pc, #92]	; (80063ac <nRF24_Receive_Report+0x1e0>)
 8006350:	f7fc ffcd 	bl	80032ee <HAL_UART_Transmit>
	}


	HAL_UART_Transmit(&huart2, (uint8_t*)"STATUS Register: ",17, 100);
 8006354:	2364      	movs	r3, #100	; 0x64
 8006356:	2211      	movs	r2, #17
 8006358:	491f      	ldr	r1, [pc, #124]	; (80063d8 <nRF24_Receive_Report+0x20c>)
 800635a:	4814      	ldr	r0, [pc, #80]	; (80063ac <nRF24_Receive_Report+0x1e0>)
 800635c:	f7fc ffc7 	bl	80032ee <HAL_UART_Transmit>
	nRF24_sendRegisterValue(STATUS_reg);
 8006360:	7bbb      	ldrb	r3, [r7, #14]
 8006362:	4618      	mov	r0, r3
 8006364:	f000 fa46 	bl	80067f4 <nRF24_sendRegisterValue>
	if((STATUS_reg & (1<<6)) != 0)
 8006368:	7bbb      	ldrb	r3, [r7, #14]
 800636a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800636e:	2b00      	cmp	r3, #0
 8006370:	d005      	beq.n	800637e <nRF24_Receive_Report+0x1b2>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)"Data Ready in RX FIFO\n\n",14, 100);
 8006372:	2364      	movs	r3, #100	; 0x64
 8006374:	220e      	movs	r2, #14
 8006376:	4919      	ldr	r1, [pc, #100]	; (80063dc <nRF24_Receive_Report+0x210>)
 8006378:	480c      	ldr	r0, [pc, #48]	; (80063ac <nRF24_Receive_Report+0x1e0>)
 800637a:	f7fc ffb8 	bl	80032ee <HAL_UART_Transmit>
	}
	STATUS_reg = (STATUS_reg>>1) & 0x07;
 800637e:	7bbb      	ldrb	r3, [r7, #14]
 8006380:	085b      	lsrs	r3, r3, #1
 8006382:	b2db      	uxtb	r3, r3
 8006384:	f003 0307 	and.w	r3, r3, #7
 8006388:	73bb      	strb	r3, [r7, #14]
	HAL_UART_Transmit(&huart2, (uint8_t*)"Data in Pipe Number: ",21, 100);
 800638a:	2364      	movs	r3, #100	; 0x64
 800638c:	2215      	movs	r2, #21
 800638e:	4914      	ldr	r1, [pc, #80]	; (80063e0 <nRF24_Receive_Report+0x214>)
 8006390:	4806      	ldr	r0, [pc, #24]	; (80063ac <nRF24_Receive_Report+0x1e0>)
 8006392:	f7fc ffac 	bl	80032ee <HAL_UART_Transmit>
	nRF24_sendRegisterValue(STATUS_reg);
 8006396:	7bbb      	ldrb	r3, [r7, #14]
 8006398:	4618      	mov	r0, r3
 800639a:	f000 fa2b 	bl	80067f4 <nRF24_sendRegisterValue>

}
 800639e:	bf00      	nop
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	080072a0 	.word	0x080072a0
 80063ac:	200001e8 	.word	0x200001e8
 80063b0:	0800734c 	.word	0x0800734c
 80063b4:	08007364 	.word	0x08007364
 80063b8:	0800737c 	.word	0x0800737c
 80063bc:	08007394 	.word	0x08007394
 80063c0:	080073ac 	.word	0x080073ac
 80063c4:	080072b8 	.word	0x080072b8
 80063c8:	080073cc 	.word	0x080073cc
 80063cc:	080073dc 	.word	0x080073dc
 80063d0:	080073f0 	.word	0x080073f0
 80063d4:	08007400 	.word	0x08007400
 80063d8:	08007328 	.word	0x08007328
 80063dc:	08007420 	.word	0x08007420
 80063e0:	08007438 	.word	0x08007438

080063e4 <nRF24_Register_Display>:


void nRF24_Register_Display(uint16_t Sel_CSN_Pin)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b08c      	sub	sp, #48	; 0x30
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	4603      	mov	r3, r0
 80063ec:	80fb      	strh	r3, [r7, #6]
	uint8_t Reg_Data[40];

	switch(Sel_CSN_Pin)
 80063ee:	88fb      	ldrh	r3, [r7, #6]
 80063f0:	3b01      	subs	r3, #1
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	f200 8083 	bhi.w	80064fe <nRF24_Register_Display+0x11a>
 80063f8:	a201      	add	r2, pc, #4	; (adr r2, 8006400 <nRF24_Register_Display+0x1c>)
 80063fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fe:	bf00      	nop
 8006400:	08006415 	.word	0x08006415
 8006404:	0800643f 	.word	0x0800643f
 8006408:	08006469 	.word	0x08006469
 800640c:	08006493 	.word	0x08006493
 8006410:	080064d5 	.word	0x080064d5
	{
	case Sel_B_Module1:
		nRF24_ReadAllRegs(Sel_B_Module1, Reg_Data);
 8006414:	f107 0308 	add.w	r3, r7, #8
 8006418:	4619      	mov	r1, r3
 800641a:	2001      	movs	r0, #1
 800641c:	f7ff f93c 	bl	8005698 <nRF24_ReadAllRegs>
		HAL_UART_Transmit(&huart2, (uint8_t*)"Module1 Registers\n",18, HAL_MAX_DELAY);
 8006420:	f04f 33ff 	mov.w	r3, #4294967295
 8006424:	2212      	movs	r2, #18
 8006426:	4925      	ldr	r1, [pc, #148]	; (80064bc <nRF24_Register_Display+0xd8>)
 8006428:	4825      	ldr	r0, [pc, #148]	; (80064c0 <nRF24_Register_Display+0xdc>)
 800642a:	f7fc ff60 	bl	80032ee <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"******************\n",19, HAL_MAX_DELAY);
 800642e:	f04f 33ff 	mov.w	r3, #4294967295
 8006432:	2213      	movs	r2, #19
 8006434:	4923      	ldr	r1, [pc, #140]	; (80064c4 <nRF24_Register_Display+0xe0>)
 8006436:	4822      	ldr	r0, [pc, #136]	; (80064c0 <nRF24_Register_Display+0xdc>)
 8006438:	f7fc ff59 	bl	80032ee <HAL_UART_Transmit>
		break;
 800643c:	e05f      	b.n	80064fe <nRF24_Register_Display+0x11a>
	case Sel_B_Module2:
		nRF24_ReadAllRegs(Sel_B_Module2, Reg_Data);
 800643e:	f107 0308 	add.w	r3, r7, #8
 8006442:	4619      	mov	r1, r3
 8006444:	2002      	movs	r0, #2
 8006446:	f7ff f927 	bl	8005698 <nRF24_ReadAllRegs>
		HAL_UART_Transmit(&huart2, (uint8_t*)"Module2 Registers\n",18, HAL_MAX_DELAY);
 800644a:	f04f 33ff 	mov.w	r3, #4294967295
 800644e:	2212      	movs	r2, #18
 8006450:	491d      	ldr	r1, [pc, #116]	; (80064c8 <nRF24_Register_Display+0xe4>)
 8006452:	481b      	ldr	r0, [pc, #108]	; (80064c0 <nRF24_Register_Display+0xdc>)
 8006454:	f7fc ff4b 	bl	80032ee <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"******************\n",19, HAL_MAX_DELAY);
 8006458:	f04f 33ff 	mov.w	r3, #4294967295
 800645c:	2213      	movs	r2, #19
 800645e:	4919      	ldr	r1, [pc, #100]	; (80064c4 <nRF24_Register_Display+0xe0>)
 8006460:	4817      	ldr	r0, [pc, #92]	; (80064c0 <nRF24_Register_Display+0xdc>)
 8006462:	f7fc ff44 	bl	80032ee <HAL_UART_Transmit>
		break;
 8006466:	e04a      	b.n	80064fe <nRF24_Register_Display+0x11a>
	case Sel_B_Module3:
		nRF24_ReadAllRegs(Sel_B_Module3, Reg_Data);
 8006468:	f107 0308 	add.w	r3, r7, #8
 800646c:	4619      	mov	r1, r3
 800646e:	2003      	movs	r0, #3
 8006470:	f7ff f912 	bl	8005698 <nRF24_ReadAllRegs>
		HAL_UART_Transmit(&huart2, (uint8_t*)"Module3 Registers\n",18, HAL_MAX_DELAY);
 8006474:	f04f 33ff 	mov.w	r3, #4294967295
 8006478:	2212      	movs	r2, #18
 800647a:	4914      	ldr	r1, [pc, #80]	; (80064cc <nRF24_Register_Display+0xe8>)
 800647c:	4810      	ldr	r0, [pc, #64]	; (80064c0 <nRF24_Register_Display+0xdc>)
 800647e:	f7fc ff36 	bl	80032ee <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"******************\n",19, HAL_MAX_DELAY);
 8006482:	f04f 33ff 	mov.w	r3, #4294967295
 8006486:	2213      	movs	r2, #19
 8006488:	490e      	ldr	r1, [pc, #56]	; (80064c4 <nRF24_Register_Display+0xe0>)
 800648a:	480d      	ldr	r0, [pc, #52]	; (80064c0 <nRF24_Register_Display+0xdc>)
 800648c:	f7fc ff2f 	bl	80032ee <HAL_UART_Transmit>
		break;
 8006490:	e035      	b.n	80064fe <nRF24_Register_Display+0x11a>
	case Sel_B_Module4:
		nRF24_ReadAllRegs(Sel_B_Module4, Reg_Data);
 8006492:	f107 0308 	add.w	r3, r7, #8
 8006496:	4619      	mov	r1, r3
 8006498:	2004      	movs	r0, #4
 800649a:	f7ff f8fd 	bl	8005698 <nRF24_ReadAllRegs>
		HAL_UART_Transmit(&huart2, (uint8_t*)"Module4 Registers\n",18, HAL_MAX_DELAY);
 800649e:	f04f 33ff 	mov.w	r3, #4294967295
 80064a2:	2212      	movs	r2, #18
 80064a4:	490a      	ldr	r1, [pc, #40]	; (80064d0 <nRF24_Register_Display+0xec>)
 80064a6:	4806      	ldr	r0, [pc, #24]	; (80064c0 <nRF24_Register_Display+0xdc>)
 80064a8:	f7fc ff21 	bl	80032ee <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"******************\n",19, HAL_MAX_DELAY);
 80064ac:	f04f 33ff 	mov.w	r3, #4294967295
 80064b0:	2213      	movs	r2, #19
 80064b2:	4904      	ldr	r1, [pc, #16]	; (80064c4 <nRF24_Register_Display+0xe0>)
 80064b4:	4802      	ldr	r0, [pc, #8]	; (80064c0 <nRF24_Register_Display+0xdc>)
 80064b6:	f7fc ff1a 	bl	80032ee <HAL_UART_Transmit>
		break;
 80064ba:	e020      	b.n	80064fe <nRF24_Register_Display+0x11a>
 80064bc:	08007450 	.word	0x08007450
 80064c0:	200001e8 	.word	0x200001e8
 80064c4:	08007464 	.word	0x08007464
 80064c8:	08007478 	.word	0x08007478
 80064cc:	0800748c 	.word	0x0800748c
 80064d0:	080074a0 	.word	0x080074a0
	case Sel_EL_Module:
		nRF24_ReadAllRegs(Sel_EL_Module, Reg_Data);
 80064d4:	f107 0308 	add.w	r3, r7, #8
 80064d8:	4619      	mov	r1, r3
 80064da:	2005      	movs	r0, #5
 80064dc:	f7ff f8dc 	bl	8005698 <nRF24_ReadAllRegs>
		HAL_UART_Transmit(&huart2, (uint8_t*)"EdgeLED Module Registers\n",25, HAL_MAX_DELAY);
 80064e0:	f04f 33ff 	mov.w	r3, #4294967295
 80064e4:	2219      	movs	r2, #25
 80064e6:	49a8      	ldr	r1, [pc, #672]	; (8006788 <nRF24_Register_Display+0x3a4>)
 80064e8:	48a8      	ldr	r0, [pc, #672]	; (800678c <nRF24_Register_Display+0x3a8>)
 80064ea:	f7fc ff00 	bl	80032ee <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"******************\n",19, HAL_MAX_DELAY);
 80064ee:	f04f 33ff 	mov.w	r3, #4294967295
 80064f2:	2213      	movs	r2, #19
 80064f4:	49a6      	ldr	r1, [pc, #664]	; (8006790 <nRF24_Register_Display+0x3ac>)
 80064f6:	48a5      	ldr	r0, [pc, #660]	; (800678c <nRF24_Register_Display+0x3a8>)
 80064f8:	f7fc fef9 	bl	80032ee <HAL_UART_Transmit>
		break;
 80064fc:	bf00      	nop
	}

		HAL_UART_Transmit(&huart2, (uint8_t*)"CONFIG:",7, HAL_MAX_DELAY);
 80064fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006502:	2207      	movs	r2, #7
 8006504:	49a3      	ldr	r1, [pc, #652]	; (8006794 <nRF24_Register_Display+0x3b0>)
 8006506:	48a1      	ldr	r0, [pc, #644]	; (800678c <nRF24_Register_Display+0x3a8>)
 8006508:	f7fc fef1 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[0]);
 800650c:	7a3b      	ldrb	r3, [r7, #8]
 800650e:	4618      	mov	r0, r3
 8006510:	f000 f970 	bl	80067f4 <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&huart2, (uint8_t*)"EN_AA_reg:",10, HAL_MAX_DELAY);
 8006514:	f04f 33ff 	mov.w	r3, #4294967295
 8006518:	220a      	movs	r2, #10
 800651a:	499f      	ldr	r1, [pc, #636]	; (8006798 <nRF24_Register_Display+0x3b4>)
 800651c:	489b      	ldr	r0, [pc, #620]	; (800678c <nRF24_Register_Display+0x3a8>)
 800651e:	f7fc fee6 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[1]);
 8006522:	7a7b      	ldrb	r3, [r7, #9]
 8006524:	4618      	mov	r0, r3
 8006526:	f000 f965 	bl	80067f4 <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&huart2, (uint8_t*)"EN_RXADR_reg:",13, HAL_MAX_DELAY);
 800652a:	f04f 33ff 	mov.w	r3, #4294967295
 800652e:	220d      	movs	r2, #13
 8006530:	499a      	ldr	r1, [pc, #616]	; (800679c <nRF24_Register_Display+0x3b8>)
 8006532:	4896      	ldr	r0, [pc, #600]	; (800678c <nRF24_Register_Display+0x3a8>)
 8006534:	f7fc fedb 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[2]);
 8006538:	7abb      	ldrb	r3, [r7, #10]
 800653a:	4618      	mov	r0, r3
 800653c:	f000 f95a 	bl	80067f4 <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&huart2, (uint8_t*)"SETUP_AW_reg:",13, HAL_MAX_DELAY);
 8006540:	f04f 33ff 	mov.w	r3, #4294967295
 8006544:	220d      	movs	r2, #13
 8006546:	4996      	ldr	r1, [pc, #600]	; (80067a0 <nRF24_Register_Display+0x3bc>)
 8006548:	4890      	ldr	r0, [pc, #576]	; (800678c <nRF24_Register_Display+0x3a8>)
 800654a:	f7fc fed0 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[3]);
 800654e:	7afb      	ldrb	r3, [r7, #11]
 8006550:	4618      	mov	r0, r3
 8006552:	f000 f94f 	bl	80067f4 <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&huart2, (uint8_t*)"SETUP_RETR_reg:",15, HAL_MAX_DELAY);
 8006556:	f04f 33ff 	mov.w	r3, #4294967295
 800655a:	220f      	movs	r2, #15
 800655c:	4991      	ldr	r1, [pc, #580]	; (80067a4 <nRF24_Register_Display+0x3c0>)
 800655e:	488b      	ldr	r0, [pc, #556]	; (800678c <nRF24_Register_Display+0x3a8>)
 8006560:	f7fc fec5 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[4]);
 8006564:	7b3b      	ldrb	r3, [r7, #12]
 8006566:	4618      	mov	r0, r3
 8006568:	f000 f944 	bl	80067f4 <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&huart2, (uint8_t*)"RF_CH_reg:",10, HAL_MAX_DELAY);
 800656c:	f04f 33ff 	mov.w	r3, #4294967295
 8006570:	220a      	movs	r2, #10
 8006572:	498d      	ldr	r1, [pc, #564]	; (80067a8 <nRF24_Register_Display+0x3c4>)
 8006574:	4885      	ldr	r0, [pc, #532]	; (800678c <nRF24_Register_Display+0x3a8>)
 8006576:	f7fc feba 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[5]);
 800657a:	7b7b      	ldrb	r3, [r7, #13]
 800657c:	4618      	mov	r0, r3
 800657e:	f000 f939 	bl	80067f4 <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&huart2, (uint8_t*)"RF_SETUP_reg:",13, HAL_MAX_DELAY);
 8006582:	f04f 33ff 	mov.w	r3, #4294967295
 8006586:	220d      	movs	r2, #13
 8006588:	4988      	ldr	r1, [pc, #544]	; (80067ac <nRF24_Register_Display+0x3c8>)
 800658a:	4880      	ldr	r0, [pc, #512]	; (800678c <nRF24_Register_Display+0x3a8>)
 800658c:	f7fc feaf 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[6]);
 8006590:	7bbb      	ldrb	r3, [r7, #14]
 8006592:	4618      	mov	r0, r3
 8006594:	f000 f92e 	bl	80067f4 <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&huart2, (uint8_t*)"RF_STATUS_reg:",14, HAL_MAX_DELAY);
 8006598:	f04f 33ff 	mov.w	r3, #4294967295
 800659c:	220e      	movs	r2, #14
 800659e:	4984      	ldr	r1, [pc, #528]	; (80067b0 <nRF24_Register_Display+0x3cc>)
 80065a0:	487a      	ldr	r0, [pc, #488]	; (800678c <nRF24_Register_Display+0x3a8>)
 80065a2:	f7fc fea4 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[7]);
 80065a6:	7bfb      	ldrb	r3, [r7, #15]
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 f923 	bl	80067f4 <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&huart2, (uint8_t*)"OBSERVE_TX_reg:",15, HAL_MAX_DELAY);
 80065ae:	f04f 33ff 	mov.w	r3, #4294967295
 80065b2:	220f      	movs	r2, #15
 80065b4:	497f      	ldr	r1, [pc, #508]	; (80067b4 <nRF24_Register_Display+0x3d0>)
 80065b6:	4875      	ldr	r0, [pc, #468]	; (800678c <nRF24_Register_Display+0x3a8>)
 80065b8:	f7fc fe99 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[8]);
 80065bc:	7c3b      	ldrb	r3, [r7, #16]
 80065be:	4618      	mov	r0, r3
 80065c0:	f000 f918 	bl	80067f4 <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&huart2, (uint8_t*)"RX_ADR_P0_reg:\n",15, HAL_MAX_DELAY);
 80065c4:	f04f 33ff 	mov.w	r3, #4294967295
 80065c8:	220f      	movs	r2, #15
 80065ca:	497b      	ldr	r1, [pc, #492]	; (80067b8 <nRF24_Register_Display+0x3d4>)
 80065cc:	486f      	ldr	r0, [pc, #444]	; (800678c <nRF24_Register_Display+0x3a8>)
 80065ce:	f7fc fe8e 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[10]);
 80065d2:	7cbb      	ldrb	r3, [r7, #18]
 80065d4:	4618      	mov	r0, r3
 80065d6:	f000 f90d 	bl	80067f4 <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[11]);
 80065da:	7cfb      	ldrb	r3, [r7, #19]
 80065dc:	4618      	mov	r0, r3
 80065de:	f000 f909 	bl	80067f4 <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[12]);
 80065e2:	7d3b      	ldrb	r3, [r7, #20]
 80065e4:	4618      	mov	r0, r3
 80065e6:	f000 f905 	bl	80067f4 <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[13]);
 80065ea:	7d7b      	ldrb	r3, [r7, #21]
 80065ec:	4618      	mov	r0, r3
 80065ee:	f000 f901 	bl	80067f4 <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[14]);
 80065f2:	7dbb      	ldrb	r3, [r7, #22]
 80065f4:	4618      	mov	r0, r3
 80065f6:	f000 f8fd 	bl	80067f4 <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&huart2, (uint8_t*)"RX_ADR_P1_reg:\n",15, HAL_MAX_DELAY);
 80065fa:	f04f 33ff 	mov.w	r3, #4294967295
 80065fe:	220f      	movs	r2, #15
 8006600:	496e      	ldr	r1, [pc, #440]	; (80067bc <nRF24_Register_Display+0x3d8>)
 8006602:	4862      	ldr	r0, [pc, #392]	; (800678c <nRF24_Register_Display+0x3a8>)
 8006604:	f7fc fe73 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[15]);
 8006608:	7dfb      	ldrb	r3, [r7, #23]
 800660a:	4618      	mov	r0, r3
 800660c:	f000 f8f2 	bl	80067f4 <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[16]);
 8006610:	7e3b      	ldrb	r3, [r7, #24]
 8006612:	4618      	mov	r0, r3
 8006614:	f000 f8ee 	bl	80067f4 <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[17]);
 8006618:	7e7b      	ldrb	r3, [r7, #25]
 800661a:	4618      	mov	r0, r3
 800661c:	f000 f8ea 	bl	80067f4 <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[18]);
 8006620:	7ebb      	ldrb	r3, [r7, #26]
 8006622:	4618      	mov	r0, r3
 8006624:	f000 f8e6 	bl	80067f4 <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[19]);
 8006628:	7efb      	ldrb	r3, [r7, #27]
 800662a:	4618      	mov	r0, r3
 800662c:	f000 f8e2 	bl	80067f4 <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&huart2, (uint8_t*)"RX_ADR_P2_reg:",15, HAL_MAX_DELAY);
 8006630:	f04f 33ff 	mov.w	r3, #4294967295
 8006634:	220f      	movs	r2, #15
 8006636:	4962      	ldr	r1, [pc, #392]	; (80067c0 <nRF24_Register_Display+0x3dc>)
 8006638:	4854      	ldr	r0, [pc, #336]	; (800678c <nRF24_Register_Display+0x3a8>)
 800663a:	f7fc fe58 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[20]);
 800663e:	7f3b      	ldrb	r3, [r7, #28]
 8006640:	4618      	mov	r0, r3
 8006642:	f000 f8d7 	bl	80067f4 <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&huart2, (uint8_t*)"RX_ADR_P3_reg:",15, HAL_MAX_DELAY);
 8006646:	f04f 33ff 	mov.w	r3, #4294967295
 800664a:	220f      	movs	r2, #15
 800664c:	495d      	ldr	r1, [pc, #372]	; (80067c4 <nRF24_Register_Display+0x3e0>)
 800664e:	484f      	ldr	r0, [pc, #316]	; (800678c <nRF24_Register_Display+0x3a8>)
 8006650:	f7fc fe4d 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[21]);
 8006654:	7f7b      	ldrb	r3, [r7, #29]
 8006656:	4618      	mov	r0, r3
 8006658:	f000 f8cc 	bl	80067f4 <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&huart2, (uint8_t*)"RX_ADR_P4_reg:",15, HAL_MAX_DELAY);
 800665c:	f04f 33ff 	mov.w	r3, #4294967295
 8006660:	220f      	movs	r2, #15
 8006662:	4959      	ldr	r1, [pc, #356]	; (80067c8 <nRF24_Register_Display+0x3e4>)
 8006664:	4849      	ldr	r0, [pc, #292]	; (800678c <nRF24_Register_Display+0x3a8>)
 8006666:	f7fc fe42 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[22]);
 800666a:	7fbb      	ldrb	r3, [r7, #30]
 800666c:	4618      	mov	r0, r3
 800666e:	f000 f8c1 	bl	80067f4 <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&huart2, (uint8_t*)"RX_ADR_P5_reg:",15, HAL_MAX_DELAY);
 8006672:	f04f 33ff 	mov.w	r3, #4294967295
 8006676:	220f      	movs	r2, #15
 8006678:	4954      	ldr	r1, [pc, #336]	; (80067cc <nRF24_Register_Display+0x3e8>)
 800667a:	4844      	ldr	r0, [pc, #272]	; (800678c <nRF24_Register_Display+0x3a8>)
 800667c:	f7fc fe37 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[23]);
 8006680:	7ffb      	ldrb	r3, [r7, #31]
 8006682:	4618      	mov	r0, r3
 8006684:	f000 f8b6 	bl	80067f4 <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&huart2, (uint8_t*)"TX_ADR_reg:\n",12, HAL_MAX_DELAY);
 8006688:	f04f 33ff 	mov.w	r3, #4294967295
 800668c:	220c      	movs	r2, #12
 800668e:	4950      	ldr	r1, [pc, #320]	; (80067d0 <nRF24_Register_Display+0x3ec>)
 8006690:	483e      	ldr	r0, [pc, #248]	; (800678c <nRF24_Register_Display+0x3a8>)
 8006692:	f7fc fe2c 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[24]);
 8006696:	f897 3020 	ldrb.w	r3, [r7, #32]
 800669a:	4618      	mov	r0, r3
 800669c:	f000 f8aa 	bl	80067f4 <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[25]);
 80066a0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80066a4:	4618      	mov	r0, r3
 80066a6:	f000 f8a5 	bl	80067f4 <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[26]);
 80066aa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80066ae:	4618      	mov	r0, r3
 80066b0:	f000 f8a0 	bl	80067f4 <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[27]);
 80066b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066b8:	4618      	mov	r0, r3
 80066ba:	f000 f89b 	bl	80067f4 <nRF24_sendRegisterValue>
		nRF24_sendRegisterValue(Reg_Data[28]);
 80066be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 f896 	bl	80067f4 <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&huart2, (uint8_t*)"RX_PW_P0_reg:",13, HAL_MAX_DELAY);
 80066c8:	f04f 33ff 	mov.w	r3, #4294967295
 80066cc:	220d      	movs	r2, #13
 80066ce:	4941      	ldr	r1, [pc, #260]	; (80067d4 <nRF24_Register_Display+0x3f0>)
 80066d0:	482e      	ldr	r0, [pc, #184]	; (800678c <nRF24_Register_Display+0x3a8>)
 80066d2:	f7fc fe0c 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[29]);
 80066d6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80066da:	4618      	mov	r0, r3
 80066dc:	f000 f88a 	bl	80067f4 <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&huart2, (uint8_t*)"RX_PW_P1_reg:",13, HAL_MAX_DELAY);
 80066e0:	f04f 33ff 	mov.w	r3, #4294967295
 80066e4:	220d      	movs	r2, #13
 80066e6:	493c      	ldr	r1, [pc, #240]	; (80067d8 <nRF24_Register_Display+0x3f4>)
 80066e8:	4828      	ldr	r0, [pc, #160]	; (800678c <nRF24_Register_Display+0x3a8>)
 80066ea:	f7fc fe00 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[30]);
 80066ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 f87e 	bl	80067f4 <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&huart2, (uint8_t*)"RX_PW_P2_reg:",13, HAL_MAX_DELAY);
 80066f8:	f04f 33ff 	mov.w	r3, #4294967295
 80066fc:	220d      	movs	r2, #13
 80066fe:	4937      	ldr	r1, [pc, #220]	; (80067dc <nRF24_Register_Display+0x3f8>)
 8006700:	4822      	ldr	r0, [pc, #136]	; (800678c <nRF24_Register_Display+0x3a8>)
 8006702:	f7fc fdf4 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[31]);
 8006706:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800670a:	4618      	mov	r0, r3
 800670c:	f000 f872 	bl	80067f4 <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&huart2, (uint8_t*)"RX_PW_P3_reg:",13, HAL_MAX_DELAY);
 8006710:	f04f 33ff 	mov.w	r3, #4294967295
 8006714:	220d      	movs	r2, #13
 8006716:	4932      	ldr	r1, [pc, #200]	; (80067e0 <nRF24_Register_Display+0x3fc>)
 8006718:	481c      	ldr	r0, [pc, #112]	; (800678c <nRF24_Register_Display+0x3a8>)
 800671a:	f7fc fde8 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[32]);
 800671e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006722:	4618      	mov	r0, r3
 8006724:	f000 f866 	bl	80067f4 <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&huart2, (uint8_t*)"RX_PW_P4_reg:",13, HAL_MAX_DELAY);
 8006728:	f04f 33ff 	mov.w	r3, #4294967295
 800672c:	220d      	movs	r2, #13
 800672e:	492d      	ldr	r1, [pc, #180]	; (80067e4 <nRF24_Register_Display+0x400>)
 8006730:	4816      	ldr	r0, [pc, #88]	; (800678c <nRF24_Register_Display+0x3a8>)
 8006732:	f7fc fddc 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[33]);
 8006736:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800673a:	4618      	mov	r0, r3
 800673c:	f000 f85a 	bl	80067f4 <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&huart2, (uint8_t*)"RX_PW_P5_reg:",13, HAL_MAX_DELAY);
 8006740:	f04f 33ff 	mov.w	r3, #4294967295
 8006744:	220d      	movs	r2, #13
 8006746:	4928      	ldr	r1, [pc, #160]	; (80067e8 <nRF24_Register_Display+0x404>)
 8006748:	4810      	ldr	r0, [pc, #64]	; (800678c <nRF24_Register_Display+0x3a8>)
 800674a:	f7fc fdd0 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[34]);
 800674e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006752:	4618      	mov	r0, r3
 8006754:	f000 f84e 	bl	80067f4 <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&huart2, (uint8_t*)"FIFO_STATUS_reg:",16, HAL_MAX_DELAY);
 8006758:	f04f 33ff 	mov.w	r3, #4294967295
 800675c:	2210      	movs	r2, #16
 800675e:	4923      	ldr	r1, [pc, #140]	; (80067ec <nRF24_Register_Display+0x408>)
 8006760:	480a      	ldr	r0, [pc, #40]	; (800678c <nRF24_Register_Display+0x3a8>)
 8006762:	f7fc fdc4 	bl	80032ee <HAL_UART_Transmit>
		nRF24_sendRegisterValue(Reg_Data[35]);
 8006766:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800676a:	4618      	mov	r0, r3
 800676c:	f000 f842 	bl	80067f4 <nRF24_sendRegisterValue>
		HAL_UART_Transmit(&huart2, (uint8_t*)"******************\n\n",20, HAL_MAX_DELAY);
 8006770:	f04f 33ff 	mov.w	r3, #4294967295
 8006774:	2214      	movs	r2, #20
 8006776:	491e      	ldr	r1, [pc, #120]	; (80067f0 <nRF24_Register_Display+0x40c>)
 8006778:	4804      	ldr	r0, [pc, #16]	; (800678c <nRF24_Register_Display+0x3a8>)
 800677a:	f7fc fdb8 	bl	80032ee <HAL_UART_Transmit>
}
 800677e:	bf00      	nop
 8006780:	3730      	adds	r7, #48	; 0x30
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	080074b4 	.word	0x080074b4
 800678c:	200001e8 	.word	0x200001e8
 8006790:	08007464 	.word	0x08007464
 8006794:	080074d0 	.word	0x080074d0
 8006798:	080074d8 	.word	0x080074d8
 800679c:	080074e4 	.word	0x080074e4
 80067a0:	080074f4 	.word	0x080074f4
 80067a4:	08007504 	.word	0x08007504
 80067a8:	08007514 	.word	0x08007514
 80067ac:	08007520 	.word	0x08007520
 80067b0:	08007530 	.word	0x08007530
 80067b4:	08007540 	.word	0x08007540
 80067b8:	08007550 	.word	0x08007550
 80067bc:	08007560 	.word	0x08007560
 80067c0:	08007570 	.word	0x08007570
 80067c4:	08007580 	.word	0x08007580
 80067c8:	08007590 	.word	0x08007590
 80067cc:	080075a0 	.word	0x080075a0
 80067d0:	080075b0 	.word	0x080075b0
 80067d4:	080075c0 	.word	0x080075c0
 80067d8:	080075d0 	.word	0x080075d0
 80067dc:	080075e0 	.word	0x080075e0
 80067e0:	080075f0 	.word	0x080075f0
 80067e4:	08007600 	.word	0x08007600
 80067e8:	08007610 	.word	0x08007610
 80067ec:	08007620 	.word	0x08007620
 80067f0:	08007634 	.word	0x08007634

080067f4 <nRF24_sendRegisterValue>:


void nRF24_sendRegisterValue(uint8_t value)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	4603      	mov	r3, r0
 80067fc:	71fb      	strb	r3, [r7, #7]
  char buffer[10];
  sprintf(buffer, "0x%02X\r\n", value); // Convert value to hexadecimal string
 80067fe:	79fa      	ldrb	r2, [r7, #7]
 8006800:	f107 030c 	add.w	r3, r7, #12
 8006804:	490a      	ldr	r1, [pc, #40]	; (8006830 <nRF24_sendRegisterValue+0x3c>)
 8006806:	4618      	mov	r0, r3
 8006808:	f000 f848 	bl	800689c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800680c:	f107 030c 	add.w	r3, r7, #12
 8006810:	4618      	mov	r0, r3
 8006812:	f7f9 fcdd 	bl	80001d0 <strlen>
 8006816:	4603      	mov	r3, r0
 8006818:	b29a      	uxth	r2, r3
 800681a:	f107 010c 	add.w	r1, r7, #12
 800681e:	f04f 33ff 	mov.w	r3, #4294967295
 8006822:	4804      	ldr	r0, [pc, #16]	; (8006834 <nRF24_sendRegisterValue+0x40>)
 8006824:	f7fc fd63 	bl	80032ee <HAL_UART_Transmit>
}
 8006828:	bf00      	nop
 800682a:	3718      	adds	r7, #24
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	0800764c 	.word	0x0800764c
 8006834:	200001e8 	.word	0x200001e8

08006838 <__errno>:
 8006838:	4b01      	ldr	r3, [pc, #4]	; (8006840 <__errno+0x8>)
 800683a:	6818      	ldr	r0, [r3, #0]
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	20000060 	.word	0x20000060

08006844 <__libc_init_array>:
 8006844:	b570      	push	{r4, r5, r6, lr}
 8006846:	4d0d      	ldr	r5, [pc, #52]	; (800687c <__libc_init_array+0x38>)
 8006848:	4c0d      	ldr	r4, [pc, #52]	; (8006880 <__libc_init_array+0x3c>)
 800684a:	1b64      	subs	r4, r4, r5
 800684c:	10a4      	asrs	r4, r4, #2
 800684e:	2600      	movs	r6, #0
 8006850:	42a6      	cmp	r6, r4
 8006852:	d109      	bne.n	8006868 <__libc_init_array+0x24>
 8006854:	4d0b      	ldr	r5, [pc, #44]	; (8006884 <__libc_init_array+0x40>)
 8006856:	4c0c      	ldr	r4, [pc, #48]	; (8006888 <__libc_init_array+0x44>)
 8006858:	f000 fca2 	bl	80071a0 <_init>
 800685c:	1b64      	subs	r4, r4, r5
 800685e:	10a4      	asrs	r4, r4, #2
 8006860:	2600      	movs	r6, #0
 8006862:	42a6      	cmp	r6, r4
 8006864:	d105      	bne.n	8006872 <__libc_init_array+0x2e>
 8006866:	bd70      	pop	{r4, r5, r6, pc}
 8006868:	f855 3b04 	ldr.w	r3, [r5], #4
 800686c:	4798      	blx	r3
 800686e:	3601      	adds	r6, #1
 8006870:	e7ee      	b.n	8006850 <__libc_init_array+0xc>
 8006872:	f855 3b04 	ldr.w	r3, [r5], #4
 8006876:	4798      	blx	r3
 8006878:	3601      	adds	r6, #1
 800687a:	e7f2      	b.n	8006862 <__libc_init_array+0x1e>
 800687c:	080076ac 	.word	0x080076ac
 8006880:	080076ac 	.word	0x080076ac
 8006884:	080076ac 	.word	0x080076ac
 8006888:	080076b0 	.word	0x080076b0

0800688c <memset>:
 800688c:	4402      	add	r2, r0
 800688e:	4603      	mov	r3, r0
 8006890:	4293      	cmp	r3, r2
 8006892:	d100      	bne.n	8006896 <memset+0xa>
 8006894:	4770      	bx	lr
 8006896:	f803 1b01 	strb.w	r1, [r3], #1
 800689a:	e7f9      	b.n	8006890 <memset+0x4>

0800689c <siprintf>:
 800689c:	b40e      	push	{r1, r2, r3}
 800689e:	b500      	push	{lr}
 80068a0:	b09c      	sub	sp, #112	; 0x70
 80068a2:	ab1d      	add	r3, sp, #116	; 0x74
 80068a4:	9002      	str	r0, [sp, #8]
 80068a6:	9006      	str	r0, [sp, #24]
 80068a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80068ac:	4809      	ldr	r0, [pc, #36]	; (80068d4 <siprintf+0x38>)
 80068ae:	9107      	str	r1, [sp, #28]
 80068b0:	9104      	str	r1, [sp, #16]
 80068b2:	4909      	ldr	r1, [pc, #36]	; (80068d8 <siprintf+0x3c>)
 80068b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80068b8:	9105      	str	r1, [sp, #20]
 80068ba:	6800      	ldr	r0, [r0, #0]
 80068bc:	9301      	str	r3, [sp, #4]
 80068be:	a902      	add	r1, sp, #8
 80068c0:	f000 f87c 	bl	80069bc <_svfiprintf_r>
 80068c4:	9b02      	ldr	r3, [sp, #8]
 80068c6:	2200      	movs	r2, #0
 80068c8:	701a      	strb	r2, [r3, #0]
 80068ca:	b01c      	add	sp, #112	; 0x70
 80068cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80068d0:	b003      	add	sp, #12
 80068d2:	4770      	bx	lr
 80068d4:	20000060 	.word	0x20000060
 80068d8:	ffff0208 	.word	0xffff0208

080068dc <strncmp>:
 80068dc:	b510      	push	{r4, lr}
 80068de:	b17a      	cbz	r2, 8006900 <strncmp+0x24>
 80068e0:	4603      	mov	r3, r0
 80068e2:	3901      	subs	r1, #1
 80068e4:	1884      	adds	r4, r0, r2
 80068e6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80068ea:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80068ee:	4290      	cmp	r0, r2
 80068f0:	d101      	bne.n	80068f6 <strncmp+0x1a>
 80068f2:	42a3      	cmp	r3, r4
 80068f4:	d101      	bne.n	80068fa <strncmp+0x1e>
 80068f6:	1a80      	subs	r0, r0, r2
 80068f8:	bd10      	pop	{r4, pc}
 80068fa:	2800      	cmp	r0, #0
 80068fc:	d1f3      	bne.n	80068e6 <strncmp+0xa>
 80068fe:	e7fa      	b.n	80068f6 <strncmp+0x1a>
 8006900:	4610      	mov	r0, r2
 8006902:	e7f9      	b.n	80068f8 <strncmp+0x1c>

08006904 <__ssputs_r>:
 8006904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006908:	688e      	ldr	r6, [r1, #8]
 800690a:	429e      	cmp	r6, r3
 800690c:	4682      	mov	sl, r0
 800690e:	460c      	mov	r4, r1
 8006910:	4690      	mov	r8, r2
 8006912:	461f      	mov	r7, r3
 8006914:	d838      	bhi.n	8006988 <__ssputs_r+0x84>
 8006916:	898a      	ldrh	r2, [r1, #12]
 8006918:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800691c:	d032      	beq.n	8006984 <__ssputs_r+0x80>
 800691e:	6825      	ldr	r5, [r4, #0]
 8006920:	6909      	ldr	r1, [r1, #16]
 8006922:	eba5 0901 	sub.w	r9, r5, r1
 8006926:	6965      	ldr	r5, [r4, #20]
 8006928:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800692c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006930:	3301      	adds	r3, #1
 8006932:	444b      	add	r3, r9
 8006934:	106d      	asrs	r5, r5, #1
 8006936:	429d      	cmp	r5, r3
 8006938:	bf38      	it	cc
 800693a:	461d      	movcc	r5, r3
 800693c:	0553      	lsls	r3, r2, #21
 800693e:	d531      	bpl.n	80069a4 <__ssputs_r+0xa0>
 8006940:	4629      	mov	r1, r5
 8006942:	f000 fb63 	bl	800700c <_malloc_r>
 8006946:	4606      	mov	r6, r0
 8006948:	b950      	cbnz	r0, 8006960 <__ssputs_r+0x5c>
 800694a:	230c      	movs	r3, #12
 800694c:	f8ca 3000 	str.w	r3, [sl]
 8006950:	89a3      	ldrh	r3, [r4, #12]
 8006952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006956:	81a3      	strh	r3, [r4, #12]
 8006958:	f04f 30ff 	mov.w	r0, #4294967295
 800695c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006960:	6921      	ldr	r1, [r4, #16]
 8006962:	464a      	mov	r2, r9
 8006964:	f000 fabe 	bl	8006ee4 <memcpy>
 8006968:	89a3      	ldrh	r3, [r4, #12]
 800696a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800696e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006972:	81a3      	strh	r3, [r4, #12]
 8006974:	6126      	str	r6, [r4, #16]
 8006976:	6165      	str	r5, [r4, #20]
 8006978:	444e      	add	r6, r9
 800697a:	eba5 0509 	sub.w	r5, r5, r9
 800697e:	6026      	str	r6, [r4, #0]
 8006980:	60a5      	str	r5, [r4, #8]
 8006982:	463e      	mov	r6, r7
 8006984:	42be      	cmp	r6, r7
 8006986:	d900      	bls.n	800698a <__ssputs_r+0x86>
 8006988:	463e      	mov	r6, r7
 800698a:	6820      	ldr	r0, [r4, #0]
 800698c:	4632      	mov	r2, r6
 800698e:	4641      	mov	r1, r8
 8006990:	f000 fab6 	bl	8006f00 <memmove>
 8006994:	68a3      	ldr	r3, [r4, #8]
 8006996:	1b9b      	subs	r3, r3, r6
 8006998:	60a3      	str	r3, [r4, #8]
 800699a:	6823      	ldr	r3, [r4, #0]
 800699c:	4433      	add	r3, r6
 800699e:	6023      	str	r3, [r4, #0]
 80069a0:	2000      	movs	r0, #0
 80069a2:	e7db      	b.n	800695c <__ssputs_r+0x58>
 80069a4:	462a      	mov	r2, r5
 80069a6:	f000 fba5 	bl	80070f4 <_realloc_r>
 80069aa:	4606      	mov	r6, r0
 80069ac:	2800      	cmp	r0, #0
 80069ae:	d1e1      	bne.n	8006974 <__ssputs_r+0x70>
 80069b0:	6921      	ldr	r1, [r4, #16]
 80069b2:	4650      	mov	r0, sl
 80069b4:	f000 fabe 	bl	8006f34 <_free_r>
 80069b8:	e7c7      	b.n	800694a <__ssputs_r+0x46>
	...

080069bc <_svfiprintf_r>:
 80069bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c0:	4698      	mov	r8, r3
 80069c2:	898b      	ldrh	r3, [r1, #12]
 80069c4:	061b      	lsls	r3, r3, #24
 80069c6:	b09d      	sub	sp, #116	; 0x74
 80069c8:	4607      	mov	r7, r0
 80069ca:	460d      	mov	r5, r1
 80069cc:	4614      	mov	r4, r2
 80069ce:	d50e      	bpl.n	80069ee <_svfiprintf_r+0x32>
 80069d0:	690b      	ldr	r3, [r1, #16]
 80069d2:	b963      	cbnz	r3, 80069ee <_svfiprintf_r+0x32>
 80069d4:	2140      	movs	r1, #64	; 0x40
 80069d6:	f000 fb19 	bl	800700c <_malloc_r>
 80069da:	6028      	str	r0, [r5, #0]
 80069dc:	6128      	str	r0, [r5, #16]
 80069de:	b920      	cbnz	r0, 80069ea <_svfiprintf_r+0x2e>
 80069e0:	230c      	movs	r3, #12
 80069e2:	603b      	str	r3, [r7, #0]
 80069e4:	f04f 30ff 	mov.w	r0, #4294967295
 80069e8:	e0d1      	b.n	8006b8e <_svfiprintf_r+0x1d2>
 80069ea:	2340      	movs	r3, #64	; 0x40
 80069ec:	616b      	str	r3, [r5, #20]
 80069ee:	2300      	movs	r3, #0
 80069f0:	9309      	str	r3, [sp, #36]	; 0x24
 80069f2:	2320      	movs	r3, #32
 80069f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80069fc:	2330      	movs	r3, #48	; 0x30
 80069fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006ba8 <_svfiprintf_r+0x1ec>
 8006a02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a06:	f04f 0901 	mov.w	r9, #1
 8006a0a:	4623      	mov	r3, r4
 8006a0c:	469a      	mov	sl, r3
 8006a0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a12:	b10a      	cbz	r2, 8006a18 <_svfiprintf_r+0x5c>
 8006a14:	2a25      	cmp	r2, #37	; 0x25
 8006a16:	d1f9      	bne.n	8006a0c <_svfiprintf_r+0x50>
 8006a18:	ebba 0b04 	subs.w	fp, sl, r4
 8006a1c:	d00b      	beq.n	8006a36 <_svfiprintf_r+0x7a>
 8006a1e:	465b      	mov	r3, fp
 8006a20:	4622      	mov	r2, r4
 8006a22:	4629      	mov	r1, r5
 8006a24:	4638      	mov	r0, r7
 8006a26:	f7ff ff6d 	bl	8006904 <__ssputs_r>
 8006a2a:	3001      	adds	r0, #1
 8006a2c:	f000 80aa 	beq.w	8006b84 <_svfiprintf_r+0x1c8>
 8006a30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a32:	445a      	add	r2, fp
 8006a34:	9209      	str	r2, [sp, #36]	; 0x24
 8006a36:	f89a 3000 	ldrb.w	r3, [sl]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f000 80a2 	beq.w	8006b84 <_svfiprintf_r+0x1c8>
 8006a40:	2300      	movs	r3, #0
 8006a42:	f04f 32ff 	mov.w	r2, #4294967295
 8006a46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a4a:	f10a 0a01 	add.w	sl, sl, #1
 8006a4e:	9304      	str	r3, [sp, #16]
 8006a50:	9307      	str	r3, [sp, #28]
 8006a52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a56:	931a      	str	r3, [sp, #104]	; 0x68
 8006a58:	4654      	mov	r4, sl
 8006a5a:	2205      	movs	r2, #5
 8006a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a60:	4851      	ldr	r0, [pc, #324]	; (8006ba8 <_svfiprintf_r+0x1ec>)
 8006a62:	f7f9 fbbd 	bl	80001e0 <memchr>
 8006a66:	9a04      	ldr	r2, [sp, #16]
 8006a68:	b9d8      	cbnz	r0, 8006aa2 <_svfiprintf_r+0xe6>
 8006a6a:	06d0      	lsls	r0, r2, #27
 8006a6c:	bf44      	itt	mi
 8006a6e:	2320      	movmi	r3, #32
 8006a70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a74:	0711      	lsls	r1, r2, #28
 8006a76:	bf44      	itt	mi
 8006a78:	232b      	movmi	r3, #43	; 0x2b
 8006a7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a7e:	f89a 3000 	ldrb.w	r3, [sl]
 8006a82:	2b2a      	cmp	r3, #42	; 0x2a
 8006a84:	d015      	beq.n	8006ab2 <_svfiprintf_r+0xf6>
 8006a86:	9a07      	ldr	r2, [sp, #28]
 8006a88:	4654      	mov	r4, sl
 8006a8a:	2000      	movs	r0, #0
 8006a8c:	f04f 0c0a 	mov.w	ip, #10
 8006a90:	4621      	mov	r1, r4
 8006a92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a96:	3b30      	subs	r3, #48	; 0x30
 8006a98:	2b09      	cmp	r3, #9
 8006a9a:	d94e      	bls.n	8006b3a <_svfiprintf_r+0x17e>
 8006a9c:	b1b0      	cbz	r0, 8006acc <_svfiprintf_r+0x110>
 8006a9e:	9207      	str	r2, [sp, #28]
 8006aa0:	e014      	b.n	8006acc <_svfiprintf_r+0x110>
 8006aa2:	eba0 0308 	sub.w	r3, r0, r8
 8006aa6:	fa09 f303 	lsl.w	r3, r9, r3
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	9304      	str	r3, [sp, #16]
 8006aae:	46a2      	mov	sl, r4
 8006ab0:	e7d2      	b.n	8006a58 <_svfiprintf_r+0x9c>
 8006ab2:	9b03      	ldr	r3, [sp, #12]
 8006ab4:	1d19      	adds	r1, r3, #4
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	9103      	str	r1, [sp, #12]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	bfbb      	ittet	lt
 8006abe:	425b      	neglt	r3, r3
 8006ac0:	f042 0202 	orrlt.w	r2, r2, #2
 8006ac4:	9307      	strge	r3, [sp, #28]
 8006ac6:	9307      	strlt	r3, [sp, #28]
 8006ac8:	bfb8      	it	lt
 8006aca:	9204      	strlt	r2, [sp, #16]
 8006acc:	7823      	ldrb	r3, [r4, #0]
 8006ace:	2b2e      	cmp	r3, #46	; 0x2e
 8006ad0:	d10c      	bne.n	8006aec <_svfiprintf_r+0x130>
 8006ad2:	7863      	ldrb	r3, [r4, #1]
 8006ad4:	2b2a      	cmp	r3, #42	; 0x2a
 8006ad6:	d135      	bne.n	8006b44 <_svfiprintf_r+0x188>
 8006ad8:	9b03      	ldr	r3, [sp, #12]
 8006ada:	1d1a      	adds	r2, r3, #4
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	9203      	str	r2, [sp, #12]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	bfb8      	it	lt
 8006ae4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ae8:	3402      	adds	r4, #2
 8006aea:	9305      	str	r3, [sp, #20]
 8006aec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006bb8 <_svfiprintf_r+0x1fc>
 8006af0:	7821      	ldrb	r1, [r4, #0]
 8006af2:	2203      	movs	r2, #3
 8006af4:	4650      	mov	r0, sl
 8006af6:	f7f9 fb73 	bl	80001e0 <memchr>
 8006afa:	b140      	cbz	r0, 8006b0e <_svfiprintf_r+0x152>
 8006afc:	2340      	movs	r3, #64	; 0x40
 8006afe:	eba0 000a 	sub.w	r0, r0, sl
 8006b02:	fa03 f000 	lsl.w	r0, r3, r0
 8006b06:	9b04      	ldr	r3, [sp, #16]
 8006b08:	4303      	orrs	r3, r0
 8006b0a:	3401      	adds	r4, #1
 8006b0c:	9304      	str	r3, [sp, #16]
 8006b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b12:	4826      	ldr	r0, [pc, #152]	; (8006bac <_svfiprintf_r+0x1f0>)
 8006b14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b18:	2206      	movs	r2, #6
 8006b1a:	f7f9 fb61 	bl	80001e0 <memchr>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	d038      	beq.n	8006b94 <_svfiprintf_r+0x1d8>
 8006b22:	4b23      	ldr	r3, [pc, #140]	; (8006bb0 <_svfiprintf_r+0x1f4>)
 8006b24:	bb1b      	cbnz	r3, 8006b6e <_svfiprintf_r+0x1b2>
 8006b26:	9b03      	ldr	r3, [sp, #12]
 8006b28:	3307      	adds	r3, #7
 8006b2a:	f023 0307 	bic.w	r3, r3, #7
 8006b2e:	3308      	adds	r3, #8
 8006b30:	9303      	str	r3, [sp, #12]
 8006b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b34:	4433      	add	r3, r6
 8006b36:	9309      	str	r3, [sp, #36]	; 0x24
 8006b38:	e767      	b.n	8006a0a <_svfiprintf_r+0x4e>
 8006b3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b3e:	460c      	mov	r4, r1
 8006b40:	2001      	movs	r0, #1
 8006b42:	e7a5      	b.n	8006a90 <_svfiprintf_r+0xd4>
 8006b44:	2300      	movs	r3, #0
 8006b46:	3401      	adds	r4, #1
 8006b48:	9305      	str	r3, [sp, #20]
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	f04f 0c0a 	mov.w	ip, #10
 8006b50:	4620      	mov	r0, r4
 8006b52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b56:	3a30      	subs	r2, #48	; 0x30
 8006b58:	2a09      	cmp	r2, #9
 8006b5a:	d903      	bls.n	8006b64 <_svfiprintf_r+0x1a8>
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d0c5      	beq.n	8006aec <_svfiprintf_r+0x130>
 8006b60:	9105      	str	r1, [sp, #20]
 8006b62:	e7c3      	b.n	8006aec <_svfiprintf_r+0x130>
 8006b64:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b68:	4604      	mov	r4, r0
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e7f0      	b.n	8006b50 <_svfiprintf_r+0x194>
 8006b6e:	ab03      	add	r3, sp, #12
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	462a      	mov	r2, r5
 8006b74:	4b0f      	ldr	r3, [pc, #60]	; (8006bb4 <_svfiprintf_r+0x1f8>)
 8006b76:	a904      	add	r1, sp, #16
 8006b78:	4638      	mov	r0, r7
 8006b7a:	f3af 8000 	nop.w
 8006b7e:	1c42      	adds	r2, r0, #1
 8006b80:	4606      	mov	r6, r0
 8006b82:	d1d6      	bne.n	8006b32 <_svfiprintf_r+0x176>
 8006b84:	89ab      	ldrh	r3, [r5, #12]
 8006b86:	065b      	lsls	r3, r3, #25
 8006b88:	f53f af2c 	bmi.w	80069e4 <_svfiprintf_r+0x28>
 8006b8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b8e:	b01d      	add	sp, #116	; 0x74
 8006b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b94:	ab03      	add	r3, sp, #12
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	462a      	mov	r2, r5
 8006b9a:	4b06      	ldr	r3, [pc, #24]	; (8006bb4 <_svfiprintf_r+0x1f8>)
 8006b9c:	a904      	add	r1, sp, #16
 8006b9e:	4638      	mov	r0, r7
 8006ba0:	f000 f87a 	bl	8006c98 <_printf_i>
 8006ba4:	e7eb      	b.n	8006b7e <_svfiprintf_r+0x1c2>
 8006ba6:	bf00      	nop
 8006ba8:	08007670 	.word	0x08007670
 8006bac:	0800767a 	.word	0x0800767a
 8006bb0:	00000000 	.word	0x00000000
 8006bb4:	08006905 	.word	0x08006905
 8006bb8:	08007676 	.word	0x08007676

08006bbc <_printf_common>:
 8006bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bc0:	4616      	mov	r6, r2
 8006bc2:	4699      	mov	r9, r3
 8006bc4:	688a      	ldr	r2, [r1, #8]
 8006bc6:	690b      	ldr	r3, [r1, #16]
 8006bc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	bfb8      	it	lt
 8006bd0:	4613      	movlt	r3, r2
 8006bd2:	6033      	str	r3, [r6, #0]
 8006bd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006bd8:	4607      	mov	r7, r0
 8006bda:	460c      	mov	r4, r1
 8006bdc:	b10a      	cbz	r2, 8006be2 <_printf_common+0x26>
 8006bde:	3301      	adds	r3, #1
 8006be0:	6033      	str	r3, [r6, #0]
 8006be2:	6823      	ldr	r3, [r4, #0]
 8006be4:	0699      	lsls	r1, r3, #26
 8006be6:	bf42      	ittt	mi
 8006be8:	6833      	ldrmi	r3, [r6, #0]
 8006bea:	3302      	addmi	r3, #2
 8006bec:	6033      	strmi	r3, [r6, #0]
 8006bee:	6825      	ldr	r5, [r4, #0]
 8006bf0:	f015 0506 	ands.w	r5, r5, #6
 8006bf4:	d106      	bne.n	8006c04 <_printf_common+0x48>
 8006bf6:	f104 0a19 	add.w	sl, r4, #25
 8006bfa:	68e3      	ldr	r3, [r4, #12]
 8006bfc:	6832      	ldr	r2, [r6, #0]
 8006bfe:	1a9b      	subs	r3, r3, r2
 8006c00:	42ab      	cmp	r3, r5
 8006c02:	dc26      	bgt.n	8006c52 <_printf_common+0x96>
 8006c04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c08:	1e13      	subs	r3, r2, #0
 8006c0a:	6822      	ldr	r2, [r4, #0]
 8006c0c:	bf18      	it	ne
 8006c0e:	2301      	movne	r3, #1
 8006c10:	0692      	lsls	r2, r2, #26
 8006c12:	d42b      	bmi.n	8006c6c <_printf_common+0xb0>
 8006c14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c18:	4649      	mov	r1, r9
 8006c1a:	4638      	mov	r0, r7
 8006c1c:	47c0      	blx	r8
 8006c1e:	3001      	adds	r0, #1
 8006c20:	d01e      	beq.n	8006c60 <_printf_common+0xa4>
 8006c22:	6823      	ldr	r3, [r4, #0]
 8006c24:	68e5      	ldr	r5, [r4, #12]
 8006c26:	6832      	ldr	r2, [r6, #0]
 8006c28:	f003 0306 	and.w	r3, r3, #6
 8006c2c:	2b04      	cmp	r3, #4
 8006c2e:	bf08      	it	eq
 8006c30:	1aad      	subeq	r5, r5, r2
 8006c32:	68a3      	ldr	r3, [r4, #8]
 8006c34:	6922      	ldr	r2, [r4, #16]
 8006c36:	bf0c      	ite	eq
 8006c38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c3c:	2500      	movne	r5, #0
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	bfc4      	itt	gt
 8006c42:	1a9b      	subgt	r3, r3, r2
 8006c44:	18ed      	addgt	r5, r5, r3
 8006c46:	2600      	movs	r6, #0
 8006c48:	341a      	adds	r4, #26
 8006c4a:	42b5      	cmp	r5, r6
 8006c4c:	d11a      	bne.n	8006c84 <_printf_common+0xc8>
 8006c4e:	2000      	movs	r0, #0
 8006c50:	e008      	b.n	8006c64 <_printf_common+0xa8>
 8006c52:	2301      	movs	r3, #1
 8006c54:	4652      	mov	r2, sl
 8006c56:	4649      	mov	r1, r9
 8006c58:	4638      	mov	r0, r7
 8006c5a:	47c0      	blx	r8
 8006c5c:	3001      	adds	r0, #1
 8006c5e:	d103      	bne.n	8006c68 <_printf_common+0xac>
 8006c60:	f04f 30ff 	mov.w	r0, #4294967295
 8006c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c68:	3501      	adds	r5, #1
 8006c6a:	e7c6      	b.n	8006bfa <_printf_common+0x3e>
 8006c6c:	18e1      	adds	r1, r4, r3
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	2030      	movs	r0, #48	; 0x30
 8006c72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c76:	4422      	add	r2, r4
 8006c78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c80:	3302      	adds	r3, #2
 8006c82:	e7c7      	b.n	8006c14 <_printf_common+0x58>
 8006c84:	2301      	movs	r3, #1
 8006c86:	4622      	mov	r2, r4
 8006c88:	4649      	mov	r1, r9
 8006c8a:	4638      	mov	r0, r7
 8006c8c:	47c0      	blx	r8
 8006c8e:	3001      	adds	r0, #1
 8006c90:	d0e6      	beq.n	8006c60 <_printf_common+0xa4>
 8006c92:	3601      	adds	r6, #1
 8006c94:	e7d9      	b.n	8006c4a <_printf_common+0x8e>
	...

08006c98 <_printf_i>:
 8006c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c9c:	7e0f      	ldrb	r7, [r1, #24]
 8006c9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ca0:	2f78      	cmp	r7, #120	; 0x78
 8006ca2:	4691      	mov	r9, r2
 8006ca4:	4680      	mov	r8, r0
 8006ca6:	460c      	mov	r4, r1
 8006ca8:	469a      	mov	sl, r3
 8006caa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006cae:	d807      	bhi.n	8006cc0 <_printf_i+0x28>
 8006cb0:	2f62      	cmp	r7, #98	; 0x62
 8006cb2:	d80a      	bhi.n	8006cca <_printf_i+0x32>
 8006cb4:	2f00      	cmp	r7, #0
 8006cb6:	f000 80d8 	beq.w	8006e6a <_printf_i+0x1d2>
 8006cba:	2f58      	cmp	r7, #88	; 0x58
 8006cbc:	f000 80a3 	beq.w	8006e06 <_printf_i+0x16e>
 8006cc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006cc8:	e03a      	b.n	8006d40 <_printf_i+0xa8>
 8006cca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006cce:	2b15      	cmp	r3, #21
 8006cd0:	d8f6      	bhi.n	8006cc0 <_printf_i+0x28>
 8006cd2:	a101      	add	r1, pc, #4	; (adr r1, 8006cd8 <_printf_i+0x40>)
 8006cd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cd8:	08006d31 	.word	0x08006d31
 8006cdc:	08006d45 	.word	0x08006d45
 8006ce0:	08006cc1 	.word	0x08006cc1
 8006ce4:	08006cc1 	.word	0x08006cc1
 8006ce8:	08006cc1 	.word	0x08006cc1
 8006cec:	08006cc1 	.word	0x08006cc1
 8006cf0:	08006d45 	.word	0x08006d45
 8006cf4:	08006cc1 	.word	0x08006cc1
 8006cf8:	08006cc1 	.word	0x08006cc1
 8006cfc:	08006cc1 	.word	0x08006cc1
 8006d00:	08006cc1 	.word	0x08006cc1
 8006d04:	08006e51 	.word	0x08006e51
 8006d08:	08006d75 	.word	0x08006d75
 8006d0c:	08006e33 	.word	0x08006e33
 8006d10:	08006cc1 	.word	0x08006cc1
 8006d14:	08006cc1 	.word	0x08006cc1
 8006d18:	08006e73 	.word	0x08006e73
 8006d1c:	08006cc1 	.word	0x08006cc1
 8006d20:	08006d75 	.word	0x08006d75
 8006d24:	08006cc1 	.word	0x08006cc1
 8006d28:	08006cc1 	.word	0x08006cc1
 8006d2c:	08006e3b 	.word	0x08006e3b
 8006d30:	682b      	ldr	r3, [r5, #0]
 8006d32:	1d1a      	adds	r2, r3, #4
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	602a      	str	r2, [r5, #0]
 8006d38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d40:	2301      	movs	r3, #1
 8006d42:	e0a3      	b.n	8006e8c <_printf_i+0x1f4>
 8006d44:	6820      	ldr	r0, [r4, #0]
 8006d46:	6829      	ldr	r1, [r5, #0]
 8006d48:	0606      	lsls	r6, r0, #24
 8006d4a:	f101 0304 	add.w	r3, r1, #4
 8006d4e:	d50a      	bpl.n	8006d66 <_printf_i+0xce>
 8006d50:	680e      	ldr	r6, [r1, #0]
 8006d52:	602b      	str	r3, [r5, #0]
 8006d54:	2e00      	cmp	r6, #0
 8006d56:	da03      	bge.n	8006d60 <_printf_i+0xc8>
 8006d58:	232d      	movs	r3, #45	; 0x2d
 8006d5a:	4276      	negs	r6, r6
 8006d5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d60:	485e      	ldr	r0, [pc, #376]	; (8006edc <_printf_i+0x244>)
 8006d62:	230a      	movs	r3, #10
 8006d64:	e019      	b.n	8006d9a <_printf_i+0x102>
 8006d66:	680e      	ldr	r6, [r1, #0]
 8006d68:	602b      	str	r3, [r5, #0]
 8006d6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d6e:	bf18      	it	ne
 8006d70:	b236      	sxthne	r6, r6
 8006d72:	e7ef      	b.n	8006d54 <_printf_i+0xbc>
 8006d74:	682b      	ldr	r3, [r5, #0]
 8006d76:	6820      	ldr	r0, [r4, #0]
 8006d78:	1d19      	adds	r1, r3, #4
 8006d7a:	6029      	str	r1, [r5, #0]
 8006d7c:	0601      	lsls	r1, r0, #24
 8006d7e:	d501      	bpl.n	8006d84 <_printf_i+0xec>
 8006d80:	681e      	ldr	r6, [r3, #0]
 8006d82:	e002      	b.n	8006d8a <_printf_i+0xf2>
 8006d84:	0646      	lsls	r6, r0, #25
 8006d86:	d5fb      	bpl.n	8006d80 <_printf_i+0xe8>
 8006d88:	881e      	ldrh	r6, [r3, #0]
 8006d8a:	4854      	ldr	r0, [pc, #336]	; (8006edc <_printf_i+0x244>)
 8006d8c:	2f6f      	cmp	r7, #111	; 0x6f
 8006d8e:	bf0c      	ite	eq
 8006d90:	2308      	moveq	r3, #8
 8006d92:	230a      	movne	r3, #10
 8006d94:	2100      	movs	r1, #0
 8006d96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d9a:	6865      	ldr	r5, [r4, #4]
 8006d9c:	60a5      	str	r5, [r4, #8]
 8006d9e:	2d00      	cmp	r5, #0
 8006da0:	bfa2      	ittt	ge
 8006da2:	6821      	ldrge	r1, [r4, #0]
 8006da4:	f021 0104 	bicge.w	r1, r1, #4
 8006da8:	6021      	strge	r1, [r4, #0]
 8006daa:	b90e      	cbnz	r6, 8006db0 <_printf_i+0x118>
 8006dac:	2d00      	cmp	r5, #0
 8006dae:	d04d      	beq.n	8006e4c <_printf_i+0x1b4>
 8006db0:	4615      	mov	r5, r2
 8006db2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006db6:	fb03 6711 	mls	r7, r3, r1, r6
 8006dba:	5dc7      	ldrb	r7, [r0, r7]
 8006dbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006dc0:	4637      	mov	r7, r6
 8006dc2:	42bb      	cmp	r3, r7
 8006dc4:	460e      	mov	r6, r1
 8006dc6:	d9f4      	bls.n	8006db2 <_printf_i+0x11a>
 8006dc8:	2b08      	cmp	r3, #8
 8006dca:	d10b      	bne.n	8006de4 <_printf_i+0x14c>
 8006dcc:	6823      	ldr	r3, [r4, #0]
 8006dce:	07de      	lsls	r6, r3, #31
 8006dd0:	d508      	bpl.n	8006de4 <_printf_i+0x14c>
 8006dd2:	6923      	ldr	r3, [r4, #16]
 8006dd4:	6861      	ldr	r1, [r4, #4]
 8006dd6:	4299      	cmp	r1, r3
 8006dd8:	bfde      	ittt	le
 8006dda:	2330      	movle	r3, #48	; 0x30
 8006ddc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006de0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006de4:	1b52      	subs	r2, r2, r5
 8006de6:	6122      	str	r2, [r4, #16]
 8006de8:	f8cd a000 	str.w	sl, [sp]
 8006dec:	464b      	mov	r3, r9
 8006dee:	aa03      	add	r2, sp, #12
 8006df0:	4621      	mov	r1, r4
 8006df2:	4640      	mov	r0, r8
 8006df4:	f7ff fee2 	bl	8006bbc <_printf_common>
 8006df8:	3001      	adds	r0, #1
 8006dfa:	d14c      	bne.n	8006e96 <_printf_i+0x1fe>
 8006dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006e00:	b004      	add	sp, #16
 8006e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e06:	4835      	ldr	r0, [pc, #212]	; (8006edc <_printf_i+0x244>)
 8006e08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006e0c:	6829      	ldr	r1, [r5, #0]
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e14:	6029      	str	r1, [r5, #0]
 8006e16:	061d      	lsls	r5, r3, #24
 8006e18:	d514      	bpl.n	8006e44 <_printf_i+0x1ac>
 8006e1a:	07df      	lsls	r7, r3, #31
 8006e1c:	bf44      	itt	mi
 8006e1e:	f043 0320 	orrmi.w	r3, r3, #32
 8006e22:	6023      	strmi	r3, [r4, #0]
 8006e24:	b91e      	cbnz	r6, 8006e2e <_printf_i+0x196>
 8006e26:	6823      	ldr	r3, [r4, #0]
 8006e28:	f023 0320 	bic.w	r3, r3, #32
 8006e2c:	6023      	str	r3, [r4, #0]
 8006e2e:	2310      	movs	r3, #16
 8006e30:	e7b0      	b.n	8006d94 <_printf_i+0xfc>
 8006e32:	6823      	ldr	r3, [r4, #0]
 8006e34:	f043 0320 	orr.w	r3, r3, #32
 8006e38:	6023      	str	r3, [r4, #0]
 8006e3a:	2378      	movs	r3, #120	; 0x78
 8006e3c:	4828      	ldr	r0, [pc, #160]	; (8006ee0 <_printf_i+0x248>)
 8006e3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e42:	e7e3      	b.n	8006e0c <_printf_i+0x174>
 8006e44:	0659      	lsls	r1, r3, #25
 8006e46:	bf48      	it	mi
 8006e48:	b2b6      	uxthmi	r6, r6
 8006e4a:	e7e6      	b.n	8006e1a <_printf_i+0x182>
 8006e4c:	4615      	mov	r5, r2
 8006e4e:	e7bb      	b.n	8006dc8 <_printf_i+0x130>
 8006e50:	682b      	ldr	r3, [r5, #0]
 8006e52:	6826      	ldr	r6, [r4, #0]
 8006e54:	6961      	ldr	r1, [r4, #20]
 8006e56:	1d18      	adds	r0, r3, #4
 8006e58:	6028      	str	r0, [r5, #0]
 8006e5a:	0635      	lsls	r5, r6, #24
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	d501      	bpl.n	8006e64 <_printf_i+0x1cc>
 8006e60:	6019      	str	r1, [r3, #0]
 8006e62:	e002      	b.n	8006e6a <_printf_i+0x1d2>
 8006e64:	0670      	lsls	r0, r6, #25
 8006e66:	d5fb      	bpl.n	8006e60 <_printf_i+0x1c8>
 8006e68:	8019      	strh	r1, [r3, #0]
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	6123      	str	r3, [r4, #16]
 8006e6e:	4615      	mov	r5, r2
 8006e70:	e7ba      	b.n	8006de8 <_printf_i+0x150>
 8006e72:	682b      	ldr	r3, [r5, #0]
 8006e74:	1d1a      	adds	r2, r3, #4
 8006e76:	602a      	str	r2, [r5, #0]
 8006e78:	681d      	ldr	r5, [r3, #0]
 8006e7a:	6862      	ldr	r2, [r4, #4]
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	4628      	mov	r0, r5
 8006e80:	f7f9 f9ae 	bl	80001e0 <memchr>
 8006e84:	b108      	cbz	r0, 8006e8a <_printf_i+0x1f2>
 8006e86:	1b40      	subs	r0, r0, r5
 8006e88:	6060      	str	r0, [r4, #4]
 8006e8a:	6863      	ldr	r3, [r4, #4]
 8006e8c:	6123      	str	r3, [r4, #16]
 8006e8e:	2300      	movs	r3, #0
 8006e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e94:	e7a8      	b.n	8006de8 <_printf_i+0x150>
 8006e96:	6923      	ldr	r3, [r4, #16]
 8006e98:	462a      	mov	r2, r5
 8006e9a:	4649      	mov	r1, r9
 8006e9c:	4640      	mov	r0, r8
 8006e9e:	47d0      	blx	sl
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	d0ab      	beq.n	8006dfc <_printf_i+0x164>
 8006ea4:	6823      	ldr	r3, [r4, #0]
 8006ea6:	079b      	lsls	r3, r3, #30
 8006ea8:	d413      	bmi.n	8006ed2 <_printf_i+0x23a>
 8006eaa:	68e0      	ldr	r0, [r4, #12]
 8006eac:	9b03      	ldr	r3, [sp, #12]
 8006eae:	4298      	cmp	r0, r3
 8006eb0:	bfb8      	it	lt
 8006eb2:	4618      	movlt	r0, r3
 8006eb4:	e7a4      	b.n	8006e00 <_printf_i+0x168>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	4632      	mov	r2, r6
 8006eba:	4649      	mov	r1, r9
 8006ebc:	4640      	mov	r0, r8
 8006ebe:	47d0      	blx	sl
 8006ec0:	3001      	adds	r0, #1
 8006ec2:	d09b      	beq.n	8006dfc <_printf_i+0x164>
 8006ec4:	3501      	adds	r5, #1
 8006ec6:	68e3      	ldr	r3, [r4, #12]
 8006ec8:	9903      	ldr	r1, [sp, #12]
 8006eca:	1a5b      	subs	r3, r3, r1
 8006ecc:	42ab      	cmp	r3, r5
 8006ece:	dcf2      	bgt.n	8006eb6 <_printf_i+0x21e>
 8006ed0:	e7eb      	b.n	8006eaa <_printf_i+0x212>
 8006ed2:	2500      	movs	r5, #0
 8006ed4:	f104 0619 	add.w	r6, r4, #25
 8006ed8:	e7f5      	b.n	8006ec6 <_printf_i+0x22e>
 8006eda:	bf00      	nop
 8006edc:	08007681 	.word	0x08007681
 8006ee0:	08007692 	.word	0x08007692

08006ee4 <memcpy>:
 8006ee4:	440a      	add	r2, r1
 8006ee6:	4291      	cmp	r1, r2
 8006ee8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006eec:	d100      	bne.n	8006ef0 <memcpy+0xc>
 8006eee:	4770      	bx	lr
 8006ef0:	b510      	push	{r4, lr}
 8006ef2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ef6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006efa:	4291      	cmp	r1, r2
 8006efc:	d1f9      	bne.n	8006ef2 <memcpy+0xe>
 8006efe:	bd10      	pop	{r4, pc}

08006f00 <memmove>:
 8006f00:	4288      	cmp	r0, r1
 8006f02:	b510      	push	{r4, lr}
 8006f04:	eb01 0402 	add.w	r4, r1, r2
 8006f08:	d902      	bls.n	8006f10 <memmove+0x10>
 8006f0a:	4284      	cmp	r4, r0
 8006f0c:	4623      	mov	r3, r4
 8006f0e:	d807      	bhi.n	8006f20 <memmove+0x20>
 8006f10:	1e43      	subs	r3, r0, #1
 8006f12:	42a1      	cmp	r1, r4
 8006f14:	d008      	beq.n	8006f28 <memmove+0x28>
 8006f16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f1e:	e7f8      	b.n	8006f12 <memmove+0x12>
 8006f20:	4402      	add	r2, r0
 8006f22:	4601      	mov	r1, r0
 8006f24:	428a      	cmp	r2, r1
 8006f26:	d100      	bne.n	8006f2a <memmove+0x2a>
 8006f28:	bd10      	pop	{r4, pc}
 8006f2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f32:	e7f7      	b.n	8006f24 <memmove+0x24>

08006f34 <_free_r>:
 8006f34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f36:	2900      	cmp	r1, #0
 8006f38:	d044      	beq.n	8006fc4 <_free_r+0x90>
 8006f3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f3e:	9001      	str	r0, [sp, #4]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f1a1 0404 	sub.w	r4, r1, #4
 8006f46:	bfb8      	it	lt
 8006f48:	18e4      	addlt	r4, r4, r3
 8006f4a:	f000 f913 	bl	8007174 <__malloc_lock>
 8006f4e:	4a1e      	ldr	r2, [pc, #120]	; (8006fc8 <_free_r+0x94>)
 8006f50:	9801      	ldr	r0, [sp, #4]
 8006f52:	6813      	ldr	r3, [r2, #0]
 8006f54:	b933      	cbnz	r3, 8006f64 <_free_r+0x30>
 8006f56:	6063      	str	r3, [r4, #4]
 8006f58:	6014      	str	r4, [r2, #0]
 8006f5a:	b003      	add	sp, #12
 8006f5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f60:	f000 b90e 	b.w	8007180 <__malloc_unlock>
 8006f64:	42a3      	cmp	r3, r4
 8006f66:	d908      	bls.n	8006f7a <_free_r+0x46>
 8006f68:	6825      	ldr	r5, [r4, #0]
 8006f6a:	1961      	adds	r1, r4, r5
 8006f6c:	428b      	cmp	r3, r1
 8006f6e:	bf01      	itttt	eq
 8006f70:	6819      	ldreq	r1, [r3, #0]
 8006f72:	685b      	ldreq	r3, [r3, #4]
 8006f74:	1949      	addeq	r1, r1, r5
 8006f76:	6021      	streq	r1, [r4, #0]
 8006f78:	e7ed      	b.n	8006f56 <_free_r+0x22>
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	b10b      	cbz	r3, 8006f84 <_free_r+0x50>
 8006f80:	42a3      	cmp	r3, r4
 8006f82:	d9fa      	bls.n	8006f7a <_free_r+0x46>
 8006f84:	6811      	ldr	r1, [r2, #0]
 8006f86:	1855      	adds	r5, r2, r1
 8006f88:	42a5      	cmp	r5, r4
 8006f8a:	d10b      	bne.n	8006fa4 <_free_r+0x70>
 8006f8c:	6824      	ldr	r4, [r4, #0]
 8006f8e:	4421      	add	r1, r4
 8006f90:	1854      	adds	r4, r2, r1
 8006f92:	42a3      	cmp	r3, r4
 8006f94:	6011      	str	r1, [r2, #0]
 8006f96:	d1e0      	bne.n	8006f5a <_free_r+0x26>
 8006f98:	681c      	ldr	r4, [r3, #0]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	6053      	str	r3, [r2, #4]
 8006f9e:	4421      	add	r1, r4
 8006fa0:	6011      	str	r1, [r2, #0]
 8006fa2:	e7da      	b.n	8006f5a <_free_r+0x26>
 8006fa4:	d902      	bls.n	8006fac <_free_r+0x78>
 8006fa6:	230c      	movs	r3, #12
 8006fa8:	6003      	str	r3, [r0, #0]
 8006faa:	e7d6      	b.n	8006f5a <_free_r+0x26>
 8006fac:	6825      	ldr	r5, [r4, #0]
 8006fae:	1961      	adds	r1, r4, r5
 8006fb0:	428b      	cmp	r3, r1
 8006fb2:	bf04      	itt	eq
 8006fb4:	6819      	ldreq	r1, [r3, #0]
 8006fb6:	685b      	ldreq	r3, [r3, #4]
 8006fb8:	6063      	str	r3, [r4, #4]
 8006fba:	bf04      	itt	eq
 8006fbc:	1949      	addeq	r1, r1, r5
 8006fbe:	6021      	streq	r1, [r4, #0]
 8006fc0:	6054      	str	r4, [r2, #4]
 8006fc2:	e7ca      	b.n	8006f5a <_free_r+0x26>
 8006fc4:	b003      	add	sp, #12
 8006fc6:	bd30      	pop	{r4, r5, pc}
 8006fc8:	2000035c 	.word	0x2000035c

08006fcc <sbrk_aligned>:
 8006fcc:	b570      	push	{r4, r5, r6, lr}
 8006fce:	4e0e      	ldr	r6, [pc, #56]	; (8007008 <sbrk_aligned+0x3c>)
 8006fd0:	460c      	mov	r4, r1
 8006fd2:	6831      	ldr	r1, [r6, #0]
 8006fd4:	4605      	mov	r5, r0
 8006fd6:	b911      	cbnz	r1, 8006fde <sbrk_aligned+0x12>
 8006fd8:	f000 f8bc 	bl	8007154 <_sbrk_r>
 8006fdc:	6030      	str	r0, [r6, #0]
 8006fde:	4621      	mov	r1, r4
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	f000 f8b7 	bl	8007154 <_sbrk_r>
 8006fe6:	1c43      	adds	r3, r0, #1
 8006fe8:	d00a      	beq.n	8007000 <sbrk_aligned+0x34>
 8006fea:	1cc4      	adds	r4, r0, #3
 8006fec:	f024 0403 	bic.w	r4, r4, #3
 8006ff0:	42a0      	cmp	r0, r4
 8006ff2:	d007      	beq.n	8007004 <sbrk_aligned+0x38>
 8006ff4:	1a21      	subs	r1, r4, r0
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	f000 f8ac 	bl	8007154 <_sbrk_r>
 8006ffc:	3001      	adds	r0, #1
 8006ffe:	d101      	bne.n	8007004 <sbrk_aligned+0x38>
 8007000:	f04f 34ff 	mov.w	r4, #4294967295
 8007004:	4620      	mov	r0, r4
 8007006:	bd70      	pop	{r4, r5, r6, pc}
 8007008:	20000360 	.word	0x20000360

0800700c <_malloc_r>:
 800700c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007010:	1ccd      	adds	r5, r1, #3
 8007012:	f025 0503 	bic.w	r5, r5, #3
 8007016:	3508      	adds	r5, #8
 8007018:	2d0c      	cmp	r5, #12
 800701a:	bf38      	it	cc
 800701c:	250c      	movcc	r5, #12
 800701e:	2d00      	cmp	r5, #0
 8007020:	4607      	mov	r7, r0
 8007022:	db01      	blt.n	8007028 <_malloc_r+0x1c>
 8007024:	42a9      	cmp	r1, r5
 8007026:	d905      	bls.n	8007034 <_malloc_r+0x28>
 8007028:	230c      	movs	r3, #12
 800702a:	603b      	str	r3, [r7, #0]
 800702c:	2600      	movs	r6, #0
 800702e:	4630      	mov	r0, r6
 8007030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007034:	4e2e      	ldr	r6, [pc, #184]	; (80070f0 <_malloc_r+0xe4>)
 8007036:	f000 f89d 	bl	8007174 <__malloc_lock>
 800703a:	6833      	ldr	r3, [r6, #0]
 800703c:	461c      	mov	r4, r3
 800703e:	bb34      	cbnz	r4, 800708e <_malloc_r+0x82>
 8007040:	4629      	mov	r1, r5
 8007042:	4638      	mov	r0, r7
 8007044:	f7ff ffc2 	bl	8006fcc <sbrk_aligned>
 8007048:	1c43      	adds	r3, r0, #1
 800704a:	4604      	mov	r4, r0
 800704c:	d14d      	bne.n	80070ea <_malloc_r+0xde>
 800704e:	6834      	ldr	r4, [r6, #0]
 8007050:	4626      	mov	r6, r4
 8007052:	2e00      	cmp	r6, #0
 8007054:	d140      	bne.n	80070d8 <_malloc_r+0xcc>
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	4631      	mov	r1, r6
 800705a:	4638      	mov	r0, r7
 800705c:	eb04 0803 	add.w	r8, r4, r3
 8007060:	f000 f878 	bl	8007154 <_sbrk_r>
 8007064:	4580      	cmp	r8, r0
 8007066:	d13a      	bne.n	80070de <_malloc_r+0xd2>
 8007068:	6821      	ldr	r1, [r4, #0]
 800706a:	3503      	adds	r5, #3
 800706c:	1a6d      	subs	r5, r5, r1
 800706e:	f025 0503 	bic.w	r5, r5, #3
 8007072:	3508      	adds	r5, #8
 8007074:	2d0c      	cmp	r5, #12
 8007076:	bf38      	it	cc
 8007078:	250c      	movcc	r5, #12
 800707a:	4629      	mov	r1, r5
 800707c:	4638      	mov	r0, r7
 800707e:	f7ff ffa5 	bl	8006fcc <sbrk_aligned>
 8007082:	3001      	adds	r0, #1
 8007084:	d02b      	beq.n	80070de <_malloc_r+0xd2>
 8007086:	6823      	ldr	r3, [r4, #0]
 8007088:	442b      	add	r3, r5
 800708a:	6023      	str	r3, [r4, #0]
 800708c:	e00e      	b.n	80070ac <_malloc_r+0xa0>
 800708e:	6822      	ldr	r2, [r4, #0]
 8007090:	1b52      	subs	r2, r2, r5
 8007092:	d41e      	bmi.n	80070d2 <_malloc_r+0xc6>
 8007094:	2a0b      	cmp	r2, #11
 8007096:	d916      	bls.n	80070c6 <_malloc_r+0xba>
 8007098:	1961      	adds	r1, r4, r5
 800709a:	42a3      	cmp	r3, r4
 800709c:	6025      	str	r5, [r4, #0]
 800709e:	bf18      	it	ne
 80070a0:	6059      	strne	r1, [r3, #4]
 80070a2:	6863      	ldr	r3, [r4, #4]
 80070a4:	bf08      	it	eq
 80070a6:	6031      	streq	r1, [r6, #0]
 80070a8:	5162      	str	r2, [r4, r5]
 80070aa:	604b      	str	r3, [r1, #4]
 80070ac:	4638      	mov	r0, r7
 80070ae:	f104 060b 	add.w	r6, r4, #11
 80070b2:	f000 f865 	bl	8007180 <__malloc_unlock>
 80070b6:	f026 0607 	bic.w	r6, r6, #7
 80070ba:	1d23      	adds	r3, r4, #4
 80070bc:	1af2      	subs	r2, r6, r3
 80070be:	d0b6      	beq.n	800702e <_malloc_r+0x22>
 80070c0:	1b9b      	subs	r3, r3, r6
 80070c2:	50a3      	str	r3, [r4, r2]
 80070c4:	e7b3      	b.n	800702e <_malloc_r+0x22>
 80070c6:	6862      	ldr	r2, [r4, #4]
 80070c8:	42a3      	cmp	r3, r4
 80070ca:	bf0c      	ite	eq
 80070cc:	6032      	streq	r2, [r6, #0]
 80070ce:	605a      	strne	r2, [r3, #4]
 80070d0:	e7ec      	b.n	80070ac <_malloc_r+0xa0>
 80070d2:	4623      	mov	r3, r4
 80070d4:	6864      	ldr	r4, [r4, #4]
 80070d6:	e7b2      	b.n	800703e <_malloc_r+0x32>
 80070d8:	4634      	mov	r4, r6
 80070da:	6876      	ldr	r6, [r6, #4]
 80070dc:	e7b9      	b.n	8007052 <_malloc_r+0x46>
 80070de:	230c      	movs	r3, #12
 80070e0:	603b      	str	r3, [r7, #0]
 80070e2:	4638      	mov	r0, r7
 80070e4:	f000 f84c 	bl	8007180 <__malloc_unlock>
 80070e8:	e7a1      	b.n	800702e <_malloc_r+0x22>
 80070ea:	6025      	str	r5, [r4, #0]
 80070ec:	e7de      	b.n	80070ac <_malloc_r+0xa0>
 80070ee:	bf00      	nop
 80070f0:	2000035c 	.word	0x2000035c

080070f4 <_realloc_r>:
 80070f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070f8:	4680      	mov	r8, r0
 80070fa:	4614      	mov	r4, r2
 80070fc:	460e      	mov	r6, r1
 80070fe:	b921      	cbnz	r1, 800710a <_realloc_r+0x16>
 8007100:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007104:	4611      	mov	r1, r2
 8007106:	f7ff bf81 	b.w	800700c <_malloc_r>
 800710a:	b92a      	cbnz	r2, 8007118 <_realloc_r+0x24>
 800710c:	f7ff ff12 	bl	8006f34 <_free_r>
 8007110:	4625      	mov	r5, r4
 8007112:	4628      	mov	r0, r5
 8007114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007118:	f000 f838 	bl	800718c <_malloc_usable_size_r>
 800711c:	4284      	cmp	r4, r0
 800711e:	4607      	mov	r7, r0
 8007120:	d802      	bhi.n	8007128 <_realloc_r+0x34>
 8007122:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007126:	d812      	bhi.n	800714e <_realloc_r+0x5a>
 8007128:	4621      	mov	r1, r4
 800712a:	4640      	mov	r0, r8
 800712c:	f7ff ff6e 	bl	800700c <_malloc_r>
 8007130:	4605      	mov	r5, r0
 8007132:	2800      	cmp	r0, #0
 8007134:	d0ed      	beq.n	8007112 <_realloc_r+0x1e>
 8007136:	42bc      	cmp	r4, r7
 8007138:	4622      	mov	r2, r4
 800713a:	4631      	mov	r1, r6
 800713c:	bf28      	it	cs
 800713e:	463a      	movcs	r2, r7
 8007140:	f7ff fed0 	bl	8006ee4 <memcpy>
 8007144:	4631      	mov	r1, r6
 8007146:	4640      	mov	r0, r8
 8007148:	f7ff fef4 	bl	8006f34 <_free_r>
 800714c:	e7e1      	b.n	8007112 <_realloc_r+0x1e>
 800714e:	4635      	mov	r5, r6
 8007150:	e7df      	b.n	8007112 <_realloc_r+0x1e>
	...

08007154 <_sbrk_r>:
 8007154:	b538      	push	{r3, r4, r5, lr}
 8007156:	4d06      	ldr	r5, [pc, #24]	; (8007170 <_sbrk_r+0x1c>)
 8007158:	2300      	movs	r3, #0
 800715a:	4604      	mov	r4, r0
 800715c:	4608      	mov	r0, r1
 800715e:	602b      	str	r3, [r5, #0]
 8007160:	f7fa fa84 	bl	800166c <_sbrk>
 8007164:	1c43      	adds	r3, r0, #1
 8007166:	d102      	bne.n	800716e <_sbrk_r+0x1a>
 8007168:	682b      	ldr	r3, [r5, #0]
 800716a:	b103      	cbz	r3, 800716e <_sbrk_r+0x1a>
 800716c:	6023      	str	r3, [r4, #0]
 800716e:	bd38      	pop	{r3, r4, r5, pc}
 8007170:	20000364 	.word	0x20000364

08007174 <__malloc_lock>:
 8007174:	4801      	ldr	r0, [pc, #4]	; (800717c <__malloc_lock+0x8>)
 8007176:	f000 b811 	b.w	800719c <__retarget_lock_acquire_recursive>
 800717a:	bf00      	nop
 800717c:	20000368 	.word	0x20000368

08007180 <__malloc_unlock>:
 8007180:	4801      	ldr	r0, [pc, #4]	; (8007188 <__malloc_unlock+0x8>)
 8007182:	f000 b80c 	b.w	800719e <__retarget_lock_release_recursive>
 8007186:	bf00      	nop
 8007188:	20000368 	.word	0x20000368

0800718c <_malloc_usable_size_r>:
 800718c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007190:	1f18      	subs	r0, r3, #4
 8007192:	2b00      	cmp	r3, #0
 8007194:	bfbc      	itt	lt
 8007196:	580b      	ldrlt	r3, [r1, r0]
 8007198:	18c0      	addlt	r0, r0, r3
 800719a:	4770      	bx	lr

0800719c <__retarget_lock_acquire_recursive>:
 800719c:	4770      	bx	lr

0800719e <__retarget_lock_release_recursive>:
 800719e:	4770      	bx	lr

080071a0 <_init>:
 80071a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071a2:	bf00      	nop
 80071a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071a6:	bc08      	pop	{r3}
 80071a8:	469e      	mov	lr, r3
 80071aa:	4770      	bx	lr

080071ac <_fini>:
 80071ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ae:	bf00      	nop
 80071b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071b2:	bc08      	pop	{r3}
 80071b4:	469e      	mov	lr, r3
 80071b6:	4770      	bx	lr
